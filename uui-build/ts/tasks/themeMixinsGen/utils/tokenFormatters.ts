import { IThemeVar } from '../../themeTokensGen/types/sharedTypes';
import { figmaVarComparator } from '../../themeTokensGen/utils/sortingUtils';
import { GROUPS_CONFIG, TOKENS_MIXIN_NAME } from '../constants';

type TVar = { token: IThemeVar, name: string, value: string };
type TVarGroup = { title: string, items: TVar[] };

export function formatVarsAsMixin(params: { scssVars: TVar[], cssVars: TVar[] }): string {
    const { cssVars, scssVars } = params;

    // SCSS
    const scssVarsSorted = sortVariablesArr(scssVars);
    const scssVarsFormatted = formatBlockOfVariables({ arr: scssVarsSorted, indent: 0, title: 'Private Figma vars' }) || undefined;

    // CSS
    const cssVarsSortedAll = sortVariablesArr(cssVars);

    const cssVarsPublishedGrouped = groupVars(cssVarsSortedAll);
    const cssVarsPublishedGroupedFormatted = formatGroupedVars(cssVarsPublishedGrouped, 1);

    return [
        '// This file is AUTOGENERATED from Figma',
        scssVarsFormatted,
        '',
        `@mixin ${TOKENS_MIXIN_NAME} {`,
        '',
        cssVarsPublishedGroupedFormatted,
        '}',
    ].filter((i) => typeof i === 'string').join('\n');
}

function getVarGroupId(varId: string) {
    return Object.keys(GROUPS_CONFIG).find((key) => {
        const { condition } = GROUPS_CONFIG[key];
        if (condition) {
            return condition.some((c) => varId.indexOf(c) === 0);
        }
        return true;
    }) as string;
}

function groupVars(vars: TVar[]): Record<string, TVarGroup> {
    return Object.keys(GROUPS_CONFIG).reduce<Record<string, TVarGroup>>((acc, groupId) => {
        vars.forEach((item) => {
            const varGroupId = getVarGroupId(item.token.id);
            if (groupId === varGroupId) {
                if (!acc[groupId]) {
                    acc[groupId] = { title: GROUPS_CONFIG[groupId].title, items: [] };
                }
                acc[groupId].items.push(item);
            }
        });
        return acc;
    }, {});
}

function formatGroupedVars(grouped: Record<string, TVarGroup>, indent: number): string {
    return Object.keys(grouped).reduce((acc, groupId, currentIndex) => {
        const block = grouped[groupId];
        const formatted = formatBlockOfVariables({ arr: block.items, indent, title: block.title });
        return acc + (currentIndex === 0 ? '' : '\n\n') + formatted;
    }, '');
}

function formatBlockOfVariables(params: { arr: TVar[], indent: number, title: string }): string {
    const { arr, title, indent } = params;
    const group = arr.map(({ name, value }) => {
        return `${getIndent(indent)}${name}: ${value};`;
    }).join('\n');
    return wrapBlockInComments(group, title, indent);
}

function getIndent(indent: number): string {
    return new Array(4 * indent).fill(' ').join('');
}

function sortVariablesArr(arr: TVar[]) {
    return [...arr].sort((e1, e2) => figmaVarComparator(e1.token.id, e2.token.id));
}

function wrapBlockInComments(str: string, groupName: string, indent: number) {
    if (str.trim() === '') {
        return '';
    }
    const I = getIndent(indent);
    const start = `${I}/* "${groupName}" start */`;
    const end = `${I}/* "${groupName}" end */`;
    return [
        start,
        str,
        end,
    ].join('\n');
}
