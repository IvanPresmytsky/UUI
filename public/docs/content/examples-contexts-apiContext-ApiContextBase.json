{
  "object": "value",
  "document": {
    "object": "document",
    "data": {},
    "nodes": [
      {
        "object": "block",
        "type": "paragraph",
        "data": {},
        "nodes": [
          {
            "object": "text",
            "text": "For automatic API calls error handling, you need to use the ",
            "marks": []
          },
          {
            "object": "text",
            "text": "processRequest",
            "marks": [
              {
                "object": "mark",
                "type": "uui-richTextEditor-code",
                "data": {}
              }
            ]
          },
          {
            "object": "text",
            "text": " API context method, which will report errors in the Context.",
            "marks": []
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "data": {},
        "nodes": [
          {
            "object": "text",
            "text": "Also, you need to wrap your application into UUI ",
            "marks": []
          },
          {
            "object": "inline",
            "type": "link",
            "data": {
              "url": "/documents?category=contexts&id=contextProvider&mode=doc&skin=UUI4_promo"
            },
            "nodes": [
              {
                "object": "text",
                "text": "ContextProvider",
                "marks": []
              }
            ]
          },
          {
            "object": "text",
            "text": ", and ",
            "marks": []
          },
          {
            "object": "text",
            "text": "ErrorHandler",
            "marks": [
              {
                "object": "mark",
                "type": "uui-richTextEditor-code",
                "data": {}
              }
            ]
          },
          {
            "object": "text",
            "text": " component, which will subscribe to the API and error contexts reported errors and replaces ErrorHandler children with appropriate error screen or starts the recovery process depending on the error type.",
            "marks": []
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "data": {},
        "nodes": [
          {
            "object": "text",
            "text": "By default, ",
            "marks": []
          },
          {
            "object": "text",
            "text": "ErrorHandler",
            "marks": [
              {
                "object": "mark",
                "type": "uui-richTextEditor-code",
                "data": {}
              }
            ]
          },
          {
            "object": "text",
            "text": " will handle errors by itself, but you can customize it via options for the ",
            "marks": []
          },
          {
            "object": "text",
            "text": "processRequese",
            "marks": [
              {
                "object": "mark",
                "type": "uui-richTextEditor-code",
                "data": {}
              }
            ]
          },
          {
            "object": "text",
            "text": " method. There are three types of handling errors:",
            "marks": []
          }
        ]
      },
      {
        "object": "block",
        "type": "unordered-list",
        "data": {},
        "nodes": [
          {
            "object": "block",
            "type": "list-item",
            "data": {},
            "nodes": [
              {
                "object": "block",
                "type": "list-item-child",
                "data": {},
                "nodes": [
                  {
                    "object": "text",
                    "text": "manual - you need to handle the error by yourself. UUI will do nothing and reject the promise with an error.",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "list-item",
            "data": {},
            "nodes": [
              {
                "object": "block",
                "type": "list-item-child",
                "data": {},
                "nodes": [
                  {
                    "object": "text",
                    "text": "page - default behavior, ErrorHandler will replace children with an error screen.",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "list-item",
            "data": {},
            "nodes": [
              {
                "object": "block",
                "type": "list-item-child",
                "data": {},
                "nodes": [
                  {
                    "object": "text",
                    "text": "notification - shows content from API response ",
                    "marks": []
                  },
                  {
                    "object": "text",
                    "text": "errorMessage",
                    "marks": [
                      {
                        "object": "mark",
                        "type": "uui-richTextEditor-code",
                        "data": {}
                      }
                    ]
                  },
                  {
                    "object": "text",
                    "text": " field into notification card. It's often used to handle some non-critical, expected business logic errors.",
                    "marks": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "data": {},
        "nodes": [
          {
            "object": "text",
            "text": "In this example, we demonstrate handling some errors with different error-hanging types.",
            "marks": []
          }
        ]
      }
    ]
  }
}