[
  {
    "type": "paragraph",
    "children": [
      {
        "text": "UUI Theming allows you to define a set of CSS variables to change the appearance of components to align them with your brand requirements. This set of CSS variables, defined according to a specific brand, is called a Theme. You can find an example of such a themeÂ "
      },
      {
        "type": "link",
        "url": "https://chat.lab.epam.com/url",
        "target": "_blank",
        "children": [
          {
            "text": "here"
          }
        ]
      },
      {
        "text": "."
      }
    ]
  },
  {
    "type": "paragraph",
    "children": [
      {
        "text": "In essence, the theming mechanism is built on top of the "
      },
      {
        "text": "@epam/uui",
        "uui-richTextEditor-code": true
      },
      {
        "text": " package, which contains a range of theme-agnostic components that depend on theme variables for their styling. Each component possesses specific CSS variables that define its appearance, such as background, borders, text color, etc. These component-specific variables use theme variables as their default value, so it's not required to define them all, use them only for cases when you need to customize some specific component or his part."
      }
    ]
  },
  {
    "type": "uui-richTextEditor-header-3",
    "children": [
      {
        "text": "How to add theme to your project"
      }
    ]
  },
  {
    "type": "paragraph",
    "children": [
      {
        "text": "UUI provides a set of ready-made themes: Electric, Loveship, Loveship Dark and Promo. \n"
      },
      {
        "text": "List of exists theme classes:",
        "uui-richTextEditor-bold": true
      }
    ]
  },
  {
    "type": "unordered-list",
    "children": [
      {
        "type": "list-item",
        "children": [
          {
            "type": "list-item-child",
            "data": {},
            "children": [
              {
                "text": "Electric - \"uui-theme-electric\","
              }
            ]
          }
        ]
      },
      {
        "type": "list-item",
        "children": [
          {
            "type": "list-item-child",
            "data": {},
            "children": [
              {
                "text": "Loveship - \"uui-theme-loveship\","
              }
            ]
          }
        ]
      },
      {
        "type": "list-item",
        "children": [
          {
            "type": "list-item-child",
            "data": {},
            "children": [
              {
                "text": "Loveship Dark - \"uui-theme-loveship_dark\","
              }
            ]
          }
        ]
      },
      {
        "type": "list-item",
        "children": [
          {
            "type": "list-item-child",
            "data": {},
            "children": [
              {
                "text": "Promo - \"uui-theme-promo\"."
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "type": "paragraph",
    "children": [
      {
        "text": "To add theme into you project you need:"
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "text": "1. Import styles from ",
        "uui-richTextEditor-bold": true
      },
      {
        "text": "@epam/assets",
        "uui-richTextEditor-code": true,
        "uui-richTextEditor-bold": true
      },
      {
        "text": " package to the root of your app(e.g., index.tsx).",
        "uui-richTextEditor-bold": true
      }
    ]
  },
  {
    "type": "note-quote",
    "data": {},
    "children": [
      {
        "text": "index.tsx",
        "uui-richTextEditor-bold": true
      },
      {
        "text": "\n"
      },
      {
        "uui-richTextEditor-bold": true,
        "text": "\n"
      },
      {
        "text": "// Import theme styles:\nimport '@epam/assets/css/theme/theme-{ \"theme_name\" }.css';\n\n",
        "uui-richTextEditor-span-mark": true
      },
      {
        "uui-richTextEditor-span-mark": true,
        "text": "E.g.",
        "uui-richTextEditor-bold": true
      },
      {
        "uui-richTextEditor-span-mark": true,
        "text": "\n\nimport '@epam/assets/css/theme/theme-electric.css';"
      }
    ]
  },
  {
    "type": "paragraph",
    "children": [
      {
        "text": "2. Add one of the theme classes to the body .",
        "uui-richTextEditor-bold": true
      }
    ]
  },
  {
    "type": "note-quote",
    "children": [
      {
        "text": "index.html",
        "uui-richTextEditor-bold": true
      },
      {
        "text": "\n\n<body class=\"uui-theme-"
      },
      {
        "text": "{ \"theme_name\" }",
        "uui-richTextEditor-span-mark": true
      },
      {
        "text": "\">"
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "uui-richTextEditor-span-mark": true,
        "text": "3. Import and use components from the ",
        "uui-richTextEditor-bold": true
      },
      {
        "text": "@epam/uui",
        "uui-richTextEditor-code": true,
        "uui-richTextEditor-bold": true
      },
      {
        "text": " package.",
        "uui-richTextEditor-bold": true
      }
    ]
  },
  {
    "type": "uui-richTextEditor-header-3",
    "children": [
      {
        "text": "Skins"
      }
    ]
  },
  {
    "type": "paragraph",
    "children": [
      {
        "text": "Along with set of themes for the "
      },
      {
        "text": "@epam/uui",
        "uui-richTextEditor-code": true
      },
      {
        "text": " package, we also offering Skin packages: "
      },
      {
        "text": "@epam/electric",
        "uui-richTextEditor-code": true
      },
      {
        "text": ", "
      },
      {
        "text": "@epam/loveship",
        "uui-richTextEditor-code": true
      },
      {
        "text": " and "
      },
      {
        "text": "@epam/promo",
        "uui-richTextEditor-code": true
      },
      {
        "text": ". "
      }
    ],
    "data": {}
  },
  {
    "data": {},
    "type": "paragraph",
    "children": [
      {
        "text": "What is the difference between a Skin and a Theme?",
        "uui-richTextEditor-bold": true
      }
    ]
  },
  {
    "data": {},
    "type": "unordered-list",
    "children": [
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {},
            "type": "list-item-child",
            "children": [
              {
                "text": "Skin can define its own set of colors. Instead of just pre-defined semantic colors, such as primary/secondary/success/critical and etc., we can use extended and brand-named set of colors and modifiers."
              }
            ]
          }
        ]
      },
      {
        "data": {},
        "type": "list-item",
        "children": [
          {
            "data": {},
            "type": "list-item-child",
            "children": [
              {
                "text": "Skin, being a separate package, can define custom, brand-specific components which don't exist in the base "
              },
              {
                "text": "@epam/uui",
                "uui-richTextEditor-code": true
              },
              {
                "text": " package."
              }
            ]
          }
        ]
      },
      {
        "type": "list-item",
        "children": [
          {
            "type": "list-item-child",
            "children": [
              {
                "text": "You  won't be able to to switch theme to the another one(except dark variation of the same Theme), because Skin brand-named set of colors and modifiers broke a semantic approach. Button with blue color can't became a purple with new theme. Instead of Button from "
              },
              {
                "text": "@epam/uui",
                "uui-richTextEditor-code": true
              },
              {
                "text": ", with semantic primary color, can be any color defined by theme."
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "data": {},
    "type": "note-link",
    "children": [
      {
        "text": "In general, you would prefer to use Skin package, if exists.\nYou might opt to use @epam/uui components directly, if there are no Skin package for your Theme, or you are building theme-agnostic UI."
      }
    ]
  },
  {
    "type": "uui-richTextEditor-header-3",
    "children": [
      {
        "text": "Usage of theme variables in your project"
      }
    ],
    "data": {}
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "text": "Theme variables not assumed as a internal API they can be used, not only to style UUI components, but also anywhere in your application. For example, it will be useful if you have a dark/light theme switcher or if you made a theme agnostic interface. "
      }
    ]
  },
  {
    "type": "note-link",
    "data": {},
    "children": [
      {
        "text": "CSS Variables and Figma Tokes are aligned. You can copy CSS code variables from Figma Dev Mode directly into your code."
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "text": "To make the variables easier to use, we have divided them into logical groups."
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "text": "T"
      },
      {
        "text": "heme-specific variables",
        "uui-richTextEditor-bold": true
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "text": "Palette variables are primitive color values in our library. Palette defines colors, specific to particular theme. Color set and names can be different between Themes."
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "text": "--electric-50: #0A68F1;",
        "uui-richTextEditor-code": true
      }
    ]
  },
  {
    "type": "paragraph",
    "children": [
      {
        "text": "Â Use this variables if you target only one Theme. Note that this would make your UI bound to particular Theme, and you it would complicate switching to another Theme later. Exception: light and dark versions of the same Theme, as they would usually has the same set and names for colors."
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "uui-richTextEditor-bold": true,
        "text": "UUI semantic variables"
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "text": "Semantic variables relate to a specific context or abstraction.  Semantic variable helps communicate the intended purpose of a variable, and are effective when a value with a single intent will appear in multiple places. E.g. Defines semantic colors (like Primary and Neutral). Semantic colors has same names across different Themes."
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "text": "--uui-primary-50: var(--electric-50);",
        "uui-richTextEditor-code": true
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "uui-richTextEditor-code": true,
        "text": "--uui-control-bg: var(--uui-neutral-0);"
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "text": "It's safe to use semantic variables if you need to build Theme-agnostic UI, which can work in different Themes."
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "uui-richTextEditor-bold": true,
        "text": "Color classes"
      }
    ]
  },
  {
    "type": "note-error",
    "data": {},
    "children": [
      {
        "text": "This API isn't stable yet and can be changed. We strongly discourage using this in your projects until a stable version is released."
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "text": "Color classes are sets of semantic and additional colors grouped in classes to use in colored components. "
      }
    ]
  },
  {
    "type": "note-quote",
    "data": {},
    "children": [
      {
        "text": ".uui-color-primary",
        "color": "critical"
      },
      {
        "text": " {\n    --uui-color-5: "
      },
      {
        "text": "var(--uui-primary-5)",
        "color": "critical"
      },
      {
        "text": ";\n    --uui-color-10: "
      },
      {
        "text": "var(--uui-primary-10)",
        "color": "critical"
      },
      {
        "text": ";\n    --uui-color-20: "
      },
      {
        "text": "var(--uui-primary-20)",
        "color": "critical"
      },
      {
        "text": ";\n    --uui-color-50: "
      },
      {
        "text": "var(--uui-primary-50)",
        "color": "critical"
      },
      {
        "text": ";\n    --uui-color-60: "
      },
      {
        "text": "var(--uui-primary-60)",
        "color": "critical"
      },
      {
        "text": ";\n    --uui-color-70: "
      },
      {
        "text": "var(--uui-primary-70)",
        "color": "critical"
      },
      {
        "text": ";\n    --uui-color-contrast: "
      },
      {
        "text": "var(--white)",
        "color": "critical"
      },
      {
        "text": ";\n}"
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "uui-richTextEditor-bold": true,
        "text": "Component-specific variables"
      }
    ]
  },
  {
    "type": "note-error",
    "data": {},
    "children": [
      {
        "text": "This API isn't stable yet and can be changed. We strongly discourage using this in your projects until a stable version is released."
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "text": "Component-specific variables are an exhaustive representation of every value associated with a component. In general they inherit from core variables, but are named in a way that allows engineering teams to be as specific as possible in applying variables in component development."
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "text": "--uui-primary-50  =>  --uui-spinner",
        "uui-richTextEditor-code": true
      }
    ]
  },
  {
    "type": "paragraph",
    "data": {},
    "children": [
      {
        "text": "Also if component has set of colors they can inherit values from color classes.\n"
      },
      {
        "text": "--uui-color-50  =>  --uui-btn-bg",
        "uui-richTextEditor-code": true
      },
      {
        "text": "\n"
      }
    ]
  }
]