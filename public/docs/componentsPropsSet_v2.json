{
 "@epam/uui-core": {
  "AcceptDropParams": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "AcceptDropParams",
    "nameFull": "AcceptDropParams<TSrcData, TDstData>"
   },
   "typeValue": {
    "raw": "AcceptDropParams<TSrcData, TDstData>",
    "print": [
     "interface AcceptDropParams<TSrcData, TDstData> {",
     "    srcData: TSrcData;",
     "    dstData?: TDstData;",
     "    offsetLeft: number;",
     "    offsetTop: number;",
     "    targetWidth: number;",
     "    targetHeight: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "dstData",
     "typeValue": {
      "raw": "undefined | TDstData"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "offsetLeft",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "offsetTop",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "srcData",
     "typeValue": {
      "raw": "TSrcData"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "targetHeight",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "targetWidth",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    }
   ]
  },
  "AnalyticsEvent": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "AnalyticsEvent",
    "nameFull": "AnalyticsEvent"
   },
   "typeValue": {
    "raw": "null | { [key: string]: any; name: string; }",
    "print": [
     "type AnalyticsEvent = {",
     "    name: string;",
     "    [key: string]: any;",
     "} | null;"
    ]
   }
  },
  "ApiCallErrorType": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ApiCallErrorType",
    "nameFull": "ApiCallErrorType"
   },
   "typeValue": {
    "raw": "'permissionDenied' | 'notFound' | 'serverError' | 'serviceUnavailable' | 'default'",
    "print": [
     "type ApiCallErrorType = 'permissionDenied' | 'notFound' | 'serverError' | 'serviceUnavailable' | 'default';"
    ]
   }
  },
  "ApiCallInfo": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ApiCallInfo",
    "nameFull": "ApiCallInfo"
   },
   "typeValue": {
    "raw": "ApiCallInfo",
    "print": [
     "interface ApiCallInfo {",
     "    url: string;",
     "    name: string;",
     "    method: string;",
     "    requestData: {};",
     "    options?: ApiCallOptions;",
     "    status: ApiCallStatus;",
     "    httpStatus?: number;",
     "    responseData?: {",
     "        errorMessage?: string;",
     "    };",
     "    errorStatus?: number;",
     "    startedAt?: Date;",
     "    finishedAt?: Date;",
     "    attemptsCount: number;",
     "    dismissError(): void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "attemptsCount",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "dismissError",
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "errorStatus",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "finishedAt",
     "typeValue": {
      "raw": "undefined | Date"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "httpStatus",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "method",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "options",
     "typeValue": {
      "raw": "undefined | ApiCallOptions"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "requestData",
     "typeValue": {
      "raw": "{}"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "responseData",
     "typeValue": {
      "raw": "undefined | { errorMessage?: string | undefined; }"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "startedAt",
     "typeValue": {
      "raw": "undefined | Date"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "status",
     "typeValue": {
      "raw": "'scheduled' | 'running' | 'error'"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "url",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    }
   ]
  },
  "ApiCallOptions": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ApiCallOptions",
    "nameFull": "ApiCallOptions"
   },
   "typeValue": {
    "raw": "ApiCallOptions",
    "print": [
     "interface ApiCallOptions {",
     "    fetchOptions?: RequestInit;",
     "    errorHandling?: 'manual' | 'page' | 'notification';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "errorHandling",
     "typeValue": {
      "raw": "undefined | 'manual' | 'page' | 'notification'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fetchOptions",
     "typeValue": {
      "raw": "undefined | RequestInit"
     },
     "required": false
    }
   ]
  },
  "ApiContextProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ApiContextProps",
    "nameFull": "ApiContextProps"
   },
   "typeValue": {
    "raw": "ApiContextProps",
    "print": [
     "interface ApiContextProps {",
     "    apiReloginPath?: string;",
     "    apiPingPath?: string;",
     "    apiServerUrl?: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "apiPingPath",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "apiReloginPath",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "apiServerUrl",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    }
   ]
  },
  "ApiExtensions": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ApiExtensions",
    "nameFull": "ApiExtensions<TApi>"
   },
   "typeValue": {
    "raw": "ApiExtensions<TApi>",
    "print": [
     "interface ApiExtensions<TApi> {",
     "    withOptions(options: ApiCallOptions): TApi;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "withOptions",
     "typeValue": {
      "raw": "(options: ApiCallOptions) => TApi"
     },
     "required": true
    }
   ]
  },
  "ApiRecoveryReason": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ApiRecoveryReason",
    "nameFull": "ApiRecoveryReason"
   },
   "typeValue": {
    "raw": "null | 'auth-lost' | 'connection-lost' | 'server-overload' | 'maintenance'",
    "print": [
     "type ApiRecoveryReason = 'auth-lost' | 'connection-lost' | 'server-overload' | 'maintenance' | null;"
    ]
   }
  },
  "ApiStatus": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ApiStatus",
    "nameFull": "ApiStatus"
   },
   "typeValue": {
    "raw": "'running' | 'error' | 'idle' | 'recovery'",
    "print": [
     "type ApiStatus = 'idle' | 'running' | 'error' | 'recovery';"
    ]
   }
  },
  "ApplyFilterOptions": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ApplyFilterOptions",
    "nameFull": "ApplyFilterOptions<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "ApplyFilterOptions<TItem, TId, TFilter>",
    "print": [
     "interface ApplyFilterOptions<TItem, TId, TFilter> {",
     "    filter: DataSourceState<TFilter, TId>['filter'];",
     "    getFilter?: (filter: TFilter) => (item: TItem) => boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "filter",
     "typeValue": {
      "raw": "undefined | TFilter"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getFilter",
     "typeValue": {
      "raw": "undefined | (filter: TFilter) => (item: TItem) => boolean"
     },
     "required": false
    }
   ]
  },
  "ApplySearchOptions": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ApplySearchOptions",
    "nameFull": "ApplySearchOptions<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "ApplySearchOptions<TItem, TId, TFilter>",
    "print": [
     "interface ApplySearchOptions<TItem, TId, TFilter> {",
     "    search: DataSourceState<TFilter, TId>['search'];",
     "    getSearchFields?: (item: TItem) => string[];",
     "    sortSearchByRelevance?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "getSearchFields",
     "typeValue": {
      "raw": "undefined | (item: TItem) => string[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sortSearchByRelevance",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    }
   ]
  },
  "ApplySortOptions": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ApplySortOptions",
    "nameFull": "ApplySortOptions<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "ApplySortOptions<TItem, TId, TFilter>",
    "print": [
     "interface ApplySortOptions<TItem, TId, TFilter> {",
     "    sorting: DataSourceState<TFilter, TId>['sorting'];",
     "    sortBy?(item: TItem, sorting: SortingOption): any;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "typeValue": {
      "raw": "undefined | (item: TItem, sorting: SortingOption<any>) => any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "typeValue": {
      "raw": "undefined | SortingOption<any>[]"
     },
     "required": false
    }
   ]
  },
  "ArrayDataSourceProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ArrayDataSourceProps",
    "nameFull": "ArrayDataSourceProps<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "ArrayDataSourceProps<TItem, TId, TFilter>",
    "print": [
     "interface ArrayDataSourceProps<TItem, TId, TFilter> extends ArrayListViewProps<TItem, TId, TFilter> {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "backgroundReload",
     "comment": [
      "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
      " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
      " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
      " It is required to add blockers/spinners to the components, built on your own.",
      " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'implicit' | 'explicit'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "complexIds",
     "comment": [
      "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
      " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getFilter",
     "typeValue": {
      "raw": "undefined | (filter: TFilter) => (item: TItem) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseArrayListViewProps",
       "nameFull": "BaseArrayListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "comment": [
      "Should return unique ID of the TItem",
      " If omitted, we assume that every TItem has and unique id in its 'id' field.",
      " @param item An item to get ID of"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => TId"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getParentId",
     "comment": [
      "Should return ID of the Item's parent. Usually it's i => i.parentId.",
      " If specified, Data Source will build items hierarchy.",
      "",
      " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
      " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
      "   to highlight parents with selected children",
      " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
      "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => TId | undefined"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getRowOptions",
     "comment": [
      "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
      " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
      " See DataRowOptions for more details.",
      " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "typeValue": {
      "raw": "undefined | (item: TItem) => string[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseArrayListViewProps",
       "nameFull": "BaseArrayListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "Can be specified to unfold all or some items at start.",
      " If not specified, all rows would be folded."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "typeValue": {
      "raw": "undefined | TItem[] | ITree<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ArrayListViewProps",
       "nameFull": "ArrayListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowOptions",
     "comment": [
      "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
      " See DataRowOptions for more details.",
      " If options depends on the item itself, use getRowOptions.",
      " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "typeValue": {
      "raw": "undefined | DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "comment": [
      "Enables or disables \"select all\" checkbox. Default is true."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "typeValue": {
      "raw": "undefined | (item: TItem, sorting: SortingOption<any>) => any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseArrayListViewProps",
       "nameFull": "BaseArrayListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sortSearchByRelevance",
     "comment": [
      "Enables sorting of search results by relevance.",
      " - The highest priority has records, which have a full match with a search keyword.",
      " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
      " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
      " - And the lowest one - any other match of the search keyword.",
      "",
      " Example:",
      " - `search`: 'some'",
      " - `record string`: 'some word', `rank` = 4",
      " - `record string`: 'someone', `rank` = 3",
      " - `record string`: 'I know some guy', `rank` = 2",
      " - `record string`: 'awesome', `rank` = 1",
      "",
      " @default true"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseArrayListViewProps",
       "nameFull": "BaseArrayListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    }
   ]
  },
  "ArrayElement": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ArrayElement",
    "nameFull": "ArrayElement<ArrayType>"
   },
   "typeValue": {
    "raw": "ArrayElement<ArrayType>",
    "print": [
     "type ArrayElement<ArrayType> = ArrayType extends (infer ElementType)[] ? ElementType : never;"
    ]
   }
  },
  "ArrayListViewProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ArrayListViewProps",
    "nameFull": "ArrayListViewProps<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "ArrayListViewProps<TItem, TId, TFilter>",
    "print": [
     "interface ArrayListViewProps<TItem, TId, TFilter> extends BaseArrayListViewProps<TItem, TId, TFilter> {",
     "    items?: TItem[] | ITree<TItem, TId>;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "backgroundReload",
     "comment": [
      "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
      " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
      " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
      " It is required to add blockers/spinners to the components, built on your own.",
      " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'implicit' | 'explicit'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "complexIds",
     "comment": [
      "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
      " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getFilter",
     "typeValue": {
      "raw": "undefined | (filter: TFilter) => (item: TItem) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseArrayListViewProps",
       "nameFull": "BaseArrayListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "comment": [
      "Should return unique ID of the TItem",
      " If omitted, we assume that every TItem has and unique id in its 'id' field.",
      " @param item An item to get ID of"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => TId"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getParentId",
     "comment": [
      "Should return ID of the Item's parent. Usually it's i => i.parentId.",
      " If specified, Data Source will build items hierarchy.",
      "",
      " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
      " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
      "   to highlight parents with selected children",
      " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
      "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => TId | undefined"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getRowOptions",
     "comment": [
      "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
      " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
      " See DataRowOptions for more details.",
      " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "typeValue": {
      "raw": "undefined | (item: TItem) => string[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseArrayListViewProps",
       "nameFull": "BaseArrayListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "Can be specified to unfold all or some items at start.",
      " If not specified, all rows would be folded."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "typeValue": {
      "raw": "undefined | TItem[] | ITree<TItem, TId>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowOptions",
     "comment": [
      "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
      " See DataRowOptions for more details.",
      " If options depends on the item itself, use getRowOptions.",
      " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "typeValue": {
      "raw": "undefined | DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "comment": [
      "Enables or disables \"select all\" checkbox. Default is true."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "typeValue": {
      "raw": "undefined | (item: TItem, sorting: SortingOption<any>) => any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseArrayListViewProps",
       "nameFull": "BaseArrayListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sortSearchByRelevance",
     "comment": [
      "Enables sorting of search results by relevance.",
      " - The highest priority has records, which have a full match with a search keyword.",
      " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
      " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
      " - And the lowest one - any other match of the search keyword.",
      "",
      " Example:",
      " - `search`: 'some'",
      " - `record string`: 'some word', `rank` = 4",
      " - `record string`: 'someone', `rank` = 3",
      " - `record string`: 'I know some guy', `rank` = 2",
      " - `record string`: 'awesome', `rank` = 1",
      "",
      " @default true"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseArrayListViewProps",
       "nameFull": "BaseArrayListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    }
   ]
  },
  "ArrayPickerProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ArrayPickerProps",
    "nameFull": "ArrayPickerProps<TId, TItem>"
   },
   "typeValue": {
    "raw": "{ selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> | { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]>",
    "print": [
     "type ArrayPickerProps<TId, TItem> = ({",
     "    selectionMode: 'multi';",
     "    valueType?: 'id';",
     "    emptyValue?: [",
     "    ] | null;",
     "} & IEditable<TId[]>) | ({",
     "    selectionMode: 'multi';",
     "    valueType: 'entity';",
     "    emptyValue?: [",
     "    ] | null;",
     "} & IEditable<TItem[]>);"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "emptyValue",
     "typeValue": {
      "raw": "undefined | null | []"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "typeValue": {
      "raw": "'multi'"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "valueType",
     "typeValue": {
      "raw": "undefined | 'id'"
     },
     "required": false
    }
   ]
  },
  "AsyncDataSourceProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "AsyncDataSourceProps",
    "nameFull": "AsyncDataSourceProps<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "AsyncDataSourceProps<TItem, TId, TFilter>",
    "print": [
     "interface AsyncDataSourceProps<TItem, TId, TFilter> extends AsyncListViewProps<TItem, TId, TFilter> {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "api",
     "typeValue": {
      "raw": "() => Promise<TItem[]>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "AsyncListViewProps",
       "nameFull": "AsyncListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "backgroundReload",
     "comment": [
      "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
      " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
      " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
      " It is required to add blockers/spinners to the components, built on your own.",
      " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'implicit' | 'explicit'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "complexIds",
     "comment": [
      "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
      " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getFilter",
     "typeValue": {
      "raw": "undefined | (filter: TFilter) => (item: TItem) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseArrayListViewProps",
       "nameFull": "BaseArrayListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "comment": [
      "Should return unique ID of the TItem",
      " If omitted, we assume that every TItem has and unique id in its 'id' field.",
      " @param item An item to get ID of"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => TId"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getParentId",
     "comment": [
      "Should return ID of the Item's parent. Usually it's i => i.parentId.",
      " If specified, Data Source will build items hierarchy.",
      "",
      " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
      " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
      "   to highlight parents with selected children",
      " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
      "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => TId | undefined"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getRowOptions",
     "comment": [
      "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
      " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
      " See DataRowOptions for more details.",
      " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "typeValue": {
      "raw": "undefined | (item: TItem) => string[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseArrayListViewProps",
       "nameFull": "BaseArrayListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "Can be specified to unfold all or some items at start.",
      " If not specified, all rows would be folded."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowOptions",
     "comment": [
      "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
      " See DataRowOptions for more details.",
      " If options depends on the item itself, use getRowOptions.",
      " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "typeValue": {
      "raw": "undefined | DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "comment": [
      "Enables or disables \"select all\" checkbox. Default is true."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "typeValue": {
      "raw": "undefined | (item: TItem, sorting: SortingOption<any>) => any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseArrayListViewProps",
       "nameFull": "BaseArrayListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sortSearchByRelevance",
     "comment": [
      "Enables sorting of search results by relevance.",
      " - The highest priority has records, which have a full match with a search keyword.",
      " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
      " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
      " - And the lowest one - any other match of the search keyword.",
      "",
      " Example:",
      " - `search`: 'some'",
      " - `record string`: 'some word', `rank` = 4",
      " - `record string`: 'someone', `rank` = 3",
      " - `record string`: 'I know some guy', `rank` = 2",
      " - `record string`: 'awesome', `rank` = 1",
      "",
      " @default true"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseArrayListViewProps",
       "nameFull": "BaseArrayListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    }
   ]
  },
  "AsyncListViewProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "AsyncListViewProps",
    "nameFull": "AsyncListViewProps<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "AsyncListViewProps<TItem, TId, TFilter>",
    "print": [
     "interface AsyncListViewProps<TItem, TId, TFilter> extends BaseArrayListViewProps<TItem, TId, TFilter> {",
     "    api(): Promise<TItem[]>;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "api",
     "typeValue": {
      "raw": "() => Promise<TItem[]>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "backgroundReload",
     "comment": [
      "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
      " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
      " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
      " It is required to add blockers/spinners to the components, built on your own.",
      " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'implicit' | 'explicit'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "complexIds",
     "comment": [
      "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
      " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getFilter",
     "typeValue": {
      "raw": "undefined | (filter: TFilter) => (item: TItem) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseArrayListViewProps",
       "nameFull": "BaseArrayListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "comment": [
      "Should return unique ID of the TItem",
      " If omitted, we assume that every TItem has and unique id in its 'id' field.",
      " @param item An item to get ID of"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => TId"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getParentId",
     "comment": [
      "Should return ID of the Item's parent. Usually it's i => i.parentId.",
      " If specified, Data Source will build items hierarchy.",
      "",
      " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
      " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
      "   to highlight parents with selected children",
      " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
      "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => TId | undefined"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getRowOptions",
     "comment": [
      "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
      " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
      " See DataRowOptions for more details.",
      " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "typeValue": {
      "raw": "undefined | (item: TItem) => string[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseArrayListViewProps",
       "nameFull": "BaseArrayListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "Can be specified to unfold all or some items at start.",
      " If not specified, all rows would be folded."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowOptions",
     "comment": [
      "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
      " See DataRowOptions for more details.",
      " If options depends on the item itself, use getRowOptions.",
      " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "typeValue": {
      "raw": "undefined | DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "comment": [
      "Enables or disables \"select all\" checkbox. Default is true."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "typeValue": {
      "raw": "undefined | (item: TItem, sorting: SortingOption<any>) => any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseArrayListViewProps",
       "nameFull": "BaseArrayListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sortSearchByRelevance",
     "comment": [
      "Enables sorting of search results by relevance.",
      " - The highest priority has records, which have a full match with a search keyword.",
      " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
      " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
      " - And the lowest one - any other match of the search keyword.",
      "",
      " Example:",
      " - `search`: 'some'",
      " - `record string`: 'some word', `rank` = 4",
      " - `record string`: 'someone', `rank` = 3",
      " - `record string`: 'I know some guy', `rank` = 2",
      " - `record string`: 'awesome', `rank` = 1",
      "",
      " @default true"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseArrayListViewProps",
       "nameFull": "BaseArrayListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    }
   ]
  },
  "BaseArrayListViewProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "BaseArrayListViewProps",
    "nameFull": "BaseArrayListViewProps<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "BaseArrayListViewProps<TItem, TId, TFilter>",
    "print": [
     "interface BaseArrayListViewProps<TItem, TId, TFilter> extends BaseListViewProps<TItem, TId, TFilter> {",
     "    getSearchFields?(item: TItem): string[];",
     "    sortBy?(item: TItem, sorting: SortingOption): any;",
     "    getFilter?(filter: TFilter): (item: TItem) => boolean;",
     "    /**",
     "     * Enables sorting of search results by relevance.",
     "     * - The highest priority has records, which have a full match with a search keyword.",
     "     * - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
     "     * - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
     "     * - And the lowest one - any other match of the search keyword.",
     "     *",
     "     * Example:",
     "     * - `search`: 'some'",
     "     * - `record string`: 'some word', `rank` = 4",
     "     * - `record string`: 'someone', `rank` = 3",
     "     * - `record string`: 'I know some guy', `rank` = 2",
     "     * - `record string`: 'awesome', `rank` = 1",
     "     *",
     "     * @default true",
     "     */",
     "    sortSearchByRelevance?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "backgroundReload",
     "comment": [
      "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
      " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
      " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
      " It is required to add blockers/spinners to the components, built on your own.",
      " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'implicit' | 'explicit'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "complexIds",
     "comment": [
      "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
      " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getFilter",
     "typeValue": {
      "raw": "undefined | (filter: TFilter) => (item: TItem) => boolean"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "comment": [
      "Should return unique ID of the TItem",
      " If omitted, we assume that every TItem has and unique id in its 'id' field.",
      " @param item An item to get ID of"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => TId"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getParentId",
     "comment": [
      "Should return ID of the Item's parent. Usually it's i => i.parentId.",
      " If specified, Data Source will build items hierarchy.",
      "",
      " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
      " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
      "   to highlight parents with selected children",
      " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
      "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => TId | undefined"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getRowOptions",
     "comment": [
      "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
      " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
      " See DataRowOptions for more details.",
      " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "typeValue": {
      "raw": "undefined | (item: TItem) => string[]"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "Can be specified to unfold all or some items at start.",
      " If not specified, all rows would be folded."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowOptions",
     "comment": [
      "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
      " See DataRowOptions for more details.",
      " If options depends on the item itself, use getRowOptions.",
      " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "typeValue": {
      "raw": "undefined | DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "comment": [
      "Enables or disables \"select all\" checkbox. Default is true."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "typeValue": {
      "raw": "undefined | (item: TItem, sorting: SortingOption<any>) => any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sortSearchByRelevance",
     "comment": [
      "Enables sorting of search results by relevance.",
      " - The highest priority has records, which have a full match with a search keyword.",
      " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
      " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
      " - And the lowest one - any other match of the search keyword.",
      "",
      " Example:",
      " - `search`: 'some'",
      " - `record string`: 'some word', `rank` = 4",
      " - `record string`: 'someone', `rank` = 3",
      " - `record string`: 'I know some guy', `rank` = 2",
      " - `record string`: 'awesome', `rank` = 1",
      "",
      " @default true"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    }
   ]
  },
  "BaseDatePickerProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "BaseDatePickerProps",
    "nameFull": "BaseDatePickerProps"
   },
   "typeValue": {
    "raw": "BaseDatePickerProps",
    "print": [
     "interface BaseDatePickerProps extends IEditable<string | null>, ICanFocus<HTMLInputElement>, IDisableable, IHasPlaceholder, ICanBeReadonly, IAnalyticableOnChange<string> {",
     "    /** Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format) */",
     "    format?: string;",
     "    /** Filter selectable days. Days, for which this callback returns false - will be disabled */",
     "    filter?(day: Dayjs): boolean;",
     "    /** Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach DatePicker to other components, e.g. Buttons */",
     "    renderTarget?(props: IDropdownToggler): ReactNode;",
     "    iconPosition?: 'left' | 'right';",
     "    /** Disable clearing date value (e.g. via cross icon) */",
     "    disableClear?: boolean;",
     "    /** Overrides rendering of the single day. For example, to highlight certain days */",
     "    renderDay?: (day: Dayjs, onDayClick: (day: Dayjs) => void) => ReactElement<Element>;",
     "    /** If this function returns true, the day will be highlighted as holiday */",
     "    isHoliday?: (day: Dayjs) => boolean;",
     "    onBlur?: (e?: React.FocusEvent<HTMLInputElement>) => void;",
     "    /** Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/) */",
     "    placement?: Placement;",
     "    /** Attributes for HTML Element */",
     "    rawProps?: {",
     "        input?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
     "        body?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
     "    };",
     "    /** Styles for input and body components in DatePicker */",
     "    inputCx?: CX;",
     "    bodyCx?: CX;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bodyCx",
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disableClear",
     "comment": [
      "Disable clearing date value (e.g. via cross icon)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "comment": [
      "Filter selectable days. Days, for which this callback returns false - will be disabled"
     ],
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "format",
     "comment": [
      "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "Styles for input and body components in DatePicker"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "comment": [
      "If this function returns true, the day will be highlighted as holiday"
     ],
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "typeValue": {
      "raw": "undefined | (e?: React.FocusEvent<HTMLInputElement, Element> | undefined) => void"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Attributes for HTML Element"
     ],
     "typeValue": {
      "raw": "undefined | { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "comment": [
      "Overrides rendering of the single day. For example, to highlight certain days"
     ],
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderTarget",
     "comment": [
      "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach DatePicker to other components, e.g. Buttons"
     ],
     "typeValue": {
      "raw": "undefined | (props: IDropdownToggler) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "BaseListViewProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "BaseListViewProps",
    "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "BaseListViewProps<TItem, TId, TFilter>",
    "print": [
     "// eslint-disable-next-line @typescript-eslint/no-unused-vars",
     "interface BaseListViewProps<TItem, TId, TFilter> {",
     "    /**",
     "     * Should return unique ID of the TItem",
     "     * If omitted, we assume that every TItem has and unique id in its 'id' field.",
     "     * @param item An item to get ID of",
     "     */",
     "    getId?(item: TItem): TId;",
     "    /**",
     "     * Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
     "     * In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys.",
     "     */",
     "    complexIds?: boolean;",
     "    /** Should return ID of the Item's parent. Usually it's i => i.parentId.",
     "     * If specified, Data Source will build items hierarchy.",
     "     *",
     "     * Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
     "     * - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
     "     *   to highlight parents with selected children",
     "     * - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
     "     *   We need to load parents with a separate call (if backend doesn't pre-fetch them)",
     "     */",
     "    getParentId?(item: TItem): TId | undefined;",
     "    /**",
     "     * Specifies if rows are selectable, checkable, draggable, clickable, and more.",
     "     * See DataRowOptions for more details.",
     "     * If options depends on the item itself, use getRowOptions.",
     "     * Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
     "     * Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
     "     * @param item An item to get options for",
     "     */",
     "    rowOptions?: DataRowOptions<TItem, TId>;",
     "    /**",
     "     * For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
     "     * To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
     "     * See DataRowOptions for more details.",
     "     * If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
     "     * Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
     "     * @param item An item to get options for",
     "     */",
     "    getRowOptions?(item: TItem, index: number): DataRowOptions<TItem, TId>;",
     "    /**",
     "     * Can be specified to unfold all or some items at start.",
     "     * If not specified, all rows would be folded.",
     "     */",
     "    isFoldedByDefault?(item: TItem): boolean;",
     "    /**",
     "     * Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
     "     * - false: All nodes are selected independently (default).",
     "     * - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
     "     * - 'implicit': Selecting a parent node means that all children are considered checked.",
     "     *   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
     "     *   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
     "     *   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
     "     *   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked.",
     "     */",
     "    cascadeSelection?: CascadeSelection;",
     "    /**",
     "     * Enables or disables \"select all\" checkbox. Default is true.",
     "     */",
     "    selectAll?: true | false;",
     "    /**",
     "     * Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
     "     * During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
     "     * In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
     "     * It is required to add blockers/spinners to the components, built on your own.",
     "     * If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`.",
     "     */",
     "    backgroundReload?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "backgroundReload",
     "comment": [
      "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
      " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
      " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
      " It is required to add blockers/spinners to the components, built on your own.",
      " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'implicit' | 'explicit'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "complexIds",
     "comment": [
      "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
      " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "comment": [
      "Should return unique ID of the TItem",
      " If omitted, we assume that every TItem has and unique id in its 'id' field.",
      " @param item An item to get ID of"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => TId"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getParentId",
     "comment": [
      "Should return ID of the Item's parent. Usually it's i => i.parentId.",
      " If specified, Data Source will build items hierarchy.",
      "",
      " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
      " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
      "   to highlight parents with selected children",
      " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
      "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => TId | undefined"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getRowOptions",
     "comment": [
      "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
      " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
      " See DataRowOptions for more details.",
      " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "Can be specified to unfold all or some items at start.",
      " If not specified, all rows would be folded."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => boolean"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowOptions",
     "comment": [
      "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
      " See DataRowOptions for more details.",
      " If options depends on the item itself, use getRowOptions.",
      " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "typeValue": {
      "raw": "undefined | DataRowOptions<TItem, TId>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "comment": [
      "Enables or disables \"select all\" checkbox. Default is true."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    }
   ]
  },
  "BaseRangeDatePickerProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "BaseRangeDatePickerProps",
    "nameFull": "BaseRangeDatePickerProps"
   },
   "typeValue": {
    "raw": "BaseRangeDatePickerProps",
    "print": [
     "interface BaseRangeDatePickerProps extends IEditable<RangeDatePickerValue>, IDisableable, ICanBeReadonly, IAnalyticableOnChange<RangeDatePickerValue> {",
     "    /** Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format) */",
     "    format?: string;",
     "    /** Filter selectable days. Days, for which this callback returns false - will be disabled */",
     "    filter?(day: Dayjs): boolean;",
     "    /** Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach RangeDatePicker to other components, e.g. Buttons */",
     "    renderTarget?(props: IDropdownToggler): ReactNode;",
     "    /** Allows to add a custom footer to the Picker's dropdown body */",
     "    renderFooter?(value: RangeDatePickerValue): ReactNode;",
     "    /** Overrides rendering of the single day. For example, to highlight certain days */",
     "    renderDay?: (day: Dayjs, onDayClick: (day: Dayjs) => void) => ReactElement<Element>;",
     "    /**",
     "     * Range presets (like 'this week', 'this month', etc.) to display at the right of the Picker's body.",
     "     * UUI provides defaults in the 'rangeDatePickerPresets' exported variable - you can use it as is, or build on top of it (e.g. add your presets)",
     "     */",
     "    presets?: RangeDatePickerPresets;",
     "    /** Disables clearing component (with the cross icon) */",
     "    disableClear?: boolean;",
     "    /** Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/) */",
     "    placement?: Placement;",
     "    /** If this function returns true, the day will be highlighted as holiday */",
     "    isHoliday?: (day: Dayjs) => boolean;",
     "    /** Called when component gets input focus */",
     "    onFocus?: (e: React.FocusEvent<HTMLInputElement>, inputType: 'from' | 'to') => void;",
     "    /** Called when component looses input focus */",
     "    onBlur?: (e: React.FocusEvent<HTMLInputElement>, inputType: 'from' | 'to') => void;",
     "    /** Called when component is opened/closed */",
     "    onOpenChange?: (isOpen: boolean) => void;",
     "    /** rawProps as HTML attributes */",
     "    rawProps?: {",
     "        from?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
     "        to?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
     "        body?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
     "    };",
     "    /** Styles for input and body components in RangeDatePicker */",
     "    inputCx?: CX;",
     "    bodyCx?: CX;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bodyCx",
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disableClear",
     "comment": [
      "Disables clearing component (with the cross icon)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "comment": [
      "Filter selectable days. Days, for which this callback returns false - will be disabled"
     ],
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "format",
     "comment": [
      "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "Styles for input and body components in RangeDatePicker"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "comment": [
      "If this function returns true, the day will be highlighted as holiday"
     ],
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<HTMLInputElement, Element>, inputType: 'from' | 'to') => void"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<HTMLInputElement, Element>, inputType: 'from' | 'to') => void"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onOpenChange",
     "comment": [
      "Called when component is opened/closed"
     ],
     "typeValue": {
      "raw": "undefined | (isOpen: boolean) => void"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "comment": [
      "Range presets (like 'this week', 'this month', etc.) to display at the right of the Picker's body.",
      " UUI provides defaults in the 'rangeDatePickerPresets' exported variable - you can use it as is, or build on top of it (e.g. add your presets)"
     ],
     "typeValue": {
      "raw": "undefined | RangeDatePickerPresets"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "rawProps as HTML attributes"
     ],
     "typeValue": {
      "raw": "undefined | { from?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; to?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "comment": [
      "Overrides rendering of the single day. For example, to highlight certain days"
     ],
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderFooter",
     "comment": [
      "Allows to add a custom footer to the Picker's dropdown body"
     ],
     "typeValue": {
      "raw": "undefined | (value: RangeDatePickerValue) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderTarget",
     "comment": [
      "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach RangeDatePicker to other components, e.g. Buttons"
     ],
     "typeValue": {
      "raw": "undefined | (props: IDropdownToggler) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "BatchPromiseOptions": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "BatchPromiseOptions",
    "nameFull": "BatchPromiseOptions"
   },
   "typeValue": {
    "raw": "BatchPromiseOptions",
    "print": [
     "interface BatchPromiseOptions {",
     "    /** Minimum time (in ms) to pass after the last call, before triggering the batch */",
     "    throttleMs?: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "throttleMs",
     "comment": [
      "Minimum time (in ms) to pass after the last call, before triggering the batch"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    }
   ]
  },
  "BlockTypes": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "BlockTypes",
    "nameFull": "BlockTypes"
   },
   "typeValue": {
    "raw": "'attachment' | 'iframe' | 'image'",
    "print": [
     "type BlockTypes = 'attachment' | 'iframe' | 'image';"
    ]
   }
  },
  "ButtonBaseCoreProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ButtonBaseCoreProps",
    "nameFull": "ButtonBaseCoreProps"
   },
   "typeValue": {
    "raw": "ButtonBaseCoreProps",
    "print": [
     "interface ButtonBaseCoreProps extends IHasCX, IClickable, ICanRedirect, IDisableable, IHasIcon, IAnalyticableClick, IHasTabIndex, IHasRawProps<React.ButtonHTMLAttributes<HTMLButtonElement>> {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    }
   ]
  },
  "ButtonCoreProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ButtonCoreProps",
    "nameFull": "ButtonCoreProps"
   },
   "typeValue": {
    "raw": "ButtonCoreProps",
    "print": [
     "interface ButtonCoreProps extends ButtonBaseCoreProps, IHasCaption, IBasicPickerToggler, IDropdownToggler, IHasPlaceholder {",
     "    /** Icon for drop-down toggler */",
     "    dropdownIcon?: Icon;",
     "    /** Position of the dropdown icon ('left' of 'right') */",
     "    dropdownIconPosition?: 'left' | 'right';",
     "    countPosition?: 'left' | 'right';",
     "    count?: number | null;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "typeValue": {
      "raw": "undefined | null | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBasicPickerToggler",
       "nameFull": "IBasicPickerToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    }
   ]
  },
  "ButtonSemanticProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ButtonSemanticProps",
    "nameFull": "ButtonSemanticProps"
   },
   "typeValue": {
    "raw": "ButtonSemanticProps",
    "print": [
     "interface ButtonSemanticProps {",
     "    type?: 'success' | 'cancel' | 'action';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "type",
     "typeValue": {
      "raw": "undefined | 'success' | 'cancel' | 'action'"
     },
     "required": false
    }
   ]
  },
  "CascadeSelection": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "CascadeSelection",
    "nameFull": "CascadeSelection"
   },
   "typeValue": {
    "raw": "false | true | 'implicit' | 'explicit'",
    "print": [
     "type CascadeSelection = boolean | typeof CascadeSelectionTypes.EXPLICIT | typeof CascadeSelectionTypes.IMPLICIT;"
    ]
   }
  },
  "CheckboxCoreProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "CheckboxCoreProps",
    "nameFull": "CheckboxCoreProps"
   },
   "typeValue": {
    "raw": "CheckboxCoreProps",
    "print": [
     "interface CheckboxCoreProps extends ICheckable, ICanFocus<HTMLInputElement>, IHasCX, ICanBeInvalid, IHasLabel, ICanBeReadonly, IAnalyticableOnChange<boolean>, IHasRawProps<React.LabelHTMLAttributes<HTMLLabelElement>>, IHasForwardedRef<HTMLLabelElement> {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "indeterminate",
     "comment": [
      "Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICheckable",
       "nameFull": "ICheckable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasLabel",
       "nameFull": "IHasLabel"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "ClassValue": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ClassValue",
    "nameFull": "ClassValue"
   },
   "typeValue": {
    "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
    "print": [
     "/* The ClassValue type is a union type that represents the valid values that can be passed as arguments to the classnames function. It can be one of the following types:",
     "- string: A string representing a class name.",
     "- number: A number representing a class name. This is useful when using CSS modules.",
     "- ClassDictionary: An object whose keys are class names and values are booleans. If the value is true, the corresponding class name will be included in the resulting string, otherwise it will be omitted.",
     "- ClassArray: An array of values of type ClassValue. This allows you to pass multiple class names or class dictionaries as arguments to classnames.",
     "- undefined: If undefined is passed as an argument, it will be ignored.",
     "- null: If null is passed as an argument, it will be ignored.",
     "- boolean: If a boolean value is passed as an argument, it will be ignored if it is false and included if it is true. */",
     "type ClassValue = string | number | ClassDictionary | ClassArray | undefined | null | boolean;"
    ]
   }
  },
  "ColumnsConfig": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ColumnsConfig",
    "nameFull": "ColumnsConfig"
   },
   "typeValue": {
    "raw": "ColumnsConfig",
    "print": [
     "type ColumnsConfig = {",
     "    [key: string]: IColumnConfig;",
     "};"
    ]
   }
  },
  "CommonContexts": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "CommonContexts",
    "nameFull": "CommonContexts<TApi, TAppContext>"
   },
   "typeValue": {
    "raw": "CommonContexts<TApi, TAppContext>",
    "print": [
     "interface CommonContexts<TApi, TAppContext> extends UuiContexts {",
     "    api: TApi & ApiExtensions<TApi>;",
     "    uuiApp: TAppContext;",
     "    history?: IHistory4;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "api",
     "typeValue": {
      "raw": "TApi & ApiExtensions<TApi>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "history",
     "typeValue": {
      "raw": "undefined | IHistory4"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiAnalytics",
     "typeValue": {
      "raw": "IAnalyticsContext"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UuiContexts",
       "nameFull": "UuiContexts"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiApi",
     "typeValue": {
      "raw": "IApiContext"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UuiContexts",
       "nameFull": "UuiContexts"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiApp",
     "typeValue": {
      "raw": "TAppContext"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiDnD",
     "typeValue": {
      "raw": "IDndContext"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UuiContexts",
       "nameFull": "UuiContexts"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiErrors",
     "typeValue": {
      "raw": "IErrorContext"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UuiContexts",
       "nameFull": "UuiContexts"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiLayout",
     "typeValue": {
      "raw": "ILayoutContext"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UuiContexts",
       "nameFull": "UuiContexts"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiLocks",
     "typeValue": {
      "raw": "ILockContext"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UuiContexts",
       "nameFull": "UuiContexts"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiModals",
     "typeValue": {
      "raw": "IModalContext"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UuiContexts",
       "nameFull": "UuiContexts"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiNotifications",
     "typeValue": {
      "raw": "INotificationContext"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UuiContexts",
       "nameFull": "UuiContexts"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiRouter",
     "typeValue": {
      "raw": "IRouterContext"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UuiContexts",
       "nameFull": "UuiContexts"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiSkin",
     "typeValue": {
      "raw": "SkinContext"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UuiContexts",
       "nameFull": "UuiContexts"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiUserSettings",
     "typeValue": {
      "raw": "IUserSettingsContext"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UuiContexts",
       "nameFull": "UuiContexts"
      }
     },
     "required": true
    }
   ]
  },
  "ContextProviderProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ContextProviderProps",
    "nameFull": "ContextProviderProps<TApi, TAppContext>"
   },
   "typeValue": {
    "raw": "ContextProviderProps<TApi, TAppContext>",
    "print": [
     "interface ContextProviderProps<TApi, TAppContext> extends UuiServicesProps<TApi>, IHasChildren {",
     "    loadAppContext?: (api: TApi) => Promise<TAppContext>;",
     "    onInitCompleted(svc: CommonContexts<TApi, TAppContext>): void;",
     "    history?: IHistory4;",
     "    gaCode?: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "apiDefinition",
     "typeValue": {
      "raw": "undefined | (processRequest: IProcessRequest) => TApi"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UuiServicesProps",
       "nameFull": "UuiServicesProps<TApi>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "apiPingPath",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ApiContextProps",
       "nameFull": "ApiContextProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "apiReloginPath",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ApiContextProps",
       "nameFull": "ApiContextProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "apiServerUrl",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ApiContextProps",
       "nameFull": "ApiContextProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "gaCode",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "history",
     "typeValue": {
      "raw": "undefined | IHistory4"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "loadAppContext",
     "typeValue": {
      "raw": "undefined | (api: TApi) => Promise<TAppContext>"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onInitCompleted",
     "typeValue": {
      "raw": "(svc: CommonContexts<TApi, TAppContext>) => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "skinContext",
     "typeValue": {
      "raw": "undefined | ISkin"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UuiServicesProps",
       "nameFull": "UuiServicesProps<TApi>"
      }
     },
     "required": false
    }
   ]
  },
  "CX": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "CX",
    "nameFull": "CX"
   },
   "typeValue": {
    "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
    "print": [
     "// CX type is a union type that represents the valid values to pass CSS classes",
     "type CX = ClassValue;"
    ]
   }
  },
  "DataColumnProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataColumnProps",
    "nameFull": "DataColumnProps<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "DataColumnProps<TItem, TId, TFilter>",
    "print": [
     "interface DataColumnProps<TItem = any, TId = any, TFilter = any> extends ICanBeFixed, IHasCX, IClickable, IHasRawProps<HTMLDivElement>, Attributes {",
     "    /**",
     "     * Unique key to identify the column. Used to reference columns, e.g. in ColumnsConfig.",
     "     * Also, used as React key for cells, header cells, and other components inside tables.",
     "     */",
     "    key: string;",
     "    /** Column caption. Can be a plain text, or any React Component */",
     "    caption?: React.ReactNode;",
     "    /**",
     "     * The width of the column. Usually, columns has exact this width.",
     "     * When all columns fit, and there's spare horizontal space, you can use 'grow' prop to use this space for certain columns.",
     "     * DataTable's columns can't shrink below width - table will add horizontal scrolling instead of shrinking columns",
     "     */",
     "    width: number;",
     "    /** Minimal width to which column can be resized manually */",
     "    minWidth?: number;",
     "    /** The flex grow for the column. Allows column to grow in width if there's spare horizontal space */",
     "    grow?: number;",
     "    /** Aligns cell content horizontally */",
     "    textAlign?: 'left' | 'center' | 'right';",
     "    justifyContent?: CSS.JustifyContentProperty;",
     "    /** Align cell content vertically */",
     "    alignSelf?: CSS.AlignSelfProperty;",
     "    /**",
     "     * Enables sorting arrows on the column.",
     "     * Sorting state is kept in DataSourceState.sorting",
     "     */",
     "    isSortable?: boolean;",
     "    /** Disallows to hide column via ColumnsConfiguration */",
     "    isAlwaysVisible?: boolean;",
     "    /** Makes column hidden by default. User can turn it on later, via ColumnsConfiguration */",
     "    isHiddenByDefault?: boolean;",
     "    /** Info tooltip displayed in the table header */",
     "    info?: React.ReactNode;",
     "    /**",
     "     *  Should return true, if current filter affects the column.",
     "     * Usually, this prop is filled automatically by the useTableState hook.",
     "     * If you use the useTableState hook, you don't need to specify it manually.",
     "     */",
     "    isFilterActive?: (filter: TFilter, column: DataColumnProps<TItem, TId, TFilter>) => boolean;",
     "    canCopy?: (cell: DataTableSelectedCellData<TItem, TId, TFilter>) => boolean;",
     "    canAcceptCopy?: (from: DataTableSelectedCellData<TItem, TId, TFilter>, to: DataTableSelectedCellData<TItem, TId, TFilter>) => boolean;",
     "    /** Render the cell content. The item props is the value of the whole row (TItem). */",
     "    render?(item: TItem, props: DataRowProps<TItem, TId>): any;",
     "    /** Overrides rendering of the whole cell */",
     "    renderCell?(cellProps: RenderCellProps<TItem, TId>): any;",
     "    /**",
     "     * Renders column header dropdown.",
     "     * Usually, this prop is filled automatically by the useTableState hook.",
     "     * If you use the useTableState hook, you don't need to specify it manually.",
     "     */",
     "    renderDropdown?(): React.ReactNode;",
     "    /**",
     "     * Renders column filter.",
     "     * If you use useTableState hook, and you specify filter for the column, default filter will be rendered automatically.",
     "     * You can use this prop to render a custom filter component.",
     "     */",
     "    renderFilter?(lens: ILens<TFilter>, dropdownProps: IDropdownBodyProps): React.ReactNode;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignSelf",
     "comment": [
      "Align cell content vertically"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "canAcceptCopy",
     "typeValue": {
      "raw": "undefined | (from: DataTableSelectedCellData<TItem, TId, TFilter>) => boolean"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "canCopy",
     "typeValue": {
      "raw": "undefined | (cell: DataTableSelectedCellData<TItem, TId, TFilter>) => boolean"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Column caption. Can be a plain text, or any React Component"
     ],
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fix",
     "comment": [
      "If specified, will make column fixed - it would not scroll horizontally"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeFixed",
       "nameFull": "ICanBeFixed"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "grow",
     "comment": [
      "The flex grow for the column. Allows column to grow in width if there's spare horizontal space"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "info",
     "comment": [
      "Info tooltip displayed in the table header"
     ],
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isAlwaysVisible",
     "comment": [
      "Disallows to hide column via ColumnsConfiguration"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFilterActive",
     "comment": [
      "Should return true, if current filter affects the column.",
      " Usually, this prop is filled automatically by the useTableState hook.",
      " If you use the useTableState hook, you don't need to specify it manually."
     ],
     "typeValue": {
      "raw": "undefined | (filter: TFilter, column: DataColumnProps<TItem, TId, TFilter>) => boolean"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isHiddenByDefault",
     "comment": [
      "Makes column hidden by default. User can turn it on later, via ColumnsConfiguration"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isSortable",
     "comment": [
      "Enables sorting arrows on the column.",
      " Sorting state is kept in DataSourceState.sorting"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "justifyContent",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "comment": [
      "Unique key to identify the column. Used to reference columns, e.g. in ColumnsConfig.",
      " Also, used as React key for cells, header cells, and other components inside tables."
     ],
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "minWidth",
     "comment": [
      "Minimal width to which column can be resized manually"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "render",
     "comment": [
      "Render the cell content. The item props is the value of the whole row (TItem)."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, props: DataRowProps<TItem, TId>) => any"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderCell",
     "comment": [
      "Overrides rendering of the whole cell"
     ],
     "typeValue": {
      "raw": "undefined | (cellProps: RenderCellProps<TItem, TId>) => any"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderDropdown",
     "comment": [
      "Renders column header dropdown.",
      " Usually, this prop is filled automatically by the useTableState hook.",
      " If you use the useTableState hook, you don't need to specify it manually."
     ],
     "typeValue": {
      "raw": "undefined | () => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderFilter",
     "comment": [
      "Renders column filter.",
      " If you use useTableState hook, and you specify filter for the column, default filter will be rendered automatically.",
      " You can use this prop to render a custom filter component."
     ],
     "typeValue": {
      "raw": "undefined | (lens: IDropdownBodyProps) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "textAlign",
     "comment": [
      "Aligns cell content horizontally"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'center'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "comment": [
      "The width of the column. Usually, columns has exact this width.",
      " When all columns fit, and there's spare horizontal space, you can use 'grow' prop to use this space for certain columns.",
      " DataTable's columns can't shrink below width - table will add horizontal scrolling instead of shrinking columns"
     ],
     "typeValue": {
      "raw": "number"
     },
     "required": true
    }
   ]
  },
  "DataQuery": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataQuery",
    "nameFull": "DataQuery<T>"
   },
   "typeValue": {
    "raw": "DataQuery<T>",
    "print": [
     "interface DataQuery<T> {",
     "    filter?: DataQueryFilter<T>;",
     "    sorting?: SortingOption<T>[];",
     "    range?: DataQueryRange;",
     "    search?: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "filter",
     "typeValue": {
      "raw": "undefined | DataQueryFilter<T>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "range",
     "typeValue": {
      "raw": "undefined | DataQueryRange"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "typeValue": {
      "raw": "undefined | SortingOption<T>[]"
     },
     "required": false
    }
   ]
  },
  "DataQueryFilter": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "DataQueryFilter",
    "nameFull": "DataQueryFilter<T>"
   },
   "typeValue": {
    "raw": "DataQueryFilter<T>",
    "print": [
     "type DataQueryFilter<T> = {",
     "    [TPropName in keyof T]?: DataQueryFilterCondition<T[TPropName]>;",
     "};"
    ]
   }
  },
  "DataQueryFilterCondition": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "DataQueryFilterCondition",
    "nameFull": "DataQueryFilterCondition<TField>"
   },
   "typeValue": {
    "raw": "TField | FilterPredicate<TField>",
    "print": [
     "type DataQueryFilterCondition<TField> = TField | FilterPredicate<TField>;"
    ]
   }
  },
  "DataQueryRange": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataQueryRange",
    "nameFull": "DataQueryRange"
   },
   "typeValue": {
    "raw": "DataQueryRange",
    "print": [
     "interface DataQueryRange {",
     "    from: number;",
     "    count?: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "count",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "from",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    }
   ]
  },
  "DataRowOptions": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataRowOptions",
    "nameFull": "DataRowOptions<TItem, TId>"
   },
   "typeValue": {
    "raw": "DataRowOptions<TItem, TId>",
    "print": [
     "/** A part of the DataRowProps, which can be configured for each data row via getRowOptions callback.",
     " * Other props in DataRowProps are computed when generating rows.",
     " */",
     "interface DataRowOptions<TItem, TId> extends IDisableable, Partial<IEditable<TItem>> {",
     "    /** If row needs a checkbox, this field should be specified and it props can be configured here */",
     "    checkbox?: {",
     "        isVisible: boolean;",
     "    } & IDisableable & ICanBeInvalid;",
     "    /** True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop) */",
     "    isSelectable?: boolean;",
     "    /** Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc. */",
     "    dnd?: IDndActor<any, any>;",
     "    /** Row click handler */",
     "    onClick?(rowProps: DataRowProps<TItem, TId>): void;",
     "    /** Can be specified to make row act as a link (plain or SPA) */",
     "    link?: Link;",
     "    pin?(rowProps: DataRowProps<TItem, TId>): boolean;",
     "}"
    ]
   },
   "comment": [
    "A part of the DataRowProps, which can be configured for each data row via getRowOptions callback.",
    " Other props in DataRowProps are computed when generating rows."
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "checkbox",
     "comment": [
      "If row needs a checkbox, this field should be specified and it props can be configured here"
     ],
     "typeValue": {
      "raw": "undefined | { isVisible: boolean; } & ICanBeInvalid"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dnd",
     "comment": [
      "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
     ],
     "typeValue": {
      "raw": "undefined | IDndActor<any, any>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isSelectable",
     "comment": [
      "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Can be specified to make row act as a link (plain or SPA)"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Row click handler"
     ],
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => void"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "pin",
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => boolean"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "DataRowPathItem": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataRowPathItem",
    "nameFull": "DataRowPathItem<TId, TItem>"
   },
   "typeValue": {
    "raw": "DataRowPathItem<TId, TItem>",
    "print": [
     "/** Holds parent info for data rows */",
     "interface DataRowPathItem<TId, TItem> {",
     "    id: TId;",
     "    value: TItem;",
     "    isLastChild: boolean;",
     "}"
    ]
   },
   "comment": [
    "Holds parent info for data rows"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "TId"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLastChild",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "typeValue": {
      "raw": "TItem"
     },
     "required": true
    }
   ]
  },
  "DataRowProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "DataRowProps",
    "nameFull": "DataRowProps<TItem, TId>"
   },
   "typeValue": {
    "raw": "DataRowProps<TItem, TId>",
    "print": [
     "/** DataRowProps is a base shape of props, passed to items in various lists or trees.",
     " *",
     " * Despite 'Row' in it's name, it doesn't directly connected to a table.",
     " * We use DataRowProps as a base for DataTableRowProps and DataPickerRowProps.",
     " * But it can also be used for any user-built list, tree, custom picker rows, or even a grid of cards.",
     " *",
     " * Array of DataRowProps describes a part of hierarchical list, while still being a flat array (not a tree of some kind).",
     " * We use depth, indent, path, and other props to show row's place in the hierarchy.",
     " * This is very handy to handle rendering, especially in virtual scrolling scenarios.",
     " *",
     " * DataSources primary job is to convert various data stores into arrays of DataRowProps.",
     " */",
     "type DataRowProps<TItem, TId> = FlexRowProps & DataRowOptions<TItem, TId> & {",
     "    /** ID of the TItem rows displays */",
     "    id: TId;",
     "    /** Key to be used as component's key when rendering. Usually, it's stringified ID */",
     "    rowKey: string;",
     "    /** Index of the row, from the top of the list. This doesn't account any hierarchy. */",
     "    index: number;",
     "    /** The data item (TItem) row displays. Will be undefined if isLoading = true. */",
     "    value: TItem | undefined;",
     "    /** ID of the parent TItem */",
     "    parentId?: TId;",
     "    /** Hierarchical path from the root node to the item (excluding the item itself) */",
     "    path?: DataRowPathItem<TId, TItem>[];",
     "    /* visual */",
     "    /** Depth of the row in tree, 0 for the top-level */",
     "    depth?: number;",
     "    /** Indent of the item, to show hierarchy.",
     "         *  Unlike depth, it contains additional logic, to not add unnecessary indents:",
     "         *  if all children of node has no children, all nodes would get the same indent as parent.",
     "         */",
     "    indent?: number;",
     "    /** True if row is in loading state. 'value' is empty in this case */",
     "    isLoading?: boolean;",
     "    isUnknown?: boolean;",
     "    /** True if row be folded or unfolded (usually because it contains children) */",
     "    isFoldable?: boolean;",
     "    /** True if row is currently folded */",
     "    isFolded?: boolean;",
     "    /** True if row is checked with checkbox */",
     "    isChecked?: boolean;",
     "    /** True if row has checkbox and can be checkable */",
     "    isCheckable?: boolean;",
     "    /** True if some of row's children are checked.",
     "         * Used to show 'indefinite' checkbox state, to show user that something inside is checked */",
     "    isChildrenChecked?: boolean;",
     "    /** True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes) */",
     "    isSelected?: boolean;",
     "    /** True if any of row's children is selected. */",
     "    isChildrenSelected?: boolean;",
     "    /** True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row */",
     "    isFocused?: boolean;",
     "    /** True if row is the last child of his parent */",
     "    isLastChild?: boolean;",
     "    /* events */",
     "    /** Handles row folding change.",
     "         * We demand to pass the row as well, to avoid creating closures for each row.",
     "         */",
     "    onFold?(rowProps: DataRowProps<TItem, TId>): void;",
     "    /** Handles row click.",
     "         * We demand to pass the row as well, to avoid creating closures for each row.",
     "         */",
     "    onClick?(rowProps: DataRowProps<TItem, TId>): void;",
     "    /** Handles row checkbox change.",
     "         * We demand to pass the row as well, to avoid creating closures for each row.",
     "         */",
     "    onCheck?(rowProps: DataRowProps<TItem, TId>): void;",
     "    /** Handles row selection.",
     "         * We demand to pass the row as well, to avoid creating closures for each row.",
     "         */",
     "    onSelect?(rowProps: DataRowProps<TItem, TId>): void;",
     "    /** Handles row focusing.",
     "         */",
     "    onFocus?(focusedIndex: number): void;",
     "    isPinned?: boolean;",
     "};"
    ]
   },
   "comment": [
    "DataRowProps is a base shape of props, passed to items in various lists or trees.",
    "",
    " Despite 'Row' in it's name, it doesn't directly connected to a table.",
    " We use DataRowProps as a base for DataTableRowProps and DataPickerRowProps.",
    " But it can also be used for any user-built list, tree, custom picker rows, or even a grid of cards.",
    "",
    " Array of DataRowProps describes a part of hierarchical list, while still being a flat array (not a tree of some kind).",
    " We use depth, indent, path, and other props to show row's place in the hierarchy.",
    " This is very handy to handle rendering, especially in virtual scrolling scenarios.",
    "",
    " DataSources primary job is to convert various data stores into arrays of DataRowProps."
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignItems",
     "comment": [
      "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
     ],
     "typeValue": {
      "raw": "undefined | 'top' | 'bottom' | 'center' | 'stretch'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FlexRowProps",
       "nameFull": "FlexRowProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "checkbox",
     "comment": [
      "If row needs a checkbox, this field should be specified and it props can be configured here"
     ],
     "typeValue": {
      "raw": "undefined | { isVisible: boolean; } & ICanBeInvalid"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "comment": [
      "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "typeValue": {
      "raw": "undefined | number | '6' | '12' | '18' | '24' | '36'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FlexRowProps",
       "nameFull": "FlexRowProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "depth",
     "comment": [
      "Depth of the row in tree, 0 for the top-level"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dnd",
     "comment": [
      "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
     ],
     "typeValue": {
      "raw": "undefined | IDndActor<any, any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "ID of the TItem rows displays"
     ],
     "typeValue": {
      "raw": "TId"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "indent",
     "comment": [
      "Indent of the item, to show hierarchy.",
      "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
      "  if all children of node has no children, all nodes would get the same indent as parent."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "index",
     "comment": [
      "Index of the row, from the top of the list. This doesn't account any hierarchy."
     ],
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isCheckable",
     "comment": [
      "True if row has checkbox and can be checkable"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isChecked",
     "comment": [
      "True if row is checked with checkbox"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenChecked",
     "comment": [
      "True if some of row's children are checked.",
      " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenSelected",
     "comment": [
      "True if any of row's children is selected."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFocused",
     "comment": [
      "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFoldable",
     "comment": [
      "True if row be folded or unfolded (usually because it contains children)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFolded",
     "comment": [
      "True if row is currently folded"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLastChild",
     "comment": [
      "True if row is the last child of his parent"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLoading",
     "comment": [
      "True if row is in loading state. 'value' is empty in this case"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isPinned",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isSelectable",
     "comment": [
      "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isSelected",
     "comment": [
      "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isUnknown",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "undefined | null | string | number"
     },
     "from": {
      "typeName": {
       "name": "Attributes",
       "nameFull": "Attributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Can be specified to make row act as a link (plain or SPA)"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onCheck",
     "comment": [
      "Handles row checkbox change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => void"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onFocus",
     "comment": [
      "Handles row focusing."
     ],
     "typeValue": {
      "raw": "undefined | (focusedIndex: number) => void"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onFold",
     "comment": [
      "Handles row folding change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => void"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onSelect",
     "comment": [
      "Handles row selection.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => void"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "parentId",
     "comment": [
      "ID of the parent TItem"
     ],
     "typeValue": {
      "raw": "undefined | TId"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "path",
     "comment": [
      "Hierarchical path from the root node to the item (excluding the item itself)"
     ],
     "typeValue": {
      "raw": "undefined | DataRowPathItem<TId, TItem>[]"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "pin",
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "comment": [
      "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "typeValue": {
      "raw": "undefined | number | '6' | '12' | '18' | '24' | '36'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FlexRowProps",
       "nameFull": "FlexRowProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowKey",
     "comment": [
      "Key to be used as component's key when rendering. Usually, it's stringified ID"
     ],
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "DataSourceListCounts": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "DataSourceListCounts",
    "nameFull": "DataSourceListCounts"
   },
   "typeValue": {
    "raw": "DataSourceListCounts",
    "print": [
     "type DataSourceListCounts = {",
     "    /**",
     "     * Count of rows, after applying filter, and folding on tree nodes.",
     "     * Obsolete! Please switch to exactRowsCount / knownRowsCount",
     "     */",
     "    rowsCount?: number;",
     "    /** Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count  */",
     "    exactRowsCount?: number;",
     "    /**",
     "     * There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
     "     * Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
     "     * Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows.",
     "     */",
     "    knownRowsCount?: number;",
     "    /** Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children  */",
     "    totalCount?: number;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "exactRowsCount",
     "comment": [
      "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "knownRowsCount",
     "comment": [
      "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
      " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
      " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowsCount",
     "comment": [
      "Count of rows, after applying filter, and folding on tree nodes.",
      " Obsolete! Please switch to exactRowsCount / knownRowsCount"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "totalCount",
     "comment": [
      "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    }
   ]
  },
  "DataSourceListProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataSourceListProps",
    "nameFull": "DataSourceListProps"
   },
   "typeValue": {
    "raw": "DataSourceListProps",
    "print": [
     "interface DataSourceListProps extends DataSourceListCounts {",
     "    selectAll?: ICheckable;",
     "    /**",
     "     * Signals that data is reloading on search/sort/filter/reload.",
     "     */",
     "    isReloading?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "exactRowsCount",
     "comment": [
      "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListCounts",
       "nameFull": "DataSourceListCounts"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReloading",
     "comment": [
      "Signals that data is reloading on search/sort/filter/reload."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "knownRowsCount",
     "comment": [
      "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
      " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
      " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListCounts",
       "nameFull": "DataSourceListCounts"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowsCount",
     "comment": [
      "Count of rows, after applying filter, and folding on tree nodes.",
      " Obsolete! Please switch to exactRowsCount / knownRowsCount"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListCounts",
       "nameFull": "DataSourceListCounts"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "typeValue": {
      "raw": "undefined | ICheckable"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "totalCount",
     "comment": [
      "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListCounts",
       "nameFull": "DataSourceListCounts"
      }
     },
     "required": false
    }
   ]
  },
  "DataSourceState": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataSourceState",
    "nameFull": "DataSourceState<TFilter, TId>"
   },
   "typeValue": {
    "raw": "DataSourceState<TFilter, TId>",
    "print": [
     "/** Holds state of a components displaying lists - like tables. Holds virtual list position, filter, search, selection, etc. */",
     "interface DataSourceState<TFilter = Record<string, any>, TId = any> extends VirtualListState {",
     "    search?: string;",
     "    checked?: TId[];",
     "    folded?: Record<string, boolean>;",
     "    filter?: TFilter;",
     "    sorting?: SortingOption[];",
     "    selectedId?: TId;",
     "    focusedIndex?: number;",
     "    page?: number;",
     "    pageSize?: number;",
     "}"
    ]
   },
   "comment": [
    "Holds state of a components displaying lists - like tables. Holds virtual list position, filter, search, selection, etc."
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "checked",
     "typeValue": {
      "raw": "undefined | TId[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "typeValue": {
      "raw": "undefined | TFilter"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "focusedIndex",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "folded",
     "typeValue": {
      "raw": "undefined | Record<string, boolean>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "page",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "pageSize",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "scrollTo",
     "comment": [
      "Virtual list ensures that row with this Index is within the visible area, if not Virtual List .",
      " Virtual list updates this value on scroll to null when appear in the visible area.",
      " If this value is updated manually, Virtual List would scroll to the specified items.",
      " It would attempt to put scroll so this item will be at the top of the list."
     ],
     "typeValue": {
      "raw": "undefined | ScrollToConfig"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "VirtualListState",
       "nameFull": "VirtualListState"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectedId",
     "typeValue": {
      "raw": "undefined | TId"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "typeValue": {
      "raw": "undefined | SortingOption<any>[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "topIndex",
     "comment": [
      "Index of the topmost item, in rendered batch.",
      " Note - this item might not be visible, as Virtual List maintain some reserve of rows on top / at the bottom of the list"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "VirtualListRange",
       "nameFull": "VirtualListRange"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "visibleCount",
     "comment": [
      "Number of currently rendered items.",
      " Virtual list updates this value automatically, if it too small.",
      " Note Virtual List renders more items, that actually visible,",
      " as it need maintain some reserve of rows on top / at the bottom of the list."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "VirtualListRange",
       "nameFull": "VirtualListRange"
      }
     },
     "required": false
    }
   ]
  },
  "DataTableCellOptions": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataTableCellOptions",
    "nameFull": "DataTableCellOptions<TItem, TId>"
   },
   "typeValue": {
    "raw": "DataTableCellOptions<TItem, TId>",
    "print": [
     "interface DataTableCellOptions<TItem = any, TId = any> {",
     "    /** Key to use as component's key */",
     "    key: string;",
     "    /** DataTableRowsProps object for the table row the cell is at */",
     "    rowProps: DataTableRowProps<TItem, TId>;",
     "    /** DataColumnProps object for the column the cell is at */",
     "    column: DataColumnProps<TItem, TId>;",
     "    /** Column index in table  */",
     "    index?: number;",
     "    /** True if the cell is in the first column */",
     "    isFirstColumn: boolean;",
     "    /** True if the cell is in the last column */",
     "    isLastColumn: boolean;",
     "    /** HTML tabIndex attribute to set on the cell */",
     "    tabIndex?: React.HTMLAttributes<HTMLElement>['tabIndex'];",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "column",
     "comment": [
      "DataColumnProps object for the column the cell is at"
     ],
     "typeValue": {
      "raw": "DataColumnProps<TItem, TId, any>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "index",
     "comment": [
      "Column index in table"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFirstColumn",
     "comment": [
      "True if the cell is in the first column"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLastColumn",
     "comment": [
      "True if the cell is in the last column"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "comment": [
      "Key to use as component's key"
     ],
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowProps",
     "comment": [
      "DataTableRowsProps object for the table row the cell is at"
     ],
     "typeValue": {
      "raw": "DataTableRowProps<TItem, TId>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "HTML tabIndex attribute to set on the cell"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    }
   ]
  },
  "DataTableCellProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataTableCellProps",
    "nameFull": "DataTableCellProps<TItem, TId, TCellValue>"
   },
   "typeValue": {
    "raw": "DataTableCellProps<TItem, TId, TCellValue>",
    "print": [
     "interface DataTableCellProps<TItem = any, TId = any, TCellValue = any> extends DataTableCellOptions<TItem, TId>, IHasCX, Partial<IEditable<TCellValue>> {",
     "    /** Add-on controls to put before the cell content (folding arrow, checkbox, etc.) */",
     "    addons?: React.ReactNode;",
     "    /** Overrides default loading placeholder ('skeleton') rendering  */",
     "    renderPlaceholder?(cellProps: DataTableCellProps<TItem, TId, TCellValue>): React.ReactNode;",
     "    renderUnknown?(cellProps: DataTableCellProps<TItem, TId, TCellValue>): React.ReactNode;",
     "    /**",
     "     * If passed, the cell is rendered as editable - receives focus, show validation errors.",
     "     * All necessary props for the editor are passed as argument:",
     "     * - props implements IEditable and can be passed directly to suitable component (like TextInput)",
     "     * - ICanFocus props are passed as well. Component should implement it so cell focus highlight works properly",
     "     * - mode='cell' prop is passed to render UUI components in 'cell' mode",
     "     * - rowProps is passed so you depend on additional info about the row itself",
     "     */",
     "    renderEditor?(props: RenderEditorProps<TItem, TId, TCellValue>): React.ReactNode;",
     "    /** Overrides default tooltip, used to show validation message if the cell is invalid */",
     "    renderTooltip?: (props: ICanBeInvalid & TooltipCoreProps) => React.ReactElement;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "addons",
     "comment": [
      "Add-on controls to put before the cell content (folding arrow, checkbox, etc.)"
     ],
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "column",
     "comment": [
      "DataColumnProps object for the column the cell is at"
     ],
     "typeValue": {
      "raw": "DataColumnProps<TItem, TId, any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableCellOptions",
       "nameFull": "DataTableCellOptions<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "index",
     "comment": [
      "Column index in table"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableCellOptions",
       "nameFull": "DataTableCellOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFirstColumn",
     "comment": [
      "True if the cell is in the first column"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableCellOptions",
       "nameFull": "DataTableCellOptions<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLastColumn",
     "comment": [
      "True if the cell is in the last column"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableCellOptions",
       "nameFull": "DataTableCellOptions<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "comment": [
      "Key to use as component's key"
     ],
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableCellOptions",
       "nameFull": "DataTableCellOptions<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderEditor",
     "comment": [
      "If passed, the cell is rendered as editable - receives focus, show validation errors.",
      " All necessary props for the editor are passed as argument:",
      " - props implements IEditable and can be passed directly to suitable component (like TextInput)",
      " - ICanFocus props are passed as well. Component should implement it so cell focus highlight works properly",
      " - mode='cell' prop is passed to render UUI components in 'cell' mode",
      " - rowProps is passed so you depend on additional info about the row itself"
     ],
     "typeValue": {
      "raw": "undefined | (props: RenderEditorProps<TItem, TId, TCellValue>) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderPlaceholder",
     "comment": [
      "Overrides default loading placeholder ('skeleton') rendering"
     ],
     "typeValue": {
      "raw": "undefined | (cellProps: DataTableCellProps<TItem, TId, TCellValue>) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderTooltip",
     "comment": [
      "Overrides default tooltip, used to show validation message if the cell is invalid"
     ],
     "typeValue": {
      "raw": "undefined | (props: TooltipCoreProps) => React.ReactElement<any, string | React.JSXElementConstructor<any>>"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderUnknown",
     "typeValue": {
      "raw": "undefined | (cellProps: DataTableCellProps<TItem, TId, TCellValue>) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowProps",
     "comment": [
      "DataTableRowsProps object for the table row the cell is at"
     ],
     "typeValue": {
      "raw": "DataTableRowProps<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableCellOptions",
       "nameFull": "DataTableCellOptions<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "HTML tabIndex attribute to set on the cell"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableCellOptions",
       "nameFull": "DataTableCellOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "DataTableColumnsConfigOptions": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataTableColumnsConfigOptions",
    "nameFull": "DataTableColumnsConfigOptions"
   },
   "typeValue": {
    "raw": "DataTableColumnsConfigOptions",
    "print": [
     "interface DataTableColumnsConfigOptions {",
     "    allowColumnsReordering?: boolean;",
     "    allowColumnsResizing?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "allowColumnsReordering",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "allowColumnsResizing",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    }
   ]
  },
  "DataTableConfigModalParams": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "DataTableConfigModalParams",
    "nameFull": "DataTableConfigModalParams"
   },
   "typeValue": {
    "raw": "DataTableConfigModalParams",
    "print": [
     "type DataTableConfigModalParams = IEditable<DataSourceState> & {",
     "    columns: DataColumnProps<any, any>[];",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "columns",
     "typeValue": {
      "raw": "DataColumnProps<any, any, any>[]"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "DataTableHeaderCellProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataTableHeaderCellProps",
    "nameFull": "DataTableHeaderCellProps<TItem, TId>"
   },
   "typeValue": {
    "raw": "DataTableHeaderCellProps<TItem, TId>",
    "print": [
     "interface DataTableHeaderCellProps<TItem = any, TId = any> extends IEditable<DataTableState>, IDropdownToggler, IHasCX, DataTableColumnsConfigOptions {",
     "    key: string;",
     "    column: DataColumnProps<TItem, TId>;",
     "    isFirstColumn: boolean;",
     "    isLastColumn: boolean;",
     "    selectAll?: ICheckable;",
     "    isFilterActive?: boolean;",
     "    sortDirection?: SortDirection;",
     "    onSort(dir: SortDirection): void;",
     "    onDrop?(params: DropParams<DataColumnProps<TItem, TId>, DataColumnProps<TItem, TId>>): void;",
     "    renderFilter?: (dropdownProps: IDropdownBodyProps) => React.ReactNode;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "allowColumnsReordering",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableColumnsConfigOptions",
       "nameFull": "DataTableColumnsConfigOptions"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "allowColumnsResizing",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableColumnsConfigOptions",
       "nameFull": "DataTableColumnsConfigOptions"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "column",
     "typeValue": {
      "raw": "DataColumnProps<TItem, TId, any>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFilterActive",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFirstColumn",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLastColumn",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onDrop",
     "typeValue": {
      "raw": "undefined | (params: DataColumnProps<TItem, TId, any>>) => void"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onSort",
     "typeValue": {
      "raw": "(dir: SortDirection) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderFilter",
     "typeValue": {
      "raw": "undefined | (dropdownProps: IDropdownBodyProps) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "typeValue": {
      "raw": "undefined | ICheckable"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sortDirection",
     "typeValue": {
      "raw": "undefined | 'asc' | 'desc'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "DataTableHeaderRowProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataTableHeaderRowProps",
    "nameFull": "DataTableHeaderRowProps<TItem, TId>"
   },
   "typeValue": {
    "raw": "DataTableHeaderRowProps<TItem, TId>",
    "print": [
     "interface DataTableHeaderRowProps<TItem = any, TId = any> extends IEditable<DataTableState>, IHasCX, DataTableColumnsConfigOptions {",
     "    columns: DataColumnProps<TItem, TId>[];",
     "    selectAll?: ICheckable;",
     "    onConfigButtonClick?: (params: DataTableConfigModalParams) => any;",
     "    renderCell?: (props: DataTableHeaderCellProps<TItem, TId>) => React.ReactNode;",
     "    renderConfigButton?: () => React.ReactNode;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "allowColumnsReordering",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableColumnsConfigOptions",
       "nameFull": "DataTableColumnsConfigOptions"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "allowColumnsResizing",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableColumnsConfigOptions",
       "nameFull": "DataTableColumnsConfigOptions"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "columns",
     "typeValue": {
      "raw": "DataColumnProps<TItem, TId, any>[]"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onConfigButtonClick",
     "typeValue": {
      "raw": "undefined | (params: DataTableConfigModalParams) => any"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderCell",
     "typeValue": {
      "raw": "undefined | (props: DataTableHeaderCellProps<TItem, TId>) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderConfigButton",
     "typeValue": {
      "raw": "undefined | () => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "typeValue": {
      "raw": "undefined | ICheckable"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "DataTableRowProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataTableRowProps",
    "nameFull": "DataTableRowProps<TItem, TId>"
   },
   "typeValue": {
    "raw": "DataTableRowProps<TItem, TId>",
    "print": [
     "interface DataTableRowProps<TItem = any, TId = any> extends DataRowProps<TItem, TId> {",
     "    columns?: DataColumnProps<TItem, TId>[];",
     "    renderCell?: (props: DataTableCellProps<TItem, TId, any>) => ReactNode;",
     "    renderDropMarkers?: (props: DndActorRenderParams) => ReactNode;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignItems",
     "comment": [
      "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
     ],
     "typeValue": {
      "raw": "undefined | 'top' | 'bottom' | 'center' | 'stretch'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FlexRowProps",
       "nameFull": "FlexRowProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "checkbox",
     "comment": [
      "If row needs a checkbox, this field should be specified and it props can be configured here"
     ],
     "typeValue": {
      "raw": "undefined | { isVisible: boolean; } & ICanBeInvalid"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "comment": [
      "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "typeValue": {
      "raw": "undefined | number | '6' | '12' | '18' | '24' | '36'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FlexRowProps",
       "nameFull": "FlexRowProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "columns",
     "typeValue": {
      "raw": "undefined | DataColumnProps<TItem, TId, any>[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "depth",
     "comment": [
      "Depth of the row in tree, 0 for the top-level"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dnd",
     "comment": [
      "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
     ],
     "typeValue": {
      "raw": "undefined | IDndActor<any, any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "ID of the TItem rows displays"
     ],
     "typeValue": {
      "raw": "TId"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "indent",
     "comment": [
      "Indent of the item, to show hierarchy.",
      "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
      "  if all children of node has no children, all nodes would get the same indent as parent."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "index",
     "comment": [
      "Index of the row, from the top of the list. This doesn't account any hierarchy."
     ],
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isCheckable",
     "comment": [
      "True if row has checkbox and can be checkable"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isChecked",
     "comment": [
      "True if row is checked with checkbox"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenChecked",
     "comment": [
      "True if some of row's children are checked.",
      " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenSelected",
     "comment": [
      "True if any of row's children is selected."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFocused",
     "comment": [
      "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFoldable",
     "comment": [
      "True if row be folded or unfolded (usually because it contains children)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFolded",
     "comment": [
      "True if row is currently folded"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLastChild",
     "comment": [
      "True if row is the last child of his parent"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLoading",
     "comment": [
      "True if row is in loading state. 'value' is empty in this case"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isPinned",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isSelectable",
     "comment": [
      "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isSelected",
     "comment": [
      "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isUnknown",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "undefined | null | string | number"
     },
     "from": {
      "typeName": {
       "name": "Attributes",
       "nameFull": "Attributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Can be specified to make row act as a link (plain or SPA)"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onCheck",
     "comment": [
      "Handles row checkbox change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onFocus",
     "comment": [
      "Handles row focusing."
     ],
     "typeValue": {
      "raw": "undefined | (focusedIndex: number) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onFold",
     "comment": [
      "Handles row folding change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onSelect",
     "comment": [
      "Handles row selection.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "parentId",
     "comment": [
      "ID of the parent TItem"
     ],
     "typeValue": {
      "raw": "undefined | TId"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "path",
     "comment": [
      "Hierarchical path from the root node to the item (excluding the item itself)"
     ],
     "typeValue": {
      "raw": "undefined | DataRowPathItem<TId, TItem>[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "pin",
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderCell",
     "typeValue": {
      "raw": "undefined | (props: DataTableCellProps<TItem, TId, any>) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderDropMarkers",
     "typeValue": {
      "raw": "undefined | (props: DndActorRenderParams) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "comment": [
      "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "typeValue": {
      "raw": "undefined | number | '6' | '12' | '18' | '24' | '36'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FlexRowProps",
       "nameFull": "FlexRowProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowKey",
     "comment": [
      "Key to be used as component's key when rendering. Usually, it's stringified ID"
     ],
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "DataTableSelectedCellData": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataTableSelectedCellData",
    "nameFull": "DataTableSelectedCellData<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "DataTableSelectedCellData<TItem, TId, TFilter>",
    "print": [
     "interface DataTableSelectedCellData<TItem = any, TId = any, TFilter = any> {",
     "    column: DataColumnProps<TItem, TId, TFilter>;",
     "    row: DataRowProps<TItem, TId>;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "column",
     "typeValue": {
      "raw": "DataColumnProps<TItem, TId, TFilter>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "row",
     "typeValue": {
      "raw": "DataRowProps<TItem, TId>"
     },
     "required": true
    }
   ]
  },
  "DataTableState": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataTableState",
    "nameFull": "DataTableState<TFilter, TViewState>"
   },
   "typeValue": {
    "raw": "DataTableState<TFilter, TViewState>",
    "print": [
     "interface DataTableState<TFilter = any, TViewState = any> extends DataSourceState<TFilter> {",
     "    columnsConfig?: ColumnsConfig;",
     "    filtersConfig?: FiltersConfig;",
     "    presetId?: number | null;",
     "    viewState?: TViewState;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "checked",
     "typeValue": {
      "raw": "undefined | TId[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceState",
       "nameFull": "DataSourceState<TFilter, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "columnsConfig",
     "typeValue": {
      "raw": "undefined | ColumnsConfig"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "typeValue": {
      "raw": "undefined | TFilter"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceState",
       "nameFull": "DataSourceState<TFilter, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filtersConfig",
     "typeValue": {
      "raw": "undefined | FiltersConfig<any>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "focusedIndex",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceState",
       "nameFull": "DataSourceState<TFilter, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "folded",
     "typeValue": {
      "raw": "undefined | Record<string, boolean>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceState",
       "nameFull": "DataSourceState<TFilter, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "page",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceState",
       "nameFull": "DataSourceState<TFilter, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "pageSize",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceState",
       "nameFull": "DataSourceState<TFilter, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "presetId",
     "typeValue": {
      "raw": "undefined | null | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "scrollTo",
     "comment": [
      "Virtual list ensures that row with this Index is within the visible area, if not Virtual List .",
      " Virtual list updates this value on scroll to null when appear in the visible area.",
      " If this value is updated manually, Virtual List would scroll to the specified items.",
      " It would attempt to put scroll so this item will be at the top of the list."
     ],
     "typeValue": {
      "raw": "undefined | ScrollToConfig"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "VirtualListState",
       "nameFull": "VirtualListState"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceState",
       "nameFull": "DataSourceState<TFilter, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectedId",
     "typeValue": {
      "raw": "undefined | TId"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceState",
       "nameFull": "DataSourceState<TFilter, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "typeValue": {
      "raw": "undefined | SortingOption<any>[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceState",
       "nameFull": "DataSourceState<TFilter, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "topIndex",
     "comment": [
      "Index of the topmost item, in rendered batch.",
      " Note - this item might not be visible, as Virtual List maintain some reserve of rows on top / at the bottom of the list"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "VirtualListRange",
       "nameFull": "VirtualListRange"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "viewState",
     "typeValue": {
      "raw": "undefined | TViewState"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "visibleCount",
     "comment": [
      "Number of currently rendered items.",
      " Virtual list updates this value automatically, if it too small.",
      " Note Virtual List renders more items, that actually visible,",
      " as it need maintain some reserve of rows on top / at the bottom of the list."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "VirtualListRange",
       "nameFull": "VirtualListRange"
      }
     },
     "required": false
    }
   ]
  },
  "DatePickerCoreProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DatePickerCoreProps",
    "nameFull": "DatePickerCoreProps"
   },
   "typeValue": {
    "raw": "DatePickerCoreProps",
    "print": [
     "interface DatePickerCoreProps extends BaseDatePickerProps {",
     "    /** render prop to add a custom footer inside the DatePicker dropdown body */",
     "    renderFooter?(): ReactNode;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bodyCx",
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disableClear",
     "comment": [
      "Disable clearing date value (e.g. via cross icon)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "comment": [
      "Filter selectable days. Days, for which this callback returns false - will be disabled"
     ],
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "format",
     "comment": [
      "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "Styles for input and body components in DatePicker"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "comment": [
      "If this function returns true, the day will be highlighted as holiday"
     ],
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "typeValue": {
      "raw": "undefined | (e?: React.FocusEvent<HTMLInputElement, Element> | undefined) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Attributes for HTML Element"
     ],
     "typeValue": {
      "raw": "undefined | { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "comment": [
      "Overrides rendering of the single day. For example, to highlight certain days"
     ],
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderFooter",
     "comment": [
      "render prop to add a custom footer inside the DatePicker dropdown body"
     ],
     "typeValue": {
      "raw": "undefined | () => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderTarget",
     "comment": [
      "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach DatePicker to other components, e.g. Buttons"
     ],
     "typeValue": {
      "raw": "undefined | (props: IDropdownToggler) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "DndActorProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DndActorProps",
    "nameFull": "DndActorProps<TSrcData, TDstData>"
   },
   "typeValue": {
    "raw": "DndActorProps<TSrcData, TDstData>",
    "print": [
     "interface DndActorProps<TSrcData, TDstData> extends IDndActor<TSrcData, TDstData> {",
     "    render(props: DndActorRenderParams): React.ReactNode;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "canAcceptDrop",
     "typeValue": {
      "raw": "undefined | (params: DropPosition, boolean>> | null"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDndActor",
       "nameFull": "IDndActor<TSrcData, TDstData>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dstData",
     "typeValue": {
      "raw": "undefined | TDstData"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDndActor",
       "nameFull": "IDndActor<TSrcData, TDstData>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onDrop",
     "typeValue": {
      "raw": "undefined | (data: DropParams<TSrcData, TDstData>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDndActor",
       "nameFull": "IDndActor<TSrcData, TDstData>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "render",
     "typeValue": {
      "raw": "(props: DndActorRenderParams) => React.ReactNode"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "srcData",
     "typeValue": {
      "raw": "undefined | TSrcData"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDndActor",
       "nameFull": "IDndActor<TSrcData, TDstData>"
      }
     },
     "required": false
    }
   ]
  },
  "DndActorRenderParams": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DndActorRenderParams",
    "nameFull": "DndActorRenderParams"
   },
   "typeValue": {
    "raw": "DndActorRenderParams",
    "print": [
     "interface DndActorRenderParams {",
     "    /** True, if the element can be dragged. Doesn't mean that DnD is active. */",
     "    isDraggable: boolean;",
     "    /** True, if the element is dragged out. True for placeholder left when it's element it dragged out. False for Drag Ghost. */",
     "    isDraggedOut: boolean;",
     "    /** True, if the element is rendered as Drag Ghost. All other flags are false for drag ghost. */",
     "    isDragGhost: boolean;",
     "    /** True, if the element is being dragged over, even if drop is not accepted by the element (canAcceptDrop returned false) */",
     "    isDraggedOver: boolean;",
     "    /** True, if the element is being dragged over, and drop on it is accepted - canAcceptDrop returned true */",
     "    isDropAccepted: boolean;",
     "    /** True if any drag and drop operation is in progress, even if the element not being dragged */",
     "    isDndInProgress: boolean;",
     "    /** Drag data associated with the element. Specified always, even if there is no DnD operation happening. */",
     "    dragData?: any;",
     "    /** Drop position. Chosen from accepted drop positions according to pointer coordinates */",
     "    position?: DropPosition;",
     "    /**",
     "     * Event handlers. Component is expected to pass these events to the top element it renders.",
     "     * As onClick event on the element will be overwritten, use DndActorProps.onClick to receive click events on the element",
     "     */",
     "    eventHandlers: {",
     "        onTouchStart?(e: React.TouchEvent): void;",
     "        onPointerDown?(e: React.PointerEvent): void;",
     "        onPointerEnter?(e: React.PointerEvent<any>): void;",
     "        onPointerMove?(e: React.PointerEvent<any>): void;",
     "        onPointerLeave?(e: React.PointerEvent<any>): void;",
     "        onPointerUp?(e: React.PointerEvent<any>): void;",
     "    };",
     "    /**",
     "     * CSS class names to add to the element.",
     "     * Some of these markers are used by the DndActor internally, so they must be added even if no used by component itself to apply styles.",
     "     */",
     "    classNames: string[];",
     "    /**",
     "     * Ref to the DOM element to perform DnD actions",
     "     */",
     "    ref?: React.Ref<any>;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "classNames",
     "comment": [
      "CSS class names to add to the element.",
      " Some of these markers are used by the DndActor internally, so they must be added even if no used by component itself to apply styles."
     ],
     "typeValue": {
      "raw": "string[]"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "dragData",
     "comment": [
      "Drag data associated with the element. Specified always, even if there is no DnD operation happening."
     ],
     "typeValue": {
      "raw": "any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "eventHandlers",
     "comment": [
      "Event handlers. Component is expected to pass these events to the top element it renders.",
      " As onClick event on the element will be overwritten, use DndActorProps.onClick to receive click events on the element"
     ],
     "typeValue": {
      "raw": "{ onTouchStart?(e: React.TouchEvent<Element>): void; onPointerDown?(e: React.PointerEvent<Element>): void; onPointerEnter?(e: React.PointerEvent<any>): void; onPointerMove?(e: React.PointerEvent<any>): void; onPointerLeave?(e: React.PointerEvent<any>): void; onPointerUp?(e: React.PointerEvent<any>): void; }"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDndInProgress",
     "comment": [
      "True if any drag and drop operation is in progress, even if the element not being dragged"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggable",
     "comment": [
      "True, if the element can be dragged. Doesn't mean that DnD is active."
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggedOut",
     "comment": [
      "True, if the element is dragged out. True for placeholder left when it's element it dragged out. False for Drag Ghost."
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggedOver",
     "comment": [
      "True, if the element is being dragged over, even if drop is not accepted by the element (canAcceptDrop returned false)"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDragGhost",
     "comment": [
      "True, if the element is rendered as Drag Ghost. All other flags are false for drag ghost."
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropAccepted",
     "comment": [
      "True, if the element is being dragged over, and drop on it is accepted - canAcceptDrop returned true"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "position",
     "comment": [
      "Drop position. Chosen from accepted drop positions according to pointer coordinates"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'top' | 'bottom' | 'inside'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Ref to the DOM element to perform DnD actions"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "required": false
    }
   ]
  },
  "DndContextState": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DndContextState",
    "nameFull": "DndContextState"
   },
   "typeValue": {
    "raw": "DndContextState",
    "print": [
     "interface DndContextState {",
     "    isDragging: boolean;",
     "    ghostOffsetX?: number;",
     "    ghostOffsetY?: number;",
     "    ghostWidth?: number;",
     "    renderGhost?(): React.ReactNode;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "ghostOffsetX",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ghostOffsetY",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ghostWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDragging",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderGhost",
     "typeValue": {
      "raw": "undefined | () => React.ReactNode"
     },
     "required": false
    }
   ]
  },
  "DragGhostProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DragGhostProps",
    "nameFull": "DragGhostProps"
   },
   "typeValue": {
    "raw": "DragGhostProps",
    "print": [
     "interface DragGhostProps {",
     "}"
    ]
   }
  },
  "DropdownBodyProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DropdownBodyProps",
    "nameFull": "DropdownBodyProps"
   },
   "typeValue": {
    "raw": "DropdownBodyProps",
    "print": [
     "interface DropdownBodyProps extends IDropdownBodyProps {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "arrowProps",
     "typeValue": {
      "raw": "undefined | PopperArrowProps"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "scheduleUpdate",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "togglerHeight",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "togglerWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    }
   ]
  },
  "DropdownPlacement": {
   "typeValue": {
    "raw": "Placement",
    "print": [
     "type DropdownPlacement = Placement;"
    ]
   },
   "typeName": {
    "name": "DropdownPlacement",
    "nameFull": "DropdownPlacement"
   },
   "kind": "TypeAliasDeclaration"
  },
  "DropdownProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DropdownProps",
    "nameFull": "DropdownProps"
   },
   "typeValue": {
    "raw": "DropdownProps",
    "print": [
     "interface DropdownProps extends Partial<IEditable<boolean>> {",
     "    renderTarget: (props: IDropdownToggler) => React.ReactNode;",
     "    renderBody: (props: DropdownBodyProps) => React.ReactNode;",
     "    onClose?: () => void;",
     "    isNotUnfoldable?: boolean;",
     "    zIndex?: number;",
     "    placement?: DropdownPlacement;",
     "    modifiers?: Modifier<any>[];",
     "    /** Should we close dropdown on click on the Toggler, if it's already open? Default is true. */",
     "    openDelay?: number; // default: 0",
     "    closeDelay?: number; // default: 0",
     "    openOnClick?: boolean; // default: true",
     "    openOnHover?: boolean; // default: false",
     "    closeOnTargetClick?: boolean; // default: true",
     "    closeOnClickOutside?: boolean; // default: true",
     "    closeOnMouseLeave?: 'toggler' | 'boundary' | false;",
     "    portalTarget?: HTMLElement;",
     "    boundaryElement?: Boundary;",
     "    closeBodyOnTogglerHidden?: boolean; // default: true; Set false if you do not want to hide the dropdown body in case Toggler is out of the viewport",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "boundaryElement",
     "typeValue": {
      "raw": "undefined | HTMLElement | HTMLElement[] | 'clippingParents'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeBodyOnTogglerHidden",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeDelay",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnClickOutside",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnMouseLeave",
     "typeValue": {
      "raw": "undefined | false | 'toggler' | 'boundary'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnTargetClick",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isNotUnfoldable",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "modifiers",
     "typeValue": {
      "raw": "undefined | (Modifier<any, object>>)[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "openDelay",
     "comment": [
      "Should we close dropdown on click on the Toggler, if it's already open? Default is true."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "openOnClick",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "openOnHover",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "portalTarget",
     "typeValue": {
      "raw": "undefined | HTMLElement"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderBody",
     "typeValue": {
      "raw": "(props: DropdownBodyProps) => React.ReactNode"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderTarget",
     "typeValue": {
      "raw": "(props: IDropdownToggler) => React.ReactNode"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "zIndex",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    }
   ]
  },
  "DropdownState": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DropdownState",
    "nameFull": "DropdownState"
   },
   "typeValue": {
    "raw": "DropdownState",
    "print": [
     "interface DropdownState {",
     "    opened: boolean;",
     "    bodyBoundingRect: {",
     "        y: number | null;",
     "        x: number | null;",
     "        width: number | null;",
     "        height: number | null;",
     "    };",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bodyBoundingRect",
     "typeValue": {
      "raw": "{ y: number | null; x: number | null; width: number | null; height: number | null; }"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "opened",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    }
   ]
  },
  "DropParams": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DropParams",
    "nameFull": "DropParams<TSrcData, TDstData>"
   },
   "typeValue": {
    "raw": "DropParams<TSrcData, TDstData>",
    "print": [
     "interface DropParams<TSrcData, TDstData> extends AcceptDropParams<TSrcData, TDstData> {",
     "    position: DropPosition;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "dstData",
     "typeValue": {
      "raw": "undefined | TDstData"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "AcceptDropParams",
       "nameFull": "AcceptDropParams<TSrcData, TDstData>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "offsetLeft",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "AcceptDropParams",
       "nameFull": "AcceptDropParams<TSrcData, TDstData>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "offsetTop",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "AcceptDropParams",
       "nameFull": "AcceptDropParams<TSrcData, TDstData>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "position",
     "typeValue": {
      "raw": "'left' | 'right' | 'top' | 'bottom' | 'inside'"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "srcData",
     "typeValue": {
      "raw": "TSrcData"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "AcceptDropParams",
       "nameFull": "AcceptDropParams<TSrcData, TDstData>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "targetHeight",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "AcceptDropParams",
       "nameFull": "AcceptDropParams<TSrcData, TDstData>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "targetWidth",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "AcceptDropParams",
       "nameFull": "AcceptDropParams<TSrcData, TDstData>"
      }
     },
     "required": true
    }
   ]
  },
  "DropPosition": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "DropPosition",
    "nameFull": "DropPosition"
   },
   "typeValue": {
    "raw": "'left' | 'right' | 'top' | 'bottom' | 'inside'",
    "print": [
     "type DropPosition = 'top' | 'bottom' | 'left' | 'right' | 'inside';"
    ]
   }
  },
  "DropPositionOptions": {
   "typeValue": {
    "raw": "Partial<Record<DropPosition, boolean>>",
    "print": [
     "type DropPositionOptions = Partial<Record<DropPosition, boolean>>;"
    ]
   },
   "typeName": {
    "name": "DropPositionOptions",
    "nameFull": "DropPositionOptions<__type>"
   },
   "kind": "TypeAliasDeclaration"
  },
  "FileUploadOptions": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "FileUploadOptions",
    "nameFull": "FileUploadOptions"
   },
   "typeValue": {
    "raw": "FileUploadOptions",
    "print": [
     "interface FileUploadOptions {",
     "    onProgress?: (progress: number) => any;",
     "    getXHR?: (xhr: XMLHttpRequest) => any; // get xhr to be able to cancel the request",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "getXHR",
     "typeValue": {
      "raw": "undefined | (xhr: XMLHttpRequest) => any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onProgress",
     "typeValue": {
      "raw": "undefined | (progress: number) => any"
     },
     "required": false
    }
   ]
  },
  "FileUploadResponse": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "FileUploadResponse",
    "nameFull": "FileUploadResponse"
   },
   "typeValue": {
    "raw": "FileUploadResponse",
    "print": [
     "interface FileUploadResponse {",
     "    id: number;",
     "    name: string;",
     "    size: number;",
     "    path?: string;",
     "    type?: BlockTypes;",
     "    extension?: string;",
     "    error?: {",
     "        isError: boolean;",
     "        message?: string;",
     "    };",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "error",
     "typeValue": {
      "raw": "undefined | { isError: boolean; message?: string | undefined; }"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "extension",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "path",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "typeValue": {
      "raw": "undefined | 'attachment' | 'iframe' | 'image'"
     },
     "required": false
    }
   ]
  },
  "FilterPredicate": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "FilterPredicate",
    "nameFull": "FilterPredicate<TField>"
   },
   "typeValue": {
    "raw": "FilterPredicate<TField>",
    "print": [
     "type FilterPredicate<TField> = {",
     "    in?: TField[];",
     "    nin?: TField[];",
     "    isNull?: boolean;",
     "    gt?: TField;",
     "    gte?: TField;",
     "    lt?: TField;",
     "    lte?: TField;",
     "    inRange?: RangeValue;",
     "    notInRange?: RangeValue;",
     "    eq?: TField;",
     "    neq?: TField;",
     "    not?: FilterPredicate<TField>;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "eq",
     "typeValue": {
      "raw": "undefined | TField"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "gt",
     "typeValue": {
      "raw": "undefined | TField"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "gte",
     "typeValue": {
      "raw": "undefined | TField"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "in",
     "typeValue": {
      "raw": "undefined | TField[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inRange",
     "typeValue": {
      "raw": "undefined | RangeValue"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isNull",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "lt",
     "typeValue": {
      "raw": "undefined | TField"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "lte",
     "typeValue": {
      "raw": "undefined | TField"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "neq",
     "typeValue": {
      "raw": "undefined | TField"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "nin",
     "typeValue": {
      "raw": "undefined | TField[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "not",
     "typeValue": {
      "raw": "undefined | FilterPredicate<TField>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "notInRange",
     "typeValue": {
      "raw": "undefined | RangeValue"
     },
     "required": false
    }
   ]
  },
  "FilterPredicateName": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "FilterPredicateName",
    "nameFull": "FilterPredicateName"
   },
   "typeValue": {
    "raw": "'in' | 'nin' | 'isNull' | 'gt' | 'gte' | 'lt' | 'lte' | 'inRange' | 'notInRange' | 'eq' | 'neq' | 'not'",
    "print": [
     "type FilterPredicateName = keyof FilterPredicate<any>;"
    ]
   }
  },
  "FiltersConfig": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "FiltersConfig",
    "nameFull": "FiltersConfig<TFilter>"
   },
   "typeValue": {
    "raw": "FiltersConfig<TFilter>",
    "print": [
     "type FiltersConfig<TFilter = any> = {",
     "    [key in keyof TFilter]: IFilterConfig;",
     "};"
    ]
   }
  },
  "FlexCellProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "FlexCellProps",
    "nameFull": "FlexCellProps"
   },
   "typeValue": {
    "raw": "FlexCellProps",
    "print": [
     "type FlexCellProps = IHasCX & IClickable & IHasRawProps<HTMLAttributes<HTMLDivElement>> & Attributes & IHasChildren & {",
     "    /** CSS width. Set to 'auto' to make FlexCell resize to it's content */",
     "    width?: number | 'auto' | '100%';",
     "    /** CSS min-width */",
     "    minWidth?: number;",
     "    /** Flexbox flex-grow property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-grow) */",
     "    grow?: number;",
     "    /** Flexbox shrink property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-shrink) */",
     "    shrink?: number;",
     "    /** CSS text-align property */",
     "    textAlign?: 'left' | 'center' | 'right';",
     "    /** Flexbox align-self property. Aligns items vertically for horizontal flexbox. [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-align-self) */",
     "    alignSelf?: CSS.AlignSelfProperty;",
     "    /** Standard style attribute. Styles are added to element style, overriding supplied flex styles */",
     "    style?: React.CSSProperties;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignSelf",
     "comment": [
      "Flexbox align-self property. Aligns items vertically for horizontal flexbox. [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-align-self)"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "grow",
     "comment": [
      "Flexbox flex-grow property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-grow)"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "undefined | null | string | number"
     },
     "from": {
      "typeName": {
       "name": "Attributes",
       "nameFull": "Attributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "minWidth",
     "comment": [
      "CSS min-width"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "shrink",
     "comment": [
      "Flexbox shrink property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-shrink)"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "comment": [
      "Standard style attribute. Styles are added to element style, overriding supplied flex styles"
     ],
     "typeValue": {
      "raw": "undefined | React.CSSProperties"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "textAlign",
     "comment": [
      "CSS text-align property"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'center'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "comment": [
      "CSS width. Set to 'auto' to make FlexCell resize to it's content"
     ],
     "typeValue": {
      "raw": "undefined | number | 'auto' | '100%'"
     },
     "required": false
    }
   ]
  },
  "FlexRowProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "FlexRowProps",
    "nameFull": "FlexRowProps"
   },
   "typeValue": {
    "raw": "FlexRowProps",
    "print": [
     "type FlexRowProps = IHasCX & IClickable & Attributes & IHasChildren & IHasRawProps<HTMLAttributes<HTMLDivElement>> & {",
     "    /** Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) */",
     "    alignItems?: 'top' | 'center' | 'bottom' | 'stretch';",
     "    /** Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap) */",
     "    columnGap?: number | '6' | '12' | '18' | '24' | '36';",
     "    /** Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap) */",
     "    rowGap?: number | '6' | '12' | '18' | '24' | '36';",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignItems",
     "comment": [
      "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
     ],
     "typeValue": {
      "raw": "undefined | 'top' | 'bottom' | 'center' | 'stretch'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "comment": [
      "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "typeValue": {
      "raw": "undefined | number | '6' | '12' | '18' | '24' | '36'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "undefined | null | string | number"
     },
     "from": {
      "typeName": {
       "name": "Attributes",
       "nameFull": "Attributes"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "comment": [
      "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "typeValue": {
      "raw": "undefined | number | '6' | '12' | '18' | '24' | '36'"
     },
     "required": false
    }
   ]
  },
  "FormProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "FormProps",
    "nameFull": "FormProps<T>"
   },
   "typeValue": {
    "raw": "FormProps<T>",
    "print": [
     "interface FormProps<T> {",
     "    /** Current value of the form state */",
     "    value: T;",
     "    /**",
     "     * Render the form body, provided by form state",
     "     * */",
     "    renderForm: (props: IFormApi<T>) => ReactNode;",
     "    /**",
     "     * Returns form metadata - information used to validate the form.",
     "     * @param state Metadata can depend on state, and will be re-computed on updates",
     "     */",
     "    getMetadata?(state: T): Metadata<T>;",
     "    /**",
     "     * Occurs when 'save' function is called on Form.",
     "     * Should save form data (usually with API call to server).",
     "     * Server can also reject form, and provide validation errors in response.",
     "     * @param state Form state to save",
     "     */",
     "    onSave(state: T): Promise<FormSaveResponse<T> | void>;",
     "    /**",
     "     * Called when form is unmounted, but user still have unsaved changes.",
     "     * Accepts a Promise<boolean> to be returned. If promise resolves to true - save procedure is performed.",
     "     * The common use-case is to show a modal with \"Save Changes?\" dialog",
     "     * Skins usually implement this as default behavior. To prevent it, you can pass null to this prop to override it.",
     "     */",
     "    beforeLeave?: (() => Promise<boolean>) | null;",
     "    /**",
     "     * Used to restore unsaved user edits from the last session (usually to localstorage, via uuiUserSettings context)",
     "     * If unsaved changes are detected, this callback is called. If it is resolved - the form restores unsaved edits.",
     "     * The common use-case is to show a modal with \"You have unsaved changes, restore them?\" dialog",
     "     * Skins usually implement this as default behavior. To prevent it, you can pass null to this prop to override it.",
     "     */",
     "    loadUnsavedChanges?: () => Promise<void>;",
     "    /**",
     "     * Called after successful save.",
     "     * @param state Saved state",
     "     * @param isSavedBeforeLeave true, if save is triggered via leaving the page, and \"Save Changes?\" dialog",
     "     */",
     "    onSuccess?(state: T, isSavedBeforeLeave?: boolean): any;",
     "    /** Called when save fails */",
     "    onError?(error: any): any;",
     "    /**",
     "     * The key, under which form save unsaved state usually to localstorage, via uuiUserSettings context)",
     "     */",
     "    settingsKey?: string;",
     "    /**",
     "     * Controls when form validation occurs:",
     "     * save (default, recommended) - form is validated on save. If form is invalid - it will be revalidated on every change, until become valid",
     "     * change - form is validated on every user change. Only fields changes in current edit session are validated",
     "     */",
     "    validationOn?: ValidationMode;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "beforeLeave",
     "comment": [
      "Called when form is unmounted, but user still have unsaved changes.",
      " Accepts a Promise<boolean> to be returned. If promise resolves to true - save procedure is performed.",
      " The common use-case is to show a modal with \"Save Changes?\" dialog",
      " Skins usually implement this as default behavior. To prevent it, you can pass null to this prop to override it."
     ],
     "typeValue": {
      "raw": "undefined | null | () => Promise<boolean>"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getMetadata",
     "comment": [
      "Returns form metadata - information used to validate the form.",
      " @param state Metadata can depend on state, and will be re-computed on updates"
     ],
     "typeValue": {
      "raw": "undefined | (state: T) => Metadata<T>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "loadUnsavedChanges",
     "comment": [
      "Used to restore unsaved user edits from the last session (usually to localstorage, via uuiUserSettings context)",
      " If unsaved changes are detected, this callback is called. If it is resolved - the form restores unsaved edits.",
      " The common use-case is to show a modal with \"You have unsaved changes, restore them?\" dialog",
      " Skins usually implement this as default behavior. To prevent it, you can pass null to this prop to override it."
     ],
     "typeValue": {
      "raw": "undefined | () => Promise<void>"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onError",
     "comment": [
      "Called when save fails"
     ],
     "typeValue": {
      "raw": "undefined | (error: any) => any"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onSave",
     "comment": [
      "Occurs when 'save' function is called on Form.",
      " Should save form data (usually with API call to server).",
      " Server can also reject form, and provide validation errors in response.",
      " @param state Form state to save"
     ],
     "typeValue": {
      "raw": "(state: T) => Promise<void | FormSaveResponse<T>>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onSuccess",
     "comment": [
      "Called after successful save.",
      " @param state Saved state",
      " @param isSavedBeforeLeave true, if save is triggered via leaving the page, and \"Save Changes?\" dialog"
     ],
     "typeValue": {
      "raw": "undefined | (state: T, isSavedBeforeLeave?: boolean | undefined) => any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderForm",
     "comment": [
      "Render the form body, provided by form state"
     ],
     "typeValue": {
      "raw": "(props: IFormApi<T>) => React.ReactNode"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "settingsKey",
     "comment": [
      "The key, under which form save unsaved state usually to localstorage, via uuiUserSettings context)"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationOn",
     "comment": [
      "Controls when form validation occurs:",
      " save (default, recommended) - form is validated on save. If form is invalid - it will be revalidated on every change, until become valid",
      " change - form is validated on every user change. Only fields changes in current edit session are validated"
     ],
     "typeValue": {
      "raw": "undefined | 'change' | 'save'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "Current value of the form state"
     ],
     "typeValue": {
      "raw": "T"
     },
     "required": true
    }
   ]
  },
  "FormSaveResponse": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "FormSaveResponse",
    "nameFull": "FormSaveResponse<T>"
   },
   "typeValue": {
    "raw": "FormSaveResponse<T>",
    "print": [
     "interface FormSaveResponse<T> {",
     "    form?: T;",
     "    validation?: ICanBeInvalid;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "form",
     "typeValue": {
      "raw": "undefined | T"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validation",
     "typeValue": {
      "raw": "undefined | ICanBeInvalid"
     },
     "required": false
    }
   ]
  },
  "FormState": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "FormState",
    "nameFull": "FormState<T>"
   },
   "typeValue": {
    "raw": "FormState<T>",
    "print": [
     "interface FormState<T> {",
     "    form: T;",
     "    validationState: ICanBeInvalid;",
     "    serverValidationState: ICanBeInvalid;",
     "    lastSentForm?: T;",
     "    isChanged: boolean;",
     "    formHistory: T[];",
     "    historyIndex: number;",
     "    isInProgress: boolean;",
     "    isInSaveMode: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "form",
     "typeValue": {
      "raw": "T"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "formHistory",
     "typeValue": {
      "raw": "T[]"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "historyIndex",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isChanged",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInProgress",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInSaveMode",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "lastSentForm",
     "typeValue": {
      "raw": "undefined | T"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "serverValidationState",
     "typeValue": {
      "raw": "ICanBeInvalid"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationState",
     "typeValue": {
      "raw": "ICanBeInvalid"
     },
     "required": true
    }
   ]
  },
  "IAdaptiveItem": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IAdaptiveItem",
    "nameFull": "IAdaptiveItem"
   },
   "typeValue": {
    "raw": "IAdaptiveItem",
    "print": [
     "interface IAdaptiveItem {",
     "    estimatedWidth?: number;",
     "    priority?: number;",
     "    showInBurgerMenu?: boolean;",
     "    collapseToMore?: boolean;",
     "    collapsedContainer?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "collapseToMore",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "estimatedWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "showInBurgerMenu",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    }
   ]
  },
  "IAnalyticableClick": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IAnalyticableClick",
    "nameFull": "IAnalyticableClick"
   },
   "typeValue": {
    "raw": "IAnalyticableClick",
    "print": [
     "interface IAnalyticableClick {",
     "    /**",
     "     * An analytics event to send (via AnalyticsContext) when component is clicked.",
     "     * See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts).",
     "     */",
     "    clickAnalyticsEvent?: AnalyticsEvent;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "required": false
    }
   ]
  },
  "IAnalyticableOnChange": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IAnalyticableOnChange",
    "nameFull": "IAnalyticableOnChange<T>"
   },
   "typeValue": {
    "raw": "IAnalyticableOnChange<T>",
    "print": [
     "interface IAnalyticableOnChange<T> {",
     "    /**",
     "     * Given a value, returns an analytics event to send when component is edited.",
     "     * See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts).",
     "     */",
     "    getValueChangeAnalyticsEvent?: (newValue: T | null, oldValue: T | null) => AnalyticsEvent;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "required": false
    }
   ]
  },
  "IAnalyticsContext": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IAnalyticsContext",
    "nameFull": "IAnalyticsContext"
   },
   "typeValue": {
    "raw": "IAnalyticsContext",
    "print": [
     "interface IAnalyticsContext {",
     "    sendEvent(event?: AnalyticsEvent): void;",
     "    addListener(listener: IAnalyticsListener): void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "addListener",
     "typeValue": {
      "raw": "(listener: IAnalyticsListener) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "sendEvent",
     "typeValue": {
      "raw": "(event?: AnalyticsEvent | undefined) => void"
     },
     "required": true
    }
   ]
  },
  "IAnalyticsListener": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IAnalyticsListener",
    "nameFull": "IAnalyticsListener"
   },
   "typeValue": {
    "raw": "IAnalyticsListener",
    "print": [
     "interface IAnalyticsListener {",
     "    sendEvent(event: AnalyticsEvent, parameters: Omit<AnalyticsEvent, 'name'>, eventType?: 'event' | 'pageView' | 'apiTiming'): void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "sendEvent",
     "typeValue": {
      "raw": "(event: AnalyticsEvent, 'name'>, eventType?: 'event' | 'pageView' | 'apiTiming' | undefined) => void"
     },
     "required": true
    }
   ]
  },
  "IApiContext": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IApiContext",
    "nameFull": "IApiContext"
   },
   "typeValue": {
    "raw": "IApiContext",
    "print": [
     "interface IApiContext extends IBaseContext {",
     "    readonly status: ApiStatus;",
     "    readonly recoveryReason: ApiRecoveryReason | null;",
     "    getActiveCalls(status?: ApiCallStatus): ApiCallInfo[];",
     "    reset(): void;",
     "    processRequest(url: string, method: string, data?: any, options?: ApiCallOptions): Promise<any>;",
     "    uploadFile(url: string, file: File, options: FileUploadOptions): Promise<FileUploadResponse>;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "destroyContext",
     "typeValue": {
      "raw": "() => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBaseContext",
       "nameFull": "IBaseContext<TState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getActiveCalls",
     "typeValue": {
      "raw": "(status?: ApiCallStatus | undefined) => ApiCallInfo[]"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "processRequest",
     "typeValue": {
      "raw": "(url: string, method: string, data?: any, options?: ApiCallOptions | undefined) => Promise<any>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "recoveryReason",
     "typeValue": {
      "raw": "null | 'auth-lost' | 'connection-lost' | 'server-overload' | 'maintenance'"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "reset",
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "status",
     "typeValue": {
      "raw": "'running' | 'error' | 'idle' | 'recovery'"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "subscribe",
     "typeValue": {
      "raw": "(handler: (state: TState) => void) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBaseContext",
       "nameFull": "IBaseContext<TState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "unsubscribe",
     "typeValue": {
      "raw": "(handler: (state: TState) => void) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBaseContext",
       "nameFull": "IBaseContext<TState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "uploadFile",
     "typeValue": {
      "raw": "(url: string, file: File, options: FileUploadResponse>"
     },
     "required": true
    }
   ]
  },
  "IBaseContext": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IBaseContext",
    "nameFull": "IBaseContext<TState>"
   },
   "typeValue": {
    "raw": "IBaseContext<TState>",
    "print": [
     "interface IBaseContext<TState = {}> {",
     "    subscribe(handler: (state: TState) => void): void;",
     "    unsubscribe(handler: (state: TState) => void): void;",
     "    destroyContext: () => void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "destroyContext",
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "subscribe",
     "typeValue": {
      "raw": "(handler: (state: TState) => void) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "unsubscribe",
     "typeValue": {
      "raw": "(handler: (state: TState) => void) => void"
     },
     "required": true
    }
   ]
  },
  "IBasicPickerToggler": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IBasicPickerToggler",
    "nameFull": "IBasicPickerToggler"
   },
   "typeValue": {
    "raw": "IBasicPickerToggler",
    "print": [
     "/**",
     " * Component can be used as Toggler control for pickers.",
     " * This interface is enough for basic pickers.",
     " * Picker togglers with search or advanced selection display should implement IPickerToggler interface",
     " */",
     "interface IBasicPickerToggler extends IDropdownToggler {",
     "    onClear?(e?: any): void;",
     "}"
    ]
   },
   "comment": [
    "Component can be used as Toggler control for pickers.",
    " This interface is enough for basic pickers.",
    " Picker togglers with search or advanced selection display should implement IPickerToggler interface"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disables component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    }
   ]
  },
  "ICanBeFixed": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ICanBeFixed",
    "nameFull": "ICanBeFixed"
   },
   "typeValue": {
    "raw": "ICanBeFixed",
    "print": [
     "type ICanBeFixed = {",
     "    /** If specified, will make column fixed - it would not scroll horizontally */",
     "    fix?: 'left' | 'right';",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "fix",
     "comment": [
      "If specified, will make column fixed - it would not scroll horizontally"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "required": false
    }
   ]
  },
  "ICanBeInvalid": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ICanBeInvalid",
    "nameFull": "ICanBeInvalid"
   },
   "typeValue": {
    "raw": "ICanBeInvalid",
    "print": [
     "/** Component value can be invalid */",
     "interface ICanBeInvalid {",
     "    /** True if component contains invalid input */",
     "    isInvalid?: boolean;",
     "    /** Message describing why the value is invalid */",
     "    validationMessage?: string;",
     "    /** If T is a complex value (object or array), this property contains validation states of inner items */",
     "    validationProps?: {",
     "        [key: string]: ICanBeInvalid;",
     "    };",
     "}"
    ]
   },
   "comment": [
    "Component value can be invalid"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "required": false
    }
   ]
  },
  "ICanBeReadonly": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ICanBeReadonly",
    "nameFull": "ICanBeReadonly"
   },
   "typeValue": {
    "raw": "ICanBeReadonly",
    "print": [
     "/** Component can be not editable */",
     "interface ICanBeReadonly {",
     "    /** Disable editing. Unlike isDisabled, keep component's value readable. */",
     "    isReadonly?: boolean;",
     "}"
    ]
   },
   "comment": [
    "Component can be not editable"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    }
   ]
  },
  "ICanBeRequired": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ICanBeRequired",
    "nameFull": "ICanBeRequired"
   },
   "typeValue": {
    "raw": "ICanBeRequired",
    "print": [
     "interface ICanBeRequired {",
     "    /** Marks that component's value is required */",
     "    isRequired?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    }
   ]
  },
  "ICanFocus": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ICanFocus",
    "nameFull": "ICanFocus<T>"
   },
   "typeValue": {
    "raw": "ICanFocus<T>",
    "print": [
     "/** Component can be focused */",
     "interface ICanFocus<T> {",
     "    /** Called when component gets input focus */",
     "    onFocus?: (e: React.FocusEvent<T>) => void;",
     "    /** Called when component looses input focus */",
     "    onBlur?: (e: React.FocusEvent<T>) => void;",
     "}"
    ]
   },
   "comment": [
    "Component can be focused"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "required": false
    }
   ]
  },
  "ICanRedirect": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ICanRedirect",
    "nameFull": "ICanRedirect"
   },
   "typeValue": {
    "raw": "ICanRedirect",
    "print": [
     "/** Component acts as a link, and can redirect */",
     "interface ICanRedirect {",
     "    /** Link object to redirect to for SPA-redirects */",
     "    link?: Link;",
     "    /** Href (URL) to redirect to, for non-SPA redirects */",
     "    href?: string;",
     "    /** Highlights component to show that link is active (browser is displaying the page to which link is pointing) */",
     "    isLinkActive?: boolean;",
     "    /** Controls where the link should be opened */",
     "    target?: '_blank';",
     "}"
    ]
   },
   "comment": [
    "Component acts as a link, and can redirect"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "required": false
    }
   ]
  },
  "ICheckable": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ICheckable",
    "nameFull": "ICheckable"
   },
   "typeValue": {
    "raw": "ICheckable",
    "print": [
     "type ICheckable = IEditable<boolean> & IDisableable & {",
     "    /** Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values */",
     "    indeterminate?: boolean;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "indeterminate",
     "comment": [
      "Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "IClickable": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IClickable",
    "nameFull": "IClickable"
   },
   "typeValue": {
    "raw": "IClickable",
    "print": [
     "/** Component supports click action */",
     "interface IClickable {",
     "    /** Called when component is clicked */",
     "    onClick?(e?: any): void;",
     "}"
    ]
   },
   "comment": [
    "Component supports click action"
   ],
   "props": [
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "required": false
    }
   ]
  },
  "IColumnConfig": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "IColumnConfig",
    "nameFull": "IColumnConfig"
   },
   "typeValue": {
    "raw": "IColumnConfig",
    "print": [
     "type IColumnConfig = {",
     "    isVisible?: boolean;",
     "    order?: string;",
     "    width?: number;",
     "} & ICanBeFixed;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "fix",
     "comment": [
      "If specified, will make column fixed - it would not scroll horizontally"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeFixed",
       "nameFull": "ICanBeFixed"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isVisible",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "order",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    }
   ]
  },
  "Icon": {
   "typeValue": {
    "raw": "Icon",
    "print": [
     "type Icon = React.FC<any>;"
    ]
   },
   "typeName": {
    "name": "Icon",
    "nameFull": "Icon<any>"
   },
   "kind": "TypeAliasDeclaration"
  },
  "IContextProviderSsrProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IContextProviderSsrProps",
    "nameFull": "IContextProviderSsrProps<TApi, TAppContext>"
   },
   "typeValue": {
    "raw": "IContextProviderSsrProps<TApi, TAppContext>",
    "print": [
     "interface IContextProviderSsrProps<TApi, TAppContext> extends UseUuiServicesProps<TApi, TAppContext> {",
     "    router: any;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "apiDefinition",
     "typeValue": {
      "raw": "undefined | (processRequest: IProcessRequest) => TApi"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UuiServicesProps",
       "nameFull": "UuiServicesProps<TApi>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "apiPingPath",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ApiContextProps",
       "nameFull": "ApiContextProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "apiReloginPath",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ApiContextProps",
       "nameFull": "ApiContextProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "apiServerUrl",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ApiContextProps",
       "nameFull": "ApiContextProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "appContext",
     "typeValue": {
      "raw": "undefined | TAppContext"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UseUuiServicesProps",
       "nameFull": "UseUuiServicesProps<TApi, TAppContext>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "router",
     "typeValue": {
      "raw": "any"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "skinContext",
     "typeValue": {
      "raw": "undefined | ISkin"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UuiServicesProps",
       "nameFull": "UuiServicesProps<TApi>"
      }
     },
     "required": false
    }
   ]
  },
  "IdAndName": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IdAndName",
    "nameFull": "IdAndName"
   },
   "typeValue": {
    "raw": "IdAndName",
    "print": [
     "/* Common interface for data items */",
     "interface IdAndName {",
     "    id: string;",
     "    name: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    }
   ]
  },
  "IDataSource": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IDataSource",
    "nameFull": "IDataSource<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "IDataSource<TItem, TId, TFilter>",
    "print": [
     "interface IDataSource<TItem, TId, TFilter> {",
     "    getId(item: TItem): TId;",
     "    getById(id: TId): TItem | void;",
     "    setItem(item: TItem): void;",
     "    getView(value: DataSourceState<any, TId>, onValueChange: (val: DataSourceState<any, TId>) => any, options?: any): IDataSourceView<TItem, TId, TFilter>;",
     "    useView(value: DataSourceState<any, TId>, onValueChange: (val: DataSourceState<any, TId>) => any, options?: any, deps?: any[]): IDataSourceView<TItem, TId, TFilter>;",
     "    unsubscribeView(onValueChange: (val: DataSourceState<any, TId>) => any): void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "getById",
     "typeValue": {
      "raw": "(id: TId) => void | TItem"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "typeValue": {
      "raw": "(item: TItem) => TId"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getView",
     "typeValue": {
      "raw": "(value: IDataSourceView<TItem, TId, TFilter>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "setItem",
     "typeValue": {
      "raw": "(item: TItem) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "unsubscribeView",
     "typeValue": {
      "raw": "(onValueChange: (val: DataSourceState<any, TId>) => any) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "useView",
     "typeValue": {
      "raw": "(value: IDataSourceView<TItem, TId, TFilter>"
     },
     "required": true
    }
   ]
  },
  "IDataSourceView": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "IDataSourceView",
    "nameFull": "IDataSourceView<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "IDataSourceView<TItem, TId, TFilter>",
    "print": [
     "// eslint-disable-next-line @typescript-eslint/no-unused-vars",
     "type IDataSourceView<TItem, TId, TFilter> = {",
     "    getById(id: TId, index: number): DataRowProps<TItem, TId>;",
     "    getListProps(): DataSourceListProps;",
     "    getVisibleRows(): DataRowProps<TItem, TId>[];",
     "    getSelectedRows(range?: VirtualListRange): DataRowProps<TItem, TId>[];",
     "    getSelectedRowsCount(): number;",
     "    reload(): void;",
     "    destroy(): void;",
     "    loadData(): void;",
     "    _forceUpdate(): void;",
     "    selectAll?: ICheckable;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "_forceUpdate",
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "destroy",
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getById",
     "typeValue": {
      "raw": "(id: TId, index: number) => DataRowProps<TItem, TId>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getListProps",
     "typeValue": {
      "raw": "() => DataSourceListProps"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getSelectedRows",
     "typeValue": {
      "raw": "(range?: DataRowProps<TItem, TId>[]"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getSelectedRowsCount",
     "typeValue": {
      "raw": "() => number"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getVisibleRows",
     "typeValue": {
      "raw": "() => DataRowProps<TItem, TId>[]"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "loadData",
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "reload",
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "typeValue": {
      "raw": "undefined | ICheckable"
     },
     "required": false
    }
   ]
  },
  "IDisableable": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IDisableable",
    "nameFull": "IDisableable"
   },
   "typeValue": {
    "raw": "IDisableable",
    "print": [
     "/** Component can be disabled */",
     "interface IDisableable {",
     "    /** Disable editing, and visually de-emphasize value of the component */",
     "    isDisabled?: boolean;",
     "}"
    ]
   },
   "comment": [
    "Component can be disabled"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    }
   ]
  },
  "IDndActor": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IDndActor",
    "nameFull": "IDndActor<TSrcData, TDstData>"
   },
   "typeValue": {
    "raw": "IDndActor<TSrcData, TDstData>",
    "print": [
     "interface IDndActor<TSrcData, TDstData> {",
     "    srcData?: TSrcData;",
     "    dstData?: TDstData;",
     "    canAcceptDrop?(params: AcceptDropParams<TSrcData, TDstData>): DropPositionOptions | null;",
     "    onDrop?(data: DropParams<TSrcData, TDstData>): void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "canAcceptDrop",
     "typeValue": {
      "raw": "undefined | (params: DropPosition, boolean>> | null"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dstData",
     "typeValue": {
      "raw": "undefined | TDstData"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onDrop",
     "typeValue": {
      "raw": "undefined | (data: DropParams<TSrcData, TDstData>) => void"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "srcData",
     "typeValue": {
      "raw": "undefined | TSrcData"
     },
     "required": false
    }
   ]
  },
  "IDndContext": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IDndContext",
    "nameFull": "IDndContext"
   },
   "typeValue": {
    "raw": "IDndContext",
    "print": [
     "interface IDndContext extends IBaseContext<DndContextState> {",
     "    startDrag(node: Node, data: any, renderGhost: () => React.ReactNode): void;",
     "    endDrag(): void;",
     "    isDragging: boolean;",
     "    dragData?: any;",
     "    getMouseCoords: () => TMouseCoords;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "destroyContext",
     "typeValue": {
      "raw": "() => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBaseContext",
       "nameFull": "IBaseContext<TState>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "dragData",
     "typeValue": {
      "raw": "any"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "endDrag",
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "getMouseCoords",
     "typeValue": {
      "raw": "() => TMouseCoords"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDragging",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "startDrag",
     "typeValue": {
      "raw": "(node: Node, data: any, renderGhost: () => React.ReactNode) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "subscribe",
     "typeValue": {
      "raw": "(handler: (state: TState) => void) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBaseContext",
       "nameFull": "IBaseContext<TState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "unsubscribe",
     "typeValue": {
      "raw": "(handler: (state: TState) => void) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBaseContext",
       "nameFull": "IBaseContext<TState>"
      }
     },
     "required": true
    }
   ]
  },
  "IDropdownBodyProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IDropdownBodyProps",
    "nameFull": "IDropdownBodyProps"
   },
   "typeValue": {
    "raw": "IDropdownBodyProps",
    "print": [
     "interface IDropdownBodyProps {",
     "    onClose?: () => void;",
     "    togglerWidth?: number;",
     "    togglerHeight?: number;",
     "    scheduleUpdate?: () => void;",
     "    isOpen?: boolean;",
     "    arrowProps?: PopperArrowProps;",
     "    /** Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/) */",
     "    placement?: Placement;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "arrowProps",
     "typeValue": {
      "raw": "undefined | PopperArrowProps"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "scheduleUpdate",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "togglerHeight",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "togglerWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    }
   ]
  },
  "IDropdownToggler": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IDropdownToggler",
    "nameFull": "IDropdownToggler"
   },
   "typeValue": {
    "raw": "IDropdownToggler",
    "print": [
     "/** Component can be used as Toggler control for dropdown menus */",
     "interface IDropdownToggler extends IHasCaption, IClickable {",
     "    /** When component acts as dropdown, indicate that dropdown is open */",
     "    isOpen?: boolean;",
     "    /** Enabled dropdown mode - component can toggle dropdown */",
     "    isDropdown?: boolean;",
     "    /** Called when associated dropdown should open or close  */",
     "    toggleDropdownOpening?: (value: boolean) => void;",
     "    /** Called when component is interacted outside, to close the dropdown */",
     "    isInteractedOutside?: (event: Event) => boolean;",
     "    /** Component's ref */",
     "    ref?: React.Ref<any>;",
     "    /** Disables component */",
     "    isDisabled?: boolean;",
     "}"
    ]
   },
   "comment": [
    "Component can be used as Toggler control for dropdown menus"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disables component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "required": false
    }
   ]
  },
  "IEditable": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IEditable",
    "nameFull": "IEditable<T>"
   },
   "typeValue": {
    "raw": "IEditable<T>",
    "print": [
     "/** Components has an editable value. Text Input is a basic example. */",
     "interface IEditable<T> extends ICanBeInvalid, IDisableable, ICanBeReadonly, ICanBeRequired {",
     "    /** The current value of component */",
     "    value: T;",
     "    /** Called when value needs to be changed (usually due to user interaction) */",
     "    onValueChange(newValue: T): void;",
     "}"
    ]
   },
   "comment": [
    "Components has an editable value. Text Input is a basic example."
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "required": true
    }
   ]
  },
  "IEditableDebouncerOptions": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IEditableDebouncerOptions",
    "nameFull": "IEditableDebouncerOptions"
   },
   "typeValue": {
    "raw": "IEditableDebouncerOptions",
    "print": [
     "/**",
     " * IEditableDebouncer component options.",
     " */",
     "interface IEditableDebouncerOptions {",
     "    /** Pass true to disable debouncing */",
     "    disableDebounce?: boolean;",
     "    /** Debounce delay in ms */",
     "    debounceDelay?: number;",
     "}"
    ]
   },
   "comment": [
    "IEditableDebouncer component options."
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "debounceDelay",
     "comment": [
      "Debounce delay in ms"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disableDebounce",
     "comment": [
      "Pass true to disable debouncing"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    }
   ]
  },
  "IEditableDebouncerProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IEditableDebouncerProps",
    "nameFull": "IEditableDebouncerProps<T>"
   },
   "typeValue": {
    "raw": "IEditableDebouncerProps<T>",
    "print": [
     "/**",
     " * IEditableDebouncer component props.",
     " */",
     "interface IEditableDebouncerProps<T> extends IEditable<T>, IEditableDebouncerOptions, IAnalyticableOnChange<T> {",
     "    /**",
     "     * Render wrapped component.",
     "     */",
     "    render: (props: IEditable<T>) => React.ReactNode;",
     "}"
    ]
   },
   "comment": [
    "IEditableDebouncer component props."
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "debounceDelay",
     "comment": [
      "Debounce delay in ms"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditableDebouncerOptions",
       "nameFull": "IEditableDebouncerOptions"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disableDebounce",
     "comment": [
      "Pass true to disable debouncing"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditableDebouncerOptions",
       "nameFull": "IEditableDebouncerOptions"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "render",
     "comment": [
      "Render wrapped component."
     ],
     "typeValue": {
      "raw": "(props: IEditable<T>) => React.ReactNode"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "IErrorContext": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IErrorContext",
    "nameFull": "IErrorContext"
   },
   "typeValue": {
    "raw": "IErrorContext",
    "print": [
     "interface IErrorContext extends IBaseContext {",
     "    currentError?: Error;",
     "    reportError(error: Error): void;",
     "    onError(callback: Function): void;",
     "    discardError(): void;",
     "    recover(): void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "currentError",
     "typeValue": {
      "raw": "undefined | Error"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "destroyContext",
     "typeValue": {
      "raw": "() => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBaseContext",
       "nameFull": "IBaseContext<TState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "discardError",
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onError",
     "typeValue": {
      "raw": "(callback: Function) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "recover",
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "reportError",
     "typeValue": {
      "raw": "(error: Error) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "subscribe",
     "typeValue": {
      "raw": "(handler: (state: TState) => void) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBaseContext",
       "nameFull": "IBaseContext<TState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "unsubscribe",
     "typeValue": {
      "raw": "(handler: (state: TState) => void) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBaseContext",
       "nameFull": "IBaseContext<TState>"
      }
     },
     "required": true
    }
   ]
  },
  "IFilterConfig": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "IFilterConfig",
    "nameFull": "IFilterConfig"
   },
   "typeValue": {
    "raw": "IFilterConfig",
    "print": [
     "type IFilterConfig = {",
     "    isVisible: boolean;",
     "    order?: string;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isVisible",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "order",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    }
   ]
  },
  "IFilterItemBodyProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "IFilterItemBodyProps",
    "nameFull": "IFilterItemBodyProps<TFilter>"
   },
   "typeValue": {
    "raw": "FilterConfigBase<TFilter> & { type: 'singlePicker' | 'multiPicker'; dataSource: IDropdownBodyProps & { selectedPredicate?: string | undefined; } | FilterConfigBase<TFilter> & { type: 'datePicker'; filter?(day: IDropdownBodyProps & { selectedPredicate?: string | undefined; } | FilterConfigBase<TFilter> & { type: 'numeric'; } & IDropdownBodyProps & { selectedPredicate?: string | undefined; } | FilterConfigBase<TFilter> & { type: 'rangeDatePicker'; format?: string | undefined; filter?(day: IDropdownBodyProps & { selectedPredicate?: string | undefined; } | FilterConfigBase<TFilter> & { type: 'custom'; render: (props: IDropdownBodyProps & { selectedPredicate?: string | undefined; }",
    "print": [
     "type IFilterItemBodyProps<TFilter> = TableFiltersConfig<TFilter> & IEditable<any> & IDropdownBodyProps & {",
     "    selectedPredicate?: string;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "arrowProps",
     "typeValue": {
      "raw": "undefined | PopperArrowProps"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "columnKey",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FilterConfigBase",
       "nameFull": "FilterConfigBase<TFilter>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "field",
     "typeValue": {
      "raw": "keyof TFilter"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FilterConfigBase",
       "nameFull": "FilterConfigBase<TFilter>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isAlwaysVisible",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FilterConfigBase",
       "nameFull": "FilterConfigBase<TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxCount",
     "comment": [
      "Count of words to show in the Filter toggler. By default, 2 item will be shown."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FilterConfigBase",
       "nameFull": "FilterConfigBase<TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "predicates",
     "typeValue": {
      "raw": "undefined | IFilterPredicate[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FilterConfigBase",
       "nameFull": "FilterConfigBase<TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "scheduleUpdate",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectedPredicate",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "title",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FilterConfigBase",
       "nameFull": "FilterConfigBase<TFilter>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "togglerHeight",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "togglerWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "typeValue": {
      "raw": "'singlePicker' | 'multiPicker'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerFilterConfig",
       "nameFull": "PickerFilterConfig<TFilter>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "IFilterPredicate": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "IFilterPredicate",
    "nameFull": "IFilterPredicate"
   },
   "typeValue": {
    "raw": "IFilterPredicate",
    "print": [
     "type IFilterPredicate = {",
     "    name: string;",
     "    predicate: FilterPredicateName;",
     "    isDefault?: boolean;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isDefault",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "predicate",
     "typeValue": {
      "raw": "'in' | 'nin' | 'isNull' | 'gt' | 'gte' | 'lt' | 'lte' | 'inRange' | 'notInRange' | 'eq' | 'neq' | 'not'"
     },
     "required": true
    }
   ]
  },
  "IFormApi": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IFormApi",
    "nameFull": "IFormApi<T>"
   },
   "typeValue": {
    "raw": "IFormApi<T>",
    "print": [
     "interface IFormApi<T> extends IEditable<T>, ICanBeInvalid {",
     "    /**",
     "     * Lens - a helper to split parts of the form state, validation, and setState callbacks, and pass this to components",
     "     */",
     "    lens: ILens<T>;",
     "    /**",
     "     * Sets form value. The signature is the same for setState in React.useState - either new value, or callback to update the value.",
     "     * The change is threated as user input - sets isChanged and creates undo endpoint",
     "     */",
     "    setValue: (s: React.SetStateAction<T>) => void;",
     "    /**",
     "     * Replaces form value. The signature is the same for setState in React.useState - either new value, or callback to update the value.",
     "     * The change is not threated as user input - it replaces last changed state, and doesn't create undo checkpoint.",
     "     */",
     "    replaceValue: (s: React.SetStateAction<T>) => void;",
     "    /**",
     "     * Triggers save procedure - validation, calling props.onSave, and processing results",
     "     */",
     "    save(): void;",
     "    /**",
     "     * Undo to last checkpoint",
     "     */",
     "    undo(): void;",
     "    /**",
     "     * Redo last action",
     "     */",
     "    redo(): void;",
     "    /**",
     "     * Reverts all changes up to the initial or last saved state",
     "     */",
     "    revert(): void;",
     "    /**",
     "     * Try to leave form and ask to save unsaved changes",
     "     */",
     "    close(): Promise<any>;",
     "    /**",
     "     * Forces form to validate value.",
     "     * Validation is usually done automatically, according to validationOn prop.",
     "     * Use this method only in corner cases.",
     "     */",
     "    validate(): ICanBeInvalid;",
     "    /** True if there are changes to undo */",
     "    canUndo: boolean;",
     "    /** True if there are changes to redo */",
     "    canRedo: boolean;",
     "    /** True if there are changes to revers */",
     "    canRevert: boolean;",
     "    /** True if form is changed since the initial state, or the last save */",
     "    isChanged: boolean;",
     "    /** True if save is in progress */",
     "    isInProgress: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "canRedo",
     "comment": [
      "True if there are changes to redo"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "canRevert",
     "comment": [
      "True if there are changes to revers"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "canUndo",
     "comment": [
      "True if there are changes to undo"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "close",
     "comment": [
      "Try to leave form and ask to save unsaved changes"
     ],
     "typeValue": {
      "raw": "() => Promise<any>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isChanged",
     "comment": [
      "True if form is changed since the initial state, or the last save"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInProgress",
     "comment": [
      "True if save is in progress"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "lens",
     "comment": [
      "Lens - a helper to split parts of the form state, validation, and setState callbacks, and pass this to components"
     ],
     "typeValue": {
      "raw": "ILens<T>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "redo",
     "comment": [
      "Redo last action"
     ],
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "replaceValue",
     "comment": [
      "Replaces form value. The signature is the same for setState in React.useState - either new value, or callback to update the value.",
      " The change is not threated as user input - it replaces last changed state, and doesn't create undo checkpoint."
     ],
     "typeValue": {
      "raw": "(s: React.SetStateAction<T>) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "revert",
     "comment": [
      "Reverts all changes up to the initial or last saved state"
     ],
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "save",
     "comment": [
      "Triggers save procedure - validation, calling props.onSave, and processing results"
     ],
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "setValue",
     "comment": [
      "Sets form value. The signature is the same for setState in React.useState - either new value, or callback to update the value.",
      " The change is threated as user input - sets isChanged and creates undo endpoint"
     ],
     "typeValue": {
      "raw": "(s: React.SetStateAction<T>) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "undo",
     "comment": [
      "Undo to last checkpoint"
     ],
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "validate",
     "comment": [
      "Forces form to validate value.",
      " Validation is usually done automatically, according to validationOn prop.",
      " Use this method only in corner cases."
     ],
     "typeValue": {
      "raw": "() => ICanBeInvalid"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "IHasCaption": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IHasCaption",
    "nameFull": "IHasCaption"
   },
   "typeValue": {
    "raw": "IHasCaption",
    "print": [
     "/** Component has a caption. E.g. Button */",
     "interface IHasCaption {",
     "    /** Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions. */",
     "    caption?: any;",
     "}"
    ]
   },
   "comment": [
    "Component has a caption. E.g. Button"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "required": false
    }
   ]
  },
  "IHasChildren": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IHasChildren",
    "nameFull": "IHasChildren"
   },
   "typeValue": {
    "raw": "IHasChildren",
    "print": [
     "interface IHasChildren {",
     "    children?: ReactNode;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "required": false
    }
   ]
  },
  "IHasCX": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IHasCX",
    "nameFull": "IHasCX"
   },
   "typeValue": {
    "raw": "IHasCX",
    "print": [
     "/**",
     " * Component can accept cx variable, which is more convenient shortcut for 'classname' property",
     " * It accepts string, arrays, object, recursively. All falsy values are thrown away. Examples:",
     " * - 'red' => 'red'",
     " * - ['red', 0, false, 'blue' ] => 'red blue'",
     " * - { 'red': true, 'blue': false, ['green', 'white']} => 'red green white'",
     " */",
     "interface IHasCX {",
     "    /** CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details */",
     "    cx?: CX;",
     "}"
    ]
   },
   "comment": [
    "Component can accept cx variable, which is more convenient shortcut for 'classname' property",
    " It accepts string, arrays, object, recursively. All falsy values are thrown away. Examples:",
    " - 'red' => 'red'",
    " - ['red', 0, false, 'blue' ] => 'red blue'",
    " - { 'red': true, 'blue': false, ['green', 'white']} => 'red green white'"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "required": false
    }
   ]
  },
  "IHasDirection": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IHasDirection",
    "nameFull": "IHasDirection"
   },
   "typeValue": {
    "raw": "IHasDirection",
    "print": [
     "/** Component has direction of child components. */",
     "interface IHasDirection {",
     "    direction?: 'vertical' | 'horizontal';",
     "}"
    ]
   },
   "comment": [
    "Component has direction of child components."
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "direction",
     "typeValue": {
      "raw": "undefined | 'vertical' | 'horizontal'"
     },
     "required": false
    }
   ]
  },
  "IHasForwardedRef": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IHasForwardedRef",
    "nameFull": "IHasForwardedRef<T>"
   },
   "typeValue": {
    "raw": "IHasForwardedRef<T>",
    "print": [
     "interface IHasForwardedRef<T extends HTMLOrSVGElement> {",
     "    /** this ref is passed to the underlying component */",
     "    forwardedRef?: ForwardedRef<T>;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "required": false
    }
   ]
  },
  "IHasIcon": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IHasIcon",
    "nameFull": "IHasIcon"
   },
   "typeValue": {
    "raw": "IHasIcon",
    "print": [
     "interface IHasIcon {",
     "    /** Icon can be an React element (usually an SVG element) */",
     "    icon?: Icon;",
     "    /** Position of the icon (left of right) */",
     "    iconPosition?: 'left' | 'right';",
     "    /** Click handler for the icon */",
     "    onIconClick?(): void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "required": false
    }
   ]
  },
  "IHasLabel": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IHasLabel",
    "nameFull": "IHasLabel"
   },
   "typeValue": {
    "raw": "IHasLabel",
    "print": [
     "/** Component has label. E.g. User Name */",
     "interface IHasLabel {",
     "    /** Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions. */",
     "    label?: any;",
     "}"
    ]
   },
   "comment": [
    "Component has label. E.g. User Name"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "required": false
    }
   ]
  },
  "IHasPlaceholder": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IHasPlaceholder",
    "nameFull": "IHasPlaceholder"
   },
   "typeValue": {
    "raw": "IHasPlaceholder",
    "print": [
     "interface IHasPlaceholder {",
     "    /** Placeholder to display when empty */",
     "    placeholder?: any;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "required": false
    }
   ]
  },
  "IHasRawProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "IHasRawProps",
    "nameFull": "IHasRawProps<T>"
   },
   "typeValue": {
    "raw": "IHasRawProps<T>",
    "print": [
     "type IHasRawProps<T> = {",
     "    /** Any HTML attributes (native or 'data-') to put on the underlying component */",
     "    rawProps?: T & Record<`data-${string}`, string>;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "required": false
    }
   ]
  },
  "IHasTabIndex": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IHasTabIndex",
    "nameFull": "IHasTabIndex"
   },
   "typeValue": {
    "raw": "IHasTabIndex",
    "print": [
     "// TBD: merge with ICanFocus?",
     "interface IHasTabIndex {",
     "    /** Controls the order of keyboard navigation between components */",
     "    tabIndex?: React.HTMLAttributes<HTMLElement>['tabIndex'];",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    }
   ]
  },
  "IHistory4": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IHistory4",
    "nameFull": "IHistory4"
   },
   "typeValue": {
    "raw": "IHistory4",
    "print": [
     "interface IHistory4 {",
     "    location: Link;",
     "    push(link: Link): void;",
     "    replace(link: Link): void;",
     "    createHref(link: Link): string;",
     "    listen(listener: (location: Link) => void): () => void;",
     "    block(listener: (args: any) => any): () => void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "block",
     "typeValue": {
      "raw": "(listener: (args: any) => any) => () => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "createHref",
     "typeValue": {
      "raw": "(link: Link) => string"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "listen",
     "typeValue": {
      "raw": "(listener: (location: Link) => void) => () => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "location",
     "typeValue": {
      "raw": "Link"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "push",
     "typeValue": {
      "raw": "(link: Link) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "replace",
     "typeValue": {
      "raw": "(link: Link) => void"
     },
     "required": true
    }
   ]
  },
  "ILayoutContext": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ILayoutContext",
    "nameFull": "ILayoutContext"
   },
   "typeValue": {
    "raw": "ILayoutContext",
    "print": [
     "interface ILayoutContext {",
     "    getLayer(): LayoutLayer;",
     "    releaseLayer(layer: LayoutLayer): void;",
     "    getPortalRoot(): HTMLElement;",
     "    getPortalRootId(): string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "getLayer",
     "typeValue": {
      "raw": "() => LayoutLayer"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getPortalRoot",
     "typeValue": {
      "raw": "() => HTMLElement"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getPortalRootId",
     "typeValue": {
      "raw": "() => string"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "releaseLayer",
     "typeValue": {
      "raw": "(layer: LayoutLayer) => void"
     },
     "required": true
    }
   ]
  },
  "ILens": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ILens",
    "nameFull": "ILens<TFocused>"
   },
   "typeValue": {
    "raw": "ILens<TFocused>",
    "print": [
     "interface ILens<TFocused> {",
     "    get(): TFocused;",
     "    set(value: TFocused): void;",
     "    update(fn: (current: TFocused) => TFocused): void;",
     "    prop<K extends keyof TFocused>(name: K): ILens<NonNullable<TFocused[K]>>;",
     "    index(index: number): ILens<ArrayElement<TFocused>>;",
     "    onChange(fn: (oldValue: TFocused, newValue: TFocused) => TFocused): ILens<TFocused>;",
     "    default(value: TFocused): ILens<TFocused>;",
     "    toProps(): IEditable<TFocused>;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "default",
     "typeValue": {
      "raw": "(value: TFocused) => ILens<TFocused>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "get",
     "typeValue": {
      "raw": "() => TFocused"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "index",
     "typeValue": {
      "raw": "(index: number) => ArrayElement<TFocused>>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onChange",
     "typeValue": {
      "raw": "(fn: (oldValue: TFocused, newValue: TFocused) => TFocused) => ILens<TFocused>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "prop",
     "typeValue": {
      "raw": "<K extends keyof TFocused>(name: K) => ILens<NonNullable<TFocused[K]>>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "set",
     "typeValue": {
      "raw": "(value: TFocused) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "toProps",
     "typeValue": {
      "raw": "() => IEditable<TFocused>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "update",
     "typeValue": {
      "raw": "(fn: (current: TFocused) => TFocused) => void"
     },
     "required": true
    }
   ]
  },
  "ILockContext": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ILockContext",
    "nameFull": "ILockContext"
   },
   "typeValue": {
    "raw": "ILockContext",
    "print": [
     "interface ILockContext {",
     "    acquire(tryRelease: () => Promise<any>): Promise<object>;",
     "    release(lock: object): void;",
     "    withLock(action: () => Promise<any>): Promise<object>;",
     "    getCurrentLock: () => Lock | null;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "acquire",
     "typeValue": {
      "raw": "(tryRelease: () => Promise<any>) => Promise<object>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "getCurrentLock",
     "typeValue": {
      "raw": "() => Lock | null"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "release",
     "typeValue": {
      "raw": "(lock: object) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "withLock",
     "typeValue": {
      "raw": "(action: () => Promise<any>) => Promise<object>"
     },
     "required": true
    }
   ]
  },
  "IMap": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IMap",
    "nameFull": "IMap<TKey, TValue>"
   },
   "typeValue": {
    "raw": "IMap<TKey, TValue>",
    "print": [
     "interface IMap<TKey, TValue> {",
     "    constructor: Function;",
     "    [Symbol.iterator](): IterableIterator<[",
     "        TKey,",
     "        TValue",
     "    ]>;",
     "    get(key: TKey): TValue;",
     "    set(key: TKey, value: TValue): IMap<TKey, TValue>;",
     "    has(key: TKey): boolean;",
     "    delete(key: TKey): boolean;",
     "    size: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "[Symbol.iterator]",
     "typeValue": {
      "raw": "() => IterableIterator<[TKey, TValue]>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "constructor",
     "typeValue": {
      "raw": "Function"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "delete",
     "typeValue": {
      "raw": "(key: TKey) => boolean"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "get",
     "typeValue": {
      "raw": "(key: TKey) => TValue"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "has",
     "typeValue": {
      "raw": "(key: TKey) => boolean"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "set",
     "typeValue": {
      "raw": "(key: TKey, value: TValue) => IMap<TKey, TValue>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    }
   ]
  },
  "IModal": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IModal",
    "nameFull": "IModal<TResult>"
   },
   "typeValue": {
    "raw": "IModal<TResult>",
    "print": [
     "interface IModal<TResult> {",
     "    isActive: boolean;",
     "    key: string;",
     "    zIndex: number;",
     "    success(result: TResult): void;",
     "    abort(result?: any): void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "abort",
     "typeValue": {
      "raw": "(result?: any) => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "success",
     "typeValue": {
      "raw": "(result: TResult) => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "zIndex",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    }
   ]
  },
  "IModalContext": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IModalContext",
    "nameFull": "IModalContext"
   },
   "typeValue": {
    "raw": "IModalContext",
    "print": [
     "interface IModalContext extends IBaseContext {",
     "    show<TResult, TParameters = {}>(render: (props: IModal<TResult>) => React.ReactNode, parameters?: TParameters): Promise<TResult>;",
     "    closeAll(): void;",
     "    isModalOperationActive(): boolean;",
     "    getOperations(): ModalOperation[];",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "closeAll",
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "destroyContext",
     "typeValue": {
      "raw": "() => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBaseContext",
       "nameFull": "IBaseContext<TState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getOperations",
     "typeValue": {
      "raw": "() => ModalOperation[]"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "isModalOperationActive",
     "typeValue": {
      "raw": "() => boolean"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "show",
     "typeValue": {
      "raw": "<TResult, TParameters = {}>(render: (props: IModal<TResult>) => React.ReactNode, parameters?: TParameters | undefined) => Promise<TResult>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "subscribe",
     "typeValue": {
      "raw": "(handler: (state: TState) => void) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBaseContext",
       "nameFull": "IBaseContext<TState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "unsubscribe",
     "typeValue": {
      "raw": "(handler: (state: TState) => void) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBaseContext",
       "nameFull": "IBaseContext<TState>"
      }
     },
     "required": true
    }
   ]
  },
  "INotification": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "INotification",
    "nameFull": "INotification"
   },
   "typeValue": {
    "raw": "INotification",
    "print": [
     "interface INotification {",
     "    onClose?(): void;",
     "    onSuccess?(): void;",
     "    clearTimer?(): void;",
     "    refreshTimer?(): void;",
     "    id: number;",
     "    key: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "clearTimer",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onSuccess",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "refreshTimer",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "required": false
    }
   ]
  },
  "INotificationContext": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "INotificationContext",
    "nameFull": "INotificationContext"
   },
   "typeValue": {
    "raw": "INotificationContext",
    "print": [
     "interface INotificationContext extends IBaseContext {",
     "    show(render: (props: INotification) => React.ReactNode, notificationParams?: NotificationParams): Promise<void>;",
     "    getNotifications(): NotificationOperation[];",
     "    remove(id: number): void;",
     "    clearAll(): void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "clearAll",
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "destroyContext",
     "typeValue": {
      "raw": "() => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBaseContext",
       "nameFull": "IBaseContext<TState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getNotifications",
     "typeValue": {
      "raw": "() => NotificationOperation[]"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "remove",
     "typeValue": {
      "raw": "(id: number) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "show",
     "typeValue": {
      "raw": "(render: (props: NotificationParams | undefined) => Promise<void>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "subscribe",
     "typeValue": {
      "raw": "(handler: (state: TState) => void) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBaseContext",
       "nameFull": "IBaseContext<TState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "unsubscribe",
     "typeValue": {
      "raw": "(handler: (state: TState) => void) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBaseContext",
       "nameFull": "IBaseContext<TState>"
      }
     },
     "required": true
    }
   ]
  },
  "IPickerToggler": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IPickerToggler",
    "nameFull": "IPickerToggler<TItem, TId>"
   },
   "typeValue": {
    "raw": "IPickerToggler<TItem, TId>",
    "print": [
     "/**",
     " * Component can be used as Toggler control for pickers.",
     " * Only IDropdownToggler implementation is necessary for the picker to function.",
     " * Other props can be implemented for full-featured picker togglers.",
     " */",
     "interface IPickerToggler<TItem = any, TId = any> extends IBasicPickerToggler, Partial<IEditable<string>>, Partial<IHasPlaceholder>, Partial<IDisableable>, Partial<ICanBeInvalid> {",
     "    selection?: DataRowProps<TItem, TId>[];",
     "    selectedRowsCount?: number;",
     "}"
    ]
   },
   "comment": [
    "Component can be used as Toggler control for pickers.",
    " Only IDropdownToggler implementation is necessary for the picker to function.",
    " Other props can be implemented for full-featured picker togglers."
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disables component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBasicPickerToggler",
       "nameFull": "IBasicPickerToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectedRowsCount",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selection",
     "typeValue": {
      "raw": "undefined | DataRowProps<TItem, TId>[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "IPresetsApi": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IPresetsApi",
    "nameFull": "IPresetsApi<TFilter, TViewState>"
   },
   "typeValue": {
    "raw": "IPresetsApi<TFilter, TViewState>",
    "print": [
     "interface IPresetsApi<TFilter = any, TViewState = any> {",
     "    /** ID of selected preset */",
     "    activePresetId: number | null;",
     "    /** Function that selects given preset  */",
     "    choosePreset(preset: ITablePreset<TFilter, TViewState>): void;",
     "    /** Function that gives preset name and create new preset with this name and current table state  */",
     "    createNewPreset(name: string): Promise<number>;",
     "    /** Function that gives preset and return if this preset changed or not  */",
     "    hasPresetChanged(preset: ITablePreset<TFilter, TViewState>): boolean;",
     "    /** Function that gives the preset and creat their duplicate  */",
     "    duplicatePreset(preset: ITablePreset<TFilter, TViewState>): void;",
     "    /** Function that deletes given preset  */",
     "    deletePreset(preset: ITablePreset<TFilter, TViewState>): Promise<void>;",
     "    /** Function that updates given preset  */",
     "    updatePreset(preset: ITablePreset<TFilter, TViewState>): Promise<void>;",
     "    /** Function that gives preset and return URL link on given preset  */",
     "    getPresetLink(preset: ITablePreset<TFilter, TViewState>): string;",
     "    /** Array of presets  */",
     "    presets: ITablePreset<TFilter, TViewState>[];",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "activePresetId",
     "comment": [
      "ID of selected preset"
     ],
     "typeValue": {
      "raw": "null | number"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "choosePreset",
     "comment": [
      "Function that selects given preset"
     ],
     "typeValue": {
      "raw": "(preset: ITablePreset<TFilter, TViewState>) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "createNewPreset",
     "comment": [
      "Function that gives preset name and create new preset with this name and current table state"
     ],
     "typeValue": {
      "raw": "(name: string) => Promise<number>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "deletePreset",
     "comment": [
      "Function that deletes given preset"
     ],
     "typeValue": {
      "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "duplicatePreset",
     "comment": [
      "Function that gives the preset and creat their duplicate"
     ],
     "typeValue": {
      "raw": "(preset: ITablePreset<TFilter, TViewState>) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getPresetLink",
     "comment": [
      "Function that gives preset and return URL link on given preset"
     ],
     "typeValue": {
      "raw": "(preset: ITablePreset<TFilter, TViewState>) => string"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "hasPresetChanged",
     "comment": [
      "Function that gives preset and return if this preset changed or not"
     ],
     "typeValue": {
      "raw": "(preset: ITablePreset<TFilter, TViewState>) => boolean"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "comment": [
      "Array of presets"
     ],
     "typeValue": {
      "raw": "ITablePreset<TFilter, TViewState>[]"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "updatePreset",
     "comment": [
      "Function that updates given preset"
     ],
     "typeValue": {
      "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
     },
     "required": true
    }
   ]
  },
  "IProcessRequest": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "IProcessRequest",
    "nameFull": "IProcessRequest"
   },
   "typeValue": {
    "raw": "IProcessRequest",
    "print": [
     "type IProcessRequest = (url: string, method: string, data?: any, options?: ApiCallOptions) => Promise<any>;"
    ]
   }
  },
  "IRouter6": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "IRouter6",
    "nameFull": "IRouter6"
   },
   "typeValue": {
    "raw": "IRouter6",
    "print": [
     "/**",
     " * From: react-router version 6.14.0",
     " *",
     " * The type definition of the IRouter6 is not complete (It's OK as long as we only use a subset of its API)",
     " *",
     " * NOTE: Complete definitions of the router is located in @remix-run/router:",
     " * https://github.com/remix-run/react-router/blob/main/packages/router/router.ts#L57",
     " */",
     "type IRouter6 = {",
     "    state: RouterState;",
     "    navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;",
     "    navigate(to: number): Promise<void>;",
     "    getBlocker: (key: string, fn: BlockerFunction) => unknown;",
     "    subscribe: (fn: (state: RouterState) => void) => () => void;",
     "    deleteBlocker: (key: string) => void;",
     "    createHref(location: Location | URL): string;",
     "};"
    ]
   },
   "comment": [
    "From: react-router version 6.14.0",
    "",
    " The type definition of the IRouter6 is not complete (It's OK as long as we only use a subset of its API)",
    "",
    " NOTE: Complete definitions of the router is located in @remix-run/router:",
    " https://github.com/remix-run/react-router/blob/main/packages/router/router.ts#L57"
   ],
   "props": [
    {
     "kind": "MethodSignature",
     "name": "createHref",
     "typeValue": {
      "raw": "(location: Location | URL) => string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "deleteBlocker",
     "typeValue": {
      "raw": "(key: string) => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "getBlocker",
     "typeValue": {
      "raw": "(key: string, fn: BlockerFunction) => unknown"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "navigate",
     "typeValue": {
      "raw": "{ (to: To | null, opts?: RouterNavigateOptions | undefined): Promise<void>; (to: number): Promise<void>; }"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "state",
     "typeValue": {
      "raw": "RouterState"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "subscribe",
     "typeValue": {
      "raw": "(fn: (state: RouterState) => void) => () => void"
     },
     "required": true
    }
   ]
  },
  "IRouterContext": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IRouterContext",
    "nameFull": "IRouterContext"
   },
   "typeValue": {
    "raw": "IRouterContext",
    "print": [
     "interface IRouterContext {",
     "    getCurrentLink(): Link;",
     "    redirect(link?: Link | string): void;",
     "    transfer(link: Link): void;",
     "    isActive(link: Link): boolean;",
     "    createHref(link: Link): string;",
     "    listen(listener: (link: Link) => void): () => void;",
     "    block(callback: (link: Link) => void): () => void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "block",
     "typeValue": {
      "raw": "(callback: (link: Link) => void) => () => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "createHref",
     "typeValue": {
      "raw": "(link: Link) => string"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getCurrentLink",
     "typeValue": {
      "raw": "() => Link"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "isActive",
     "typeValue": {
      "raw": "(link: Link) => boolean"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "listen",
     "typeValue": {
      "raw": "(listener: (link: Link) => void) => () => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "redirect",
     "typeValue": {
      "raw": "(link?: string | Link | undefined) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "transfer",
     "typeValue": {
      "raw": "(link: Link) => void"
     },
     "required": true
    }
   ]
  },
  "ISkin": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ISkin",
    "nameFull": "ISkin"
   },
   "typeValue": {
    "raw": "ISkin",
    "print": [
     "interface ISkin {",
     "    Button: ISkinComponent<ButtonCoreProps, ButtonSemanticProps>;",
     "    IconButton: ISkinComponent<ButtonCoreProps>;",
     "    Checkbox: ISkinComponent<CheckboxCoreProps>;",
     "    FlexRow: ISkinComponent<FlexRowProps>;",
     "    FlexCell: ISkinComponent<FlexCellProps>;",
     "    Spinner: ISkinComponent<SpinnerCoreProps>;",
     "    TextInput: ISkinComponent<TextInputCoreProps>;",
     "    ModalWindow: ISkinComponent<ModalWindowProps>;",
     "    ModalBlocker: ISkinComponent<ModalBlockerProps>;",
     "    ModalHeader: ISkinComponent<ModalHeaderCoreProps>;",
     "    ModalFooter: ISkinComponent<ModalFooterCoreProps>;",
     "    LabeledInput: ISkinComponent<LabeledInputCoreProps>;",
     "    DatePicker: ISkinComponent<DatePickerCoreProps>;",
     "    RangeDatePicker: ISkinComponent<RangeDatePickerCoreProps>;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "Button",
     "typeValue": {
      "raw": "ISkinComponent<ButtonSemanticProps>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "Checkbox",
     "typeValue": {
      "raw": "ISkinComponent<CheckboxCoreProps, {}>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "DatePicker",
     "typeValue": {
      "raw": "ISkinComponent<DatePickerCoreProps, {}>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "FlexCell",
     "typeValue": {
      "raw": "ISkinComponent<FlexCellProps, {}>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "FlexRow",
     "typeValue": {
      "raw": "ISkinComponent<FlexRowProps, {}>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "IconButton",
     "typeValue": {
      "raw": "ISkinComponent<ButtonCoreProps, {}>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "LabeledInput",
     "typeValue": {
      "raw": "ISkinComponent<LabeledInputCoreProps, {}>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "ModalBlocker",
     "typeValue": {
      "raw": "ISkinComponent<ModalBlockerProps, {}>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "ModalFooter",
     "typeValue": {
      "raw": "ISkinComponent<ModalFooterCoreProps, {}>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "ModalHeader",
     "typeValue": {
      "raw": "ISkinComponent<ModalHeaderCoreProps, {}>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "ModalWindow",
     "typeValue": {
      "raw": "ISkinComponent<ModalWindowProps, {}>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "RangeDatePicker",
     "typeValue": {
      "raw": "ISkinComponent<RangeDatePickerCoreProps, {}>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "Spinner",
     "typeValue": {
      "raw": "ISkinComponent<SpinnerCoreProps, {}>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "TextInput",
     "typeValue": {
      "raw": "ISkinComponent<TextInputCoreProps, {}>"
     },
     "required": true
    }
   ]
  },
  "ITablePreset": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ITablePreset",
    "nameFull": "ITablePreset<TFilter, TViewState>"
   },
   "typeValue": {
    "raw": "ITablePreset<TFilter, TViewState>",
    "print": [
     "interface ITablePreset<TFilter = any, TViewState = any> {",
     "    name: string;",
     "    id: number | null;",
     "    filter?: TFilter;",
     "    isReadonly?: boolean;",
     "    columnsConfig?: ColumnsConfig;",
     "    filtersConfig?: FiltersConfig;",
     "    sorting?: SortingOption[];",
     "    order?: string;",
     "    viewState?: TViewState;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "columnsConfig",
     "typeValue": {
      "raw": "undefined | ColumnsConfig"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "typeValue": {
      "raw": "undefined | TFilter"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filtersConfig",
     "typeValue": {
      "raw": "undefined | FiltersConfig<any>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "null | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "order",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "typeValue": {
      "raw": "undefined | SortingOption<any>[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "viewState",
     "typeValue": {
      "raw": "undefined | TViewState"
     },
     "required": false
    }
   ]
  },
  "ITableState": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ITableState",
    "nameFull": "ITableState<TFilter, TViewState>"
   },
   "typeValue": {
    "raw": "ITableState<TFilter, TViewState>",
    "print": [
     "interface ITableState<TFilter = Record<string, any>, TViewState = any> extends IPresetsApi<TFilter, TViewState> {",
     "    /** Table state value */",
     "    tableState: DataTableState<TFilter, TViewState>;",
     "    /** Function that updates table state value */",
     "    setTableState(newState: DataTableState<TFilter, TViewState>): void;",
     "    /** Function that updates filter value */",
     "    setFilter(filter: TFilter): void;",
     "    /** Function that updates columns config value */",
     "    setColumnsConfig(columnsConfig: ColumnsConfig): void;",
     "    /** Function that updates filters config value */",
     "    setFiltersConfig(filtersConfig: FiltersConfig): void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "activePresetId",
     "comment": [
      "ID of selected preset"
     ],
     "typeValue": {
      "raw": "null | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPresetsApi",
       "nameFull": "IPresetsApi<TFilter, TViewState>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "choosePreset",
     "comment": [
      "Function that selects given preset"
     ],
     "typeValue": {
      "raw": "(preset: ITablePreset<TFilter, TViewState>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPresetsApi",
       "nameFull": "IPresetsApi<TFilter, TViewState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "createNewPreset",
     "comment": [
      "Function that gives preset name and create new preset with this name and current table state"
     ],
     "typeValue": {
      "raw": "(name: string) => Promise<number>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPresetsApi",
       "nameFull": "IPresetsApi<TFilter, TViewState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "deletePreset",
     "comment": [
      "Function that deletes given preset"
     ],
     "typeValue": {
      "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPresetsApi",
       "nameFull": "IPresetsApi<TFilter, TViewState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "duplicatePreset",
     "comment": [
      "Function that gives the preset and creat their duplicate"
     ],
     "typeValue": {
      "raw": "(preset: ITablePreset<TFilter, TViewState>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPresetsApi",
       "nameFull": "IPresetsApi<TFilter, TViewState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getPresetLink",
     "comment": [
      "Function that gives preset and return URL link on given preset"
     ],
     "typeValue": {
      "raw": "(preset: ITablePreset<TFilter, TViewState>) => string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPresetsApi",
       "nameFull": "IPresetsApi<TFilter, TViewState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "hasPresetChanged",
     "comment": [
      "Function that gives preset and return if this preset changed or not"
     ],
     "typeValue": {
      "raw": "(preset: ITablePreset<TFilter, TViewState>) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPresetsApi",
       "nameFull": "IPresetsApi<TFilter, TViewState>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "comment": [
      "Array of presets"
     ],
     "typeValue": {
      "raw": "ITablePreset<TFilter, TViewState>[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPresetsApi",
       "nameFull": "IPresetsApi<TFilter, TViewState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "setColumnsConfig",
     "comment": [
      "Function that updates columns config value"
     ],
     "typeValue": {
      "raw": "(columnsConfig: ColumnsConfig) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "setFilter",
     "comment": [
      "Function that updates filter value"
     ],
     "typeValue": {
      "raw": "(filter: TFilter) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "setFiltersConfig",
     "comment": [
      "Function that updates filters config value"
     ],
     "typeValue": {
      "raw": "(filtersConfig: FiltersConfig<any>) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "setTableState",
     "comment": [
      "Function that updates table state value"
     ],
     "typeValue": {
      "raw": "(newState: DataTableState<TFilter, TViewState>) => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "tableState",
     "comment": [
      "Table state value"
     ],
     "typeValue": {
      "raw": "DataTableState<TFilter, TViewState>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "updatePreset",
     "comment": [
      "Function that updates given preset"
     ],
     "typeValue": {
      "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPresetsApi",
       "nameFull": "IPresetsApi<TFilter, TViewState>"
      }
     },
     "required": true
    }
   ]
  },
  "ItemsComparator": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ItemsComparator",
    "nameFull": "ItemsComparator<TItem>"
   },
   "typeValue": {
    "raw": "ItemsComparator<TItem>",
    "print": [
     "type ItemsComparator<TItem> = (newItem: TItem, existingItem: TItem) => number;"
    ]
   }
  },
  "ITree": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ITree",
    "nameFull": "ITree<TItem, TId>"
   },
   "typeValue": {
    "raw": "ITree<TItem, TId>",
    "print": [
     "interface ITree<TItem, TId> {",
     "    clearStructure(): ITree<TItem, TId>;",
     "    getRootIds(): TId[];",
     "    getRootItems(): TItem[];",
     "    getById(id: TId): TItem | typeof NOT_FOUND_RECORD;",
     "    getChildren(item: TItem): TItem[];",
     "    getChildrenByParentId(parentId: TId): TItem[];",
     "    getChildrenIdsByParentId(parentId: TId): TId[];",
     "    getParentIdsRecursive(id: TId): TId[];",
     "    getParents(id: TId): TItem[];",
     "    getPathById(id: TId): DataRowPathItem<TId, TItem>[];",
     "    getPathItem(item: TItem): DataRowPathItem<TId, TItem>;",
     "    getNodeInfo(id: TId): TreeNodeInfo;",
     "    isFlatList(): boolean;",
     "    patch(items: TItem[], isDeletedProp?: keyof TItem, comparator?: ItemsComparator<TItem>): ITree<TItem, TId>;",
     "    cascadeSelection(currentSelection: TId[], selectedId: TId | undefined, isSelected: boolean, options?: {",
     "        isSelectable?: (item: TItem) => boolean;",
     "        cascade?: CascadeSelection;",
     "    }): TId[];",
     "    load<TFilter>(options: LoadTreeOptions<TItem, TId, TFilter>, value: Readonly<DataSourceState>, withNestedChildren?: boolean): Promise<ITree<TItem, TId>>;",
     "    loadMissing<TFilter>(options: LoadTreeOptions<TItem, TId, TFilter>, value: Readonly<DataSourceState>): Promise<ITree<TItem, TId>>;",
     "    loadMissingIdsAndParents<TFilter>(options: LoadTreeOptions<TItem, TId, TFilter>, idsToLoad: TId[]): Promise<ITree<TItem, TId>>;",
     "    getTotalRecursiveCount(): number;",
     "    forEach(action: (item: TItem, id: TId, parentId: TId, stop: () => void) => void, options?: {",
     "        direction?: 'bottom-up' | 'top-down';",
     "        parentId?: TId;",
     "        includeParent?: boolean;",
     "    }): void;",
     "    computeSubtotals<TSubtotals>(get: (item: TItem, hasChildren: boolean) => TSubtotals, add: (a: TSubtotals, b: TSubtotals) => TSubtotals): CompositeKeysMap<TId | undefined, TSubtotals> | Map<TId | undefined, TSubtotals>;",
     "    filter<TFilter>(options: ApplyFilterOptions<TItem, TId, TFilter>): ITree<TItem, TId>;",
     "    search<TFilter>(options: ApplySearchOptions<TItem, TId, TFilter>): ITree<TItem, TId>;",
     "    sort<TFilter>(options: ApplySortOptions<TItem, TId, TFilter>): ITree<TItem, TId>;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "cascadeSelection",
     "typeValue": {
      "raw": "(currentSelection: TId[], selectedId: TId | undefined, isSelected: boolean, options?: { isSelectable?: ((item: TItem) => boolean) | undefined; cascade?: CascadeSelection | undefined; } | undefined) => TId[]"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "clearStructure",
     "typeValue": {
      "raw": "() => ITree<TItem, TId>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "computeSubtotals",
     "typeValue": {
      "raw": "<TSubtotals>(get: (item: TItem, hasChildren: boolean) => TSubtotals, add: (a: TSubtotals, b: TSubtotals) => TSubtotals) => CompositeKeysMap<TId | undefined, TSubtotals> | Map<TId | undefined, TSubtotals>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "typeValue": {
      "raw": "<TFilter>(options: ITree<TItem, TId>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "forEach",
     "typeValue": {
      "raw": "(action: (item: TItem, id: TId, parentId: TId, stop: () => void) => void, options?: { direction?: 'bottom-up' | 'top-down' | undefined; parentId?: TId | undefined; includeParent?: boolean | undefined; } | undefined) => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getById",
     "typeValue": {
      "raw": "(id: TId) => TItem | typeof NOT_FOUND_RECORD"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getChildren",
     "typeValue": {
      "raw": "(item: TItem) => TItem[]"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getChildrenByParentId",
     "typeValue": {
      "raw": "(parentId: TId) => TItem[]"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getChildrenIdsByParentId",
     "typeValue": {
      "raw": "(parentId: TId) => TId[]"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getNodeInfo",
     "typeValue": {
      "raw": "(id: TId) => TreeNodeInfo"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getParentIdsRecursive",
     "typeValue": {
      "raw": "(id: TId) => TId[]"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getParents",
     "typeValue": {
      "raw": "(id: TId) => TItem[]"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getPathById",
     "typeValue": {
      "raw": "(id: TId) => DataRowPathItem<TId, TItem>[]"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getPathItem",
     "typeValue": {
      "raw": "(item: TItem) => DataRowPathItem<TId, TItem>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getRootIds",
     "typeValue": {
      "raw": "() => TId[]"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getRootItems",
     "typeValue": {
      "raw": "() => TItem[]"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getTotalRecursiveCount",
     "typeValue": {
      "raw": "() => number"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "isFlatList",
     "typeValue": {
      "raw": "() => boolean"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "load",
     "typeValue": {
      "raw": "<TFilter>(options: ITree<TItem, TId>>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "loadMissing",
     "typeValue": {
      "raw": "<TFilter>(options: ITree<TItem, TId>>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "loadMissingIdsAndParents",
     "typeValue": {
      "raw": "<TFilter>(options: ITree<TItem, TId>>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "patch",
     "typeValue": {
      "raw": "(items: TItem[], isDeletedProp?: keyof TItem | undefined, comparator?: ITree<TItem, TId>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "search",
     "typeValue": {
      "raw": "<TFilter>(options: ITree<TItem, TId>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "sort",
     "typeValue": {
      "raw": "<TFilter>(options: ITree<TItem, TId>"
     },
     "required": true
    }
   ]
  },
  "IUserSettingsContext": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IUserSettingsContext",
    "nameFull": "IUserSettingsContext"
   },
   "typeValue": {
    "raw": "IUserSettingsContext",
    "print": [
     "interface IUserSettingsContext {",
     "    get<TValue>(key: any, initial?: TValue): TValue;",
     "    set<TValue>(key: any, value: TValue): void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "get",
     "typeValue": {
      "raw": "<TValue>(key: any, initial?: TValue | undefined) => TValue"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "set",
     "typeValue": {
      "raw": "<TValue>(key: any, value: TValue) => void"
     },
     "required": true
    }
   ]
  },
  "LabeledInputCoreProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "LabeledInputCoreProps",
    "nameFull": "LabeledInputCoreProps"
   },
   "typeValue": {
    "raw": "LabeledInputCoreProps",
    "print": [
     "interface LabeledInputCoreProps extends ICanBeInvalid, IHasCX, IHasLabel, IHasChildren, ICanBeRequired, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "    /** Position of the label, relative to the wrapped component (top of left) */",
     "    labelPosition?: 'top' | 'left';",
     "    /** Info hint text to show in tooltip */",
     "    info?: ReactNode;",
     "    /** Marks related field as optional */",
     "    isOptional?: boolean;",
     "    /** HTML 'for' tag to bind the label to a component.",
     "     * Can be used when component can't be wrapped by the LabeledInput, e.g. when form is layed out as table with labels and inputs placed into different columns",
     "     */",
     "    htmlFor?: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "htmlFor",
     "comment": [
      "HTML 'for' tag to bind the label to a component.",
      " Can be used when component can't be wrapped by the LabeledInput, e.g. when form is layed out as table with labels and inputs placed into different columns"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "info",
     "comment": [
      "Info hint text to show in tooltip"
     ],
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOptional",
     "comment": [
      "Marks related field as optional"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasLabel",
       "nameFull": "IHasLabel"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "labelPosition",
     "comment": [
      "Position of the label, relative to the wrapped component (top of left)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'top'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    }
   ]
  },
  "LayoutLayer": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "LayoutLayer",
    "nameFull": "LayoutLayer"
   },
   "typeValue": {
    "raw": "LayoutLayer",
    "print": [
     "interface LayoutLayer {",
     "    id: number;",
     "    depth: number;",
     "    zIndex: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "depth",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "zIndex",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    }
   ]
  },
  "LazyDataSourceApi": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "LazyDataSourceApi",
    "nameFull": "LazyDataSourceApi<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "LazyDataSourceApi<TItem, TId, TFilter>",
    "print": [
     "/** Defines API to retrieve data for DataSources */",
     "type LazyDataSourceApi<TItem, TId, TFilter> = (request: LazyDataSourceApiRequest<TItem, TId, TFilter>, context?: LazyDataSourceApiRequestContext<TItem, TId>) => Promise<LazyDataSourceApiResponse<TItem>>;"
    ]
   },
   "comment": [
    "Defines API to retrieve data for DataSources"
   ]
  },
  "LazyDataSourceApiRequest": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "LazyDataSourceApiRequest",
    "nameFull": "LazyDataSourceApiRequest<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "LazyDataSourceApiRequest<TItem, TId, TFilter>",
    "print": [
     "/** Defines input arguments for Lazy Data Source APIs */",
     "interface LazyDataSourceApiRequest<TItem, TId = any, TFilter = {}> extends LazyDataSourceApiRequestOptions<TItem, TFilter> {",
     "    range?: LazyDataSourceApiRequestRange;",
     "    page?: number;",
     "    pageSize?: number;",
     "    ids?: TId[];",
     "}"
    ]
   },
   "comment": [
    "Defines input arguments for Lazy Data Source APIs"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "filter",
     "typeValue": {
      "raw": "undefined | TFilter"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "LazyDataSourceApiRequestOptions",
       "nameFull": "LazyDataSourceApiRequestOptions<TItem, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ids",
     "typeValue": {
      "raw": "undefined | TId[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "page",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "pageSize",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "range",
     "typeValue": {
      "raw": "undefined | LazyDataSourceApiRequestRange"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "LazyDataSourceApiRequestOptions",
       "nameFull": "LazyDataSourceApiRequestOptions<TItem, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "typeValue": {
      "raw": "undefined | SortingOption<any>[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "LazyDataSourceApiRequestOptions",
       "nameFull": "LazyDataSourceApiRequestOptions<TItem, TFilter>"
      }
     },
     "required": false
    }
   ]
  },
  "LazyDataSourceApiRequestContext": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "LazyDataSourceApiRequestContext",
    "nameFull": "LazyDataSourceApiRequestContext<TItem, TId>"
   },
   "typeValue": {
    "raw": "LazyDataSourceApiRequestContext<TItem, TId>",
    "print": [
     "/** Defines the context of API request. E.g. parent if we require to retrieve sub-list of the tree */",
     "interface LazyDataSourceApiRequestContext<TItem, TId> {",
     "    parentId?: TId | null;",
     "    parent?: TItem | null;",
     "}"
    ]
   },
   "comment": [
    "Defines the context of API request. E.g. parent if we require to retrieve sub-list of the tree"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "parent",
     "typeValue": {
      "raw": "undefined | null | TItem"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "parentId",
     "typeValue": {
      "raw": "undefined | null | TId"
     },
     "required": false
    }
   ]
  },
  "LazyDataSourceApiRequestOptions": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "LazyDataSourceApiRequestOptions",
    "nameFull": "LazyDataSourceApiRequestOptions<TItem, TFilter>"
   },
   "typeValue": {
    "raw": "LazyDataSourceApiRequestOptions<TItem, TFilter>",
    "print": [
     "// Lazy Data Source API",
     "/** The common part of LazyDataSourceApiRequest, which defines how list should be filtered and sorted */",
     "// eslint-disable-next-line @typescript-eslint/no-unused-vars",
     "interface LazyDataSourceApiRequestOptions<TItem, TFilter> {",
     "    filter?: TFilter;",
     "    sorting?: SortingOption[];",
     "    search?: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "filter",
     "typeValue": {
      "raw": "undefined | TFilter"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "typeValue": {
      "raw": "undefined | SortingOption<any>[]"
     },
     "required": false
    }
   ]
  },
  "LazyDataSourceApiRequestRange": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "LazyDataSourceApiRequestRange",
    "nameFull": "LazyDataSourceApiRequestRange"
   },
   "typeValue": {
    "raw": "LazyDataSourceApiRequestRange",
    "print": [
     "/** The range (from/count) of required rows for LazyDataSourceApiRequest */",
     "interface LazyDataSourceApiRequestRange {",
     "    from: number;",
     "    count?: number;",
     "}"
    ]
   },
   "comment": [
    "The range (from/count) of required rows for LazyDataSourceApiRequest"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "count",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "from",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    }
   ]
  },
  "LazyDataSourceApiResponse": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "LazyDataSourceApiResponse",
    "nameFull": "LazyDataSourceApiResponse<TItem>"
   },
   "typeValue": {
    "raw": "LazyDataSourceApiResponse<TItem>",
    "print": [
     "/** Defines Lazy Data Source APIs response shape */",
     "interface LazyDataSourceApiResponse<TItem> {",
     "    /** List of items which was requested via API */",
     "    items: TItem[];",
     "    /**",
     "     * API can set 'from' field if it wants to return more items than what was requested in request.range.",
     "     * This can be used to return all items at once (with from:0, count: totalCount), or align response to pages.",
     "     */",
     "    from?: number;",
     "    /** Total count of items which match current filter. If not specified, total count will be detected only when user scrolls to the end of the list. */",
     "    count?: number;",
     "}"
    ]
   },
   "comment": [
    "Defines Lazy Data Source APIs response shape"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "count",
     "comment": [
      "Total count of items which match current filter. If not specified, total count will be detected only when user scrolls to the end of the list."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "from",
     "comment": [
      "API can set 'from' field if it wants to return more items than what was requested in request.range.",
      " This can be used to return all items at once (with from:0, count: totalCount), or align response to pages."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "comment": [
      "List of items which was requested via API"
     ],
     "typeValue": {
      "raw": "TItem[]"
     },
     "required": true
    }
   ]
  },
  "LazyDataSourceProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "LazyDataSourceProps",
    "nameFull": "LazyDataSourceProps<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "LazyDataSourceProps<TItem, TId, TFilter>",
    "print": [
     "interface LazyDataSourceProps<TItem, TId, TFilter> extends LazyListViewProps<TItem, TId, TFilter> {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "api",
     "comment": [
      "A function to retrieve the data, asynchronously.",
      " This function usually performs a REST API call.",
      " API is used to retrieve lists of items.",
      " It is expected to:",
      " - be able to handle paging (via from/count params)",
      " - be able to retrieve specific items by the list of their ids",
      " - be able to retrieve children by parents (when getChildCount is specified, and ctx.parentId is passed)"
     ],
     "typeValue": {
      "raw": "LazyDataSourceApi<TItem, TId, TFilter>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "LazyListViewProps",
       "nameFull": "LazyListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "backgroundReload",
     "comment": [
      "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
      " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
      " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
      " It is required to add blockers/spinners to the components, built on your own.",
      " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'implicit' | 'explicit'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "complexIds",
     "comment": [
      "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
      " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fetchStrategy",
     "comment": [
      "Defines how to fetch children:",
      " sequential (default) - fetch children for each parent one-by-one. Makes minimal over-querying, at cost of some speed.",
      " parallel - fetch children for several parents simultaneously. Can make a lot of over-querying for deep trees.",
      "      Recommended for 2 level trees (grouping), as it makes no over-querying in this case, and is faster than sequential strategy."
     ],
     "typeValue": {
      "raw": "undefined | 'sequential' | 'parallel'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "LazyListViewProps",
       "nameFull": "LazyListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "comment": [
      "A filter to pass to API.",
      " Note, that the DataSourceState also has a filter fields. These two filters are merged before API calls.",
      " Use this prop if you need to apply some filter in any case.",
      " Prefer to use filter in the DataSourceState for end-user editable filters."
     ],
     "typeValue": {
      "raw": "undefined | TFilter"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "LazyListViewProps",
       "nameFull": "LazyListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "flattenSearchResults",
     "comment": [
      "Falls back to plain list from tree, if there's search.",
      " Default is true.",
      "",
      " If enabled, and search is active:",
      " - API will be called with parentId and parent undefined",
      " - getChildCount is ignored, all nodes are assumed to have no children",
      "",
      " See more here: https://github.com/epam/UUI/issues/8"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "LazyListViewProps",
       "nameFull": "LazyListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getChildCount",
     "comment": [
      "Should return number of children of the item.",
      " If it returns > 0, the item is assumed to have children and to be foldable.",
      " Usually, this value should be returned from API.",
      "",
      " If you can't get number of children via API, you can return a guess value (avg number of children for this type of entity).",
      " Note, that this can lead to more API calls, and increased load times in the 'parallel' fetch mode.",
      " @param item"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "LazyListViewProps",
       "nameFull": "LazyListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "comment": [
      "Should return unique ID of the TItem",
      " If omitted, we assume that every TItem has and unique id in its 'id' field.",
      " @param item An item to get ID of"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => TId"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getParentId",
     "comment": [
      "Should return ID of the Item's parent. Usually it's i => i.parentId.",
      " If specified, Data Source will build items hierarchy.",
      "",
      " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
      " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
      "   to highlight parents with selected children",
      " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
      "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => TId | undefined"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getRowOptions",
     "comment": [
      "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
      " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
      " See DataRowOptions for more details.",
      " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "Can be specified to unfold all or some items at start.",
      " If not specified, all rows would be folded."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "legacyLoadDataBehavior",
     "comment": [
      "This options is added for the purpose of supporting legacy behavior of fetching data",
      " on `getVisibleRows` and `getListProps`, not to break users' own implementation of dataSources.",
      " @default true"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "LazyListViewProps",
       "nameFull": "LazyListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowOptions",
     "comment": [
      "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
      " See DataRowOptions for more details.",
      " If options depends on the item itself, use getRowOptions.",
      " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "typeValue": {
      "raw": "undefined | DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "comment": [
      "Enables or disables \"select all\" checkbox. Default is true."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    }
   ]
  },
  "LazyListViewProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "LazyListViewProps",
    "nameFull": "LazyListViewProps<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "LazyListViewProps<TItem, TId, TFilter>",
    "print": [
     "interface LazyListViewProps<TItem, TId, TFilter> extends BaseListViewProps<TItem, TId, TFilter> {",
     "    /**",
     "     * A function to retrieve the data, asynchronously.",
     "     * This function usually performs a REST API call.",
     "     * API is used to retrieve lists of items.",
     "     * It is expected to:",
     "     * - be able to handle paging (via from/count params)",
     "     * - be able to retrieve specific items by the list of their ids",
     "     * - be able to retrieve children by parents (when getChildCount is specified, and ctx.parentId is passed)",
     "     */",
     "    api: LazyDataSourceApi<TItem, TId, TFilter>;",
     "    /**",
     "     * Should return number of children of the item.",
     "     * If it returns > 0, the item is assumed to have children and to be foldable.",
     "     * Usually, this value should be returned from API.",
     "     *",
     "     * If you can't get number of children via API, you can return a guess value (avg number of children for this type of entity).",
     "     * Note, that this can lead to more API calls, and increased load times in the 'parallel' fetch mode.",
     "     * @param item",
     "     */",
     "    getChildCount?(item: TItem): number;",
     "    /**",
     "     * A filter to pass to API.",
     "     * Note, that the DataSourceState also has a filter fields. These two filters are merged before API calls.",
     "     * Use this prop if you need to apply some filter in any case.",
     "     * Prefer to use filter in the DataSourceState for end-user editable filters.",
     "     */",
     "    filter?: TFilter;",
     "    /**",
     "     * Defines how to fetch children:",
     "     * sequential (default) - fetch children for each parent one-by-one. Makes minimal over-querying, at cost of some speed.",
     "     * parallel - fetch children for several parents simultaneously. Can make a lot of over-querying for deep trees.",
     "     *      Recommended for 2 level trees (grouping), as it makes no over-querying in this case, and is faster than sequential strategy.",
     "     */",
     "    fetchStrategy?: 'sequential' | 'parallel';",
     "    /**",
     "     * Falls back to plain list from tree, if there's search.",
     "     * Default is true.",
     "     *",
     "     * If enabled, and search is active:",
     "     * - API will be called with parentId and parent undefined",
     "     * - getChildCount is ignored, all nodes are assumed to have no children",
     "     *",
     "     * See more here: https://github.com/epam/UUI/issues/8",
     "     */",
     "    flattenSearchResults?: boolean;",
     "    /**",
     "     * This options is added for the purpose of supporting legacy behavior of fetching data",
     "     * on `getVisibleRows` and `getListProps`, not to break users' own implementation of dataSources.",
     "     * @default true",
     "     */",
     "    legacyLoadDataBehavior?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "api",
     "comment": [
      "A function to retrieve the data, asynchronously.",
      " This function usually performs a REST API call.",
      " API is used to retrieve lists of items.",
      " It is expected to:",
      " - be able to handle paging (via from/count params)",
      " - be able to retrieve specific items by the list of their ids",
      " - be able to retrieve children by parents (when getChildCount is specified, and ctx.parentId is passed)"
     ],
     "typeValue": {
      "raw": "LazyDataSourceApi<TItem, TId, TFilter>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "backgroundReload",
     "comment": [
      "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
      " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
      " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
      " It is required to add blockers/spinners to the components, built on your own.",
      " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'implicit' | 'explicit'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "complexIds",
     "comment": [
      "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
      " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fetchStrategy",
     "comment": [
      "Defines how to fetch children:",
      " sequential (default) - fetch children for each parent one-by-one. Makes minimal over-querying, at cost of some speed.",
      " parallel - fetch children for several parents simultaneously. Can make a lot of over-querying for deep trees.",
      "      Recommended for 2 level trees (grouping), as it makes no over-querying in this case, and is faster than sequential strategy."
     ],
     "typeValue": {
      "raw": "undefined | 'sequential' | 'parallel'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "comment": [
      "A filter to pass to API.",
      " Note, that the DataSourceState also has a filter fields. These two filters are merged before API calls.",
      " Use this prop if you need to apply some filter in any case.",
      " Prefer to use filter in the DataSourceState for end-user editable filters."
     ],
     "typeValue": {
      "raw": "undefined | TFilter"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "flattenSearchResults",
     "comment": [
      "Falls back to plain list from tree, if there's search.",
      " Default is true.",
      "",
      " If enabled, and search is active:",
      " - API will be called with parentId and parent undefined",
      " - getChildCount is ignored, all nodes are assumed to have no children",
      "",
      " See more here: https://github.com/epam/UUI/issues/8"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getChildCount",
     "comment": [
      "Should return number of children of the item.",
      " If it returns > 0, the item is assumed to have children and to be foldable.",
      " Usually, this value should be returned from API.",
      "",
      " If you can't get number of children via API, you can return a guess value (avg number of children for this type of entity).",
      " Note, that this can lead to more API calls, and increased load times in the 'parallel' fetch mode.",
      " @param item"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => number"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "comment": [
      "Should return unique ID of the TItem",
      " If omitted, we assume that every TItem has and unique id in its 'id' field.",
      " @param item An item to get ID of"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => TId"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getParentId",
     "comment": [
      "Should return ID of the Item's parent. Usually it's i => i.parentId.",
      " If specified, Data Source will build items hierarchy.",
      "",
      " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
      " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
      "   to highlight parents with selected children",
      " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
      "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => TId | undefined"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getRowOptions",
     "comment": [
      "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
      " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
      " See DataRowOptions for more details.",
      " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "Can be specified to unfold all or some items at start.",
      " If not specified, all rows would be folded."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "legacyLoadDataBehavior",
     "comment": [
      "This options is added for the purpose of supporting legacy behavior of fetching data",
      " on `getVisibleRows` and `getListProps`, not to break users' own implementation of dataSources.",
      " @default true"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowOptions",
     "comment": [
      "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
      " See DataRowOptions for more details.",
      " If options depends on the item itself, use getRowOptions.",
      " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "typeValue": {
      "raw": "undefined | DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "comment": [
      "Enables or disables \"select all\" checkbox. Default is true."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseListViewProps",
       "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    }
   ]
  },
  "LazyLoadedMapLoadCallback": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "LazyLoadedMapLoadCallback",
    "nameFull": "LazyLoadedMapLoadCallback<TKey, TValue>"
   },
   "typeValue": {
    "raw": "LazyLoadedMapLoadCallback<TKey, TValue>",
    "print": [
     "/**",
     " * An callback to pass to LazyLoadedMap constructor",
     " */",
     "type LazyLoadedMapLoadCallback<TKey, TValue> = (pending: TKey[]) => Promise<[",
     "    TKey,",
     "    TValue",
     "][]>;"
    ]
   },
   "comment": [
    "An callback to pass to LazyLoadedMap constructor"
   ]
  },
  "Link": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "Link",
    "nameFull": "Link"
   },
   "typeValue": {
    "raw": "Link",
    "print": [
     "// Defines location within SPA application",
     "interface Link {",
     "    pathname: string;",
     "    query?: any;",
     "    search?: string;",
     "    key?: string;",
     "    hash?: string;",
     "    state?: any;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "hash",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "pathname",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "query",
     "typeValue": {
      "raw": "any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "state",
     "typeValue": {
      "raw": "any"
     },
     "required": false
    }
   ]
  },
  "ListApiResponse": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ListApiResponse",
    "nameFull": "ListApiResponse<TItem>"
   },
   "typeValue": {
    "raw": "ListApiResponse<TItem>",
    "print": [
     "interface ListApiResponse<TItem> {",
     "    /** Items according to the request. For items that are not fetched yet, null will be returned. */",
     "    items: TItem[];",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "items",
     "comment": [
      "Items according to the request. For items that are not fetched yet, null will be returned."
     ],
     "typeValue": {
      "raw": "TItem[]"
     },
     "required": true
    }
   ]
  },
  "ListApiSettings": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ListApiSettings",
    "nameFull": "ListApiSettings<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "ListApiSettings<TItem, TId, TFilter>",
    "print": [
     "interface ListApiSettings<TItem, TId, TFilter> {",
     "    /** Lazy List API used to fetch items */",
     "    api: LazyDataSourceApi<TItem, TId, TFilter>;",
     "    /** Get ID from an item. Id is expected to be value-type, i.e. can be used as Map's key */",
     "    getId: (item: TItem) => TId;",
     "    /** Will be called after new data is fetched into the list */",
     "    onUpdate?: () => void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "api",
     "comment": [
      "Lazy List API used to fetch items"
     ],
     "typeValue": {
      "raw": "LazyDataSourceApi<TItem, TId, TFilter>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "getId",
     "comment": [
      "Get ID from an item. Id is expected to be value-type, i.e. can be used as Map's key"
     ],
     "typeValue": {
      "raw": "(item: TItem) => TId"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "onUpdate",
     "comment": [
      "Will be called after new data is fetched into the list"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "required": false
    }
   ]
  },
  "LoadingStatus": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "LoadingStatus",
    "nameFull": "LoadingStatus"
   },
   "typeValue": {
    "raw": "typeof UNKNOWN | typeof LOADING | typeof PENDING | typeof LOADED | typeof FAILED",
    "print": [
     "type LoadingStatus = typeof UNKNOWN | typeof LOADING | typeof PENDING | typeof LOADED | typeof FAILED;"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "[Symbol.toPrimitive]",
     "typeValue": {
      "raw": "(hint: string) => symbol"
     },
     "from": {
      "typeName": {
       "name": "Symbol",
       "nameFull": "Symbol"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "[Symbol.toStringTag]",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "typeName": {
       "name": "Symbol",
       "nameFull": "Symbol"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "description",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "Symbol",
       "nameFull": "Symbol"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "toString",
     "typeValue": {
      "raw": "() => string"
     },
     "from": {
      "typeName": {
       "name": "Symbol",
       "nameFull": "Symbol"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "valueOf",
     "typeValue": {
      "raw": "() => symbol"
     },
     "from": {
      "typeName": {
       "name": "Symbol",
       "nameFull": "Symbol"
      }
     },
     "required": true
    }
   ]
  },
  "LoadTreeOptions": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "LoadTreeOptions",
    "nameFull": "LoadTreeOptions<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "LoadTreeOptions<TItem, TId, TFilter>",
    "print": [
     "interface LoadTreeOptions<TItem, TId, TFilter> extends Pick<LazyListViewProps<TItem, TId, TFilter>, 'api' | 'getChildCount' | 'filter' | 'fetchStrategy' | 'flattenSearchResults'> {",
     "    loadAllChildren?(id: TId): boolean;",
     "    isFolded?: (item: TItem) => boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "api",
     "comment": [
      "A function to retrieve the data, asynchronously.",
      " This function usually performs a REST API call.",
      " API is used to retrieve lists of items.",
      " It is expected to:",
      " - be able to handle paging (via from/count params)",
      " - be able to retrieve specific items by the list of their ids",
      " - be able to retrieve children by parents (when getChildCount is specified, and ctx.parentId is passed)"
     ],
     "typeValue": {
      "raw": "LazyDataSourceApi<TItem, TId, TFilter>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "LazyListViewProps",
       "nameFull": "LazyListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "fetchStrategy",
     "comment": [
      "Defines how to fetch children:",
      " sequential (default) - fetch children for each parent one-by-one. Makes minimal over-querying, at cost of some speed.",
      " parallel - fetch children for several parents simultaneously. Can make a lot of over-querying for deep trees.",
      "      Recommended for 2 level trees (grouping), as it makes no over-querying in this case, and is faster than sequential strategy."
     ],
     "typeValue": {
      "raw": "undefined | 'sequential' | 'parallel'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "LazyListViewProps",
       "nameFull": "LazyListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "comment": [
      "A filter to pass to API.",
      " Note, that the DataSourceState also has a filter fields. These two filters are merged before API calls.",
      " Use this prop if you need to apply some filter in any case.",
      " Prefer to use filter in the DataSourceState for end-user editable filters."
     ],
     "typeValue": {
      "raw": "undefined | TFilter"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "LazyListViewProps",
       "nameFull": "LazyListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "flattenSearchResults",
     "comment": [
      "Falls back to plain list from tree, if there's search.",
      " Default is true.",
      "",
      " If enabled, and search is active:",
      " - API will be called with parentId and parent undefined",
      " - getChildCount is ignored, all nodes are assumed to have no children",
      "",
      " See more here: https://github.com/epam/UUI/issues/8"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "LazyListViewProps",
       "nameFull": "LazyListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getChildCount",
     "comment": [
      "Should return number of children of the item.",
      " If it returns > 0, the item is assumed to have children and to be foldable.",
      " Usually, this value should be returned from API.",
      "",
      " If you can't get number of children via API, you can return a guess value (avg number of children for this type of entity).",
      " Note, that this can lead to more API calls, and increased load times in the 'parallel' fetch mode.",
      " @param item"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "LazyListViewProps",
       "nameFull": "LazyListViewProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFolded",
     "typeValue": {
      "raw": "undefined | (item: TItem) => boolean"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "loadAllChildren",
     "typeValue": {
      "raw": "undefined | (id: TId) => boolean"
     },
     "required": false
    }
   ]
  },
  "Metadata": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "Metadata",
    "nameFull": "Metadata<T>"
   },
   "typeValue": {
    "raw": "Metadata<T>",
    "print": [
     "interface Metadata<T> extends IDisableable, ICanBeReadonly, ICanBeRequired {",
     "    props?: {",
     "        [P in keyof T]?: Metadata<T[P]>;",
     "    };",
     "    all?: Metadata<ElementType<T>>;",
     "    minValue?: number;",
     "    maxValue?: number;",
     "    maxLength?: number;",
     "    validators?: CustomValidator<T>[];",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "all",
     "typeValue": {
      "raw": "undefined | Metadata<ElementType<T>>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxValue",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "minValue",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "props",
     "typeValue": {
      "raw": "undefined | { [P in keyof T]?: Metadata<T[P]> | undefined; }"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validators",
     "typeValue": {
      "raw": "undefined | CustomValidator<T>[]"
     },
     "required": false
    }
   ]
  },
  "ModalBlockerProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ModalBlockerProps",
    "nameFull": "ModalBlockerProps"
   },
   "typeValue": {
    "raw": "ModalBlockerProps",
    "print": [
     "interface ModalBlockerProps extends IModal<any>, IHasCX, IHasChildren, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "    disableFocusLock?: boolean;",
     "    disableCloseByEsc?: boolean;",
     "    disallowClickOutside?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "abort",
     "typeValue": {
      "raw": "(result?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disableCloseByEsc",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disableFocusLock",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disallowClickOutside",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "success",
     "typeValue": {
      "raw": "(result: TResult) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "zIndex",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    }
   ]
  },
  "ModalComponentProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ModalComponentProps",
    "nameFull": "ModalComponentProps<TParameters, TResult>"
   },
   "typeValue": {
    "raw": "ModalComponentProps<TParameters, TResult>",
    "print": [
     "interface ModalComponentProps<TParameters, TResult> {",
     "    parameters?: TParameters;",
     "    isActive: boolean;",
     "    depth: number;",
     "    zIndex: number;",
     "    key: string;",
     "    success(result: TResult): void;",
     "    abort(result?: any): void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "abort",
     "typeValue": {
      "raw": "(result?: any) => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "depth",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "parameters",
     "typeValue": {
      "raw": "undefined | TParameters"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "success",
     "typeValue": {
      "raw": "(result: TResult) => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "zIndex",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    }
   ]
  },
  "ModalFooterCoreProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ModalFooterCoreProps",
    "nameFull": "ModalFooterCoreProps"
   },
   "typeValue": {
    "raw": "ModalFooterCoreProps",
    "print": [
     "interface ModalFooterCoreProps extends IHasChildren, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
     "    borderTop?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "borderTop",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    }
   ]
  },
  "ModalHeaderCoreProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ModalHeaderCoreProps",
    "nameFull": "ModalHeaderCoreProps"
   },
   "typeValue": {
    "raw": "ModalHeaderCoreProps",
    "print": [
     "interface ModalHeaderCoreProps extends IHasChildren, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
     "    onClose?: () => any;",
     "    title?: React.ReactNode;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "title",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "required": false
    }
   ]
  },
  "ModalOperation": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ModalOperation",
    "nameFull": "ModalOperation"
   },
   "typeValue": {
    "raw": "ModalOperation",
    "print": [
     "interface ModalOperation {",
     "    component?: React.ComponentType<any>;",
     "    props: ModalComponentProps<any, any>;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "component",
     "typeValue": {
      "raw": "undefined | React.ComponentClass<any, any> | React.FunctionComponent<any>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "props",
     "typeValue": {
      "raw": "ModalComponentProps<any, any>"
     },
     "required": true
    }
   ]
  },
  "ModalWindowProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ModalWindowProps",
    "nameFull": "ModalWindowProps"
   },
   "typeValue": {
    "raw": "ModalWindowProps",
    "print": [
     "interface ModalWindowProps extends VPanelProps, IHasForwardedRef<HTMLDivElement> {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "typeValue": {
      "raw": "undefined | React.CSSProperties"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "VPanelProps",
       "nameFull": "VPanelProps"
      }
     },
     "required": false
    }
   ]
  },
  "NotificationOperation": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "NotificationOperation",
    "nameFull": "NotificationOperation"
   },
   "typeValue": {
    "raw": "NotificationOperation",
    "print": [
     "interface NotificationOperation {",
     "    component: React.ComponentType<any>;",
     "    props: INotification;",
     "    config: NotificationParams;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "component",
     "typeValue": {
      "raw": "React.ComponentType<any>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "config",
     "typeValue": {
      "raw": "NotificationParams"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "props",
     "typeValue": {
      "raw": "INotification"
     },
     "required": true
    }
   ]
  },
  "NotificationParams": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "NotificationParams",
    "nameFull": "NotificationParams"
   },
   "typeValue": {
    "raw": "NotificationParams",
    "print": [
     "interface NotificationParams {",
     "    duration?: number | 'forever';",
     "    position?: 'bot-left' | 'bot-right' | 'top-left' | 'top-right' | 'top-center' | 'bot-center';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "duration",
     "typeValue": {
      "raw": "undefined | number | 'forever'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "position",
     "typeValue": {
      "raw": "undefined | 'bot-left' | 'bot-right' | 'top-left' | 'top-right' | 'top-center' | 'bot-center'"
     },
     "required": false
    }
   ]
  },
  "PickerBaseOptions": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "PickerBaseOptions",
    "nameFull": "PickerBaseOptions<TItem, TId>"
   },
   "typeValue": {
    "raw": "PickerBaseOptions<TItem, TId>",
    "print": [
     "type PickerBaseOptions<TItem, TId> = {",
     "    /** Name of the entity being selected. Affects wording like \"Please select [entity]\" */",
     "    entityName?: string;",
     "    /** Plural name of the entity being selected. Affects wording like \"X [entities] selected\" */",
     "    entityPluralName?: string;",
     "    /** Provides items to the Picker */",
     "    dataSource: IDataSource<TItem, TId, any>;",
     "    /** Gets entity display name. Default it item.name. */",
     "    getName?: (item: TItem) => string;",
     "    /** Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc. */",
     "    renderRow?: (props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState) => ReactNode;",
     "    /** Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks. */",
     "    getRowOptions?: (item: TItem, index: number) => DataRowOptions<TItem, TId>;",
     "    /** Overrides the default 'no records found' banner.",
     "     * The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything.  */",
     "    renderNotFound?: (props: {",
     "        search: string;",
     "        onClose: () => void;",
     "    }) => ReactNode;",
     "    /** Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers */",
     "    emptyValue?: undefined | null | [",
     "    ];",
     "    /** Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource */",
     "    sortBy?(item: TItem, sorting: SortingOption): any;",
     "    /** Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario. */",
     "    filter?: any;",
     "    /** Defines sorting to pass to the DataSource */",
     "    sorting?: SortingOption;",
     "    /**",
     "     * Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
     "     * - false: All nodes are selected independently (default).",
     "     * - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
     "     * - 'implicit': Selecting a parent node means that all children are considered checked.",
     "     *   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
     "     *   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
     "     *   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
     "     *   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked.",
     "     */",
     "    cascadeSelection?: CascadeSelection;",
     "    /** You can return true for all, or some items to fold them. */",
     "    isFoldedByDefault?(item: TItem): boolean;",
     "    /** Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field. */",
     "    getSearchFields?(item: TItem): string[];",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'implicit' | 'explicit'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dataSource",
     "comment": [
      "Provides items to the Picker"
     ],
     "typeValue": {
      "raw": "IDataSource<TItem, TId, any>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "emptyValue",
     "comment": [
      "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
     ],
     "typeValue": {
      "raw": "undefined | null | []"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "entityName",
     "comment": [
      "Name of the entity being selected. Affects wording like \"Please select [entity]\""
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "entityPluralName",
     "comment": [
      "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "comment": [
      "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
     ],
     "typeValue": {
      "raw": "any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getName",
     "comment": [
      "Gets entity display name. Default it item.name."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getRowOptions",
     "comment": [
      "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "comment": [
      "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => string[]"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "You can return true for all, or some items to fold them."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => boolean"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderNotFound",
     "comment": [
      "Overrides the default 'no records found' banner.",
      " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
     ],
     "typeValue": {
      "raw": "undefined | (props: { search: string; onClose: () => void; }) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderRow",
     "comment": [
      "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
     ],
     "typeValue": {
      "raw": "undefined | (props: DataSourceState<Record<string, any>, any>) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "comment": [
      "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, sorting: SortingOption<any>) => any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "comment": [
      "Defines sorting to pass to the DataSource"
     ],
     "typeValue": {
      "raw": "undefined | SortingOption<any>"
     },
     "required": false
    }
   ]
  },
  "PickerBaseProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "PickerBaseProps",
    "nameFull": "PickerBaseProps<TItem, TId>"
   },
   "typeValue": {
    "raw": "IAnalyticableOnChange<any> | IAnalyticableOnChange<any> | IAnalyticableOnChange<any> | IAnalyticableOnChange<any>",
    "print": [
     "type PickerBaseProps<TItem, TId> = PickerBaseOptions<TItem, TId> & PickerBindingProps<TItem, TId> & IAnalyticableOnChange<any>;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'implicit' | 'explicit'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dataSource",
     "comment": [
      "Provides items to the Picker"
     ],
     "typeValue": {
      "raw": "IDataSource<TItem, TId, any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "emptyValue",
     "comment": [
      "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
     ],
     "typeValue": {
      "raw": "undefined | null | []"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "entityName",
     "comment": [
      "Name of the entity being selected. Affects wording like \"Please select [entity]\""
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "entityPluralName",
     "comment": [
      "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "comment": [
      "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getName",
     "comment": [
      "Gets entity display name. Default it item.name."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getRowOptions",
     "comment": [
      "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "comment": [
      "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => string[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "You can return true for all, or some items to fold them."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderNotFound",
     "comment": [
      "Overrides the default 'no records found' banner.",
      " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
     ],
     "typeValue": {
      "raw": "undefined | (props: { search: string; onClose: () => void; }) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderRow",
     "comment": [
      "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
     ],
     "typeValue": {
      "raw": "undefined | (props: DataSourceState<Record<string, any>, any>) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "comment": [
      "'single' - only one item is selected. 'multi' - multiple items are selected"
     ],
     "typeValue": {
      "raw": "'single'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "SinglePickerProps",
       "nameFull": "SinglePickerProps<TId, TItem>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "comment": [
      "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, sorting: SortingOption<any>) => any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "comment": [
      "Defines sorting to pass to the DataSource"
     ],
     "typeValue": {
      "raw": "undefined | SortingOption<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "valueType",
     "comment": [
      "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
     ],
     "typeValue": {
      "raw": "undefined | 'id'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "SinglePickerProps",
       "nameFull": "SinglePickerProps<TId, TItem>"
      }
     },
     "required": false
    }
   ]
  },
  "PickerBindingProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "PickerBindingProps",
    "nameFull": "PickerBindingProps<TItem, TId>"
   },
   "typeValue": {
    "raw": "{ selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> | { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem> | { selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> | { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]>",
    "print": [
     "type PickerBindingProps<TItem, TId> = SinglePickerProps<TId, TItem> | ArrayPickerProps<TId, TItem>;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "comment": [
      "'single' - only one item is selected. 'multi' - multiple items are selected"
     ],
     "typeValue": {
      "raw": "'single'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "SinglePickerProps",
       "nameFull": "SinglePickerProps<TId, TItem>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "valueType",
     "comment": [
      "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
     ],
     "typeValue": {
      "raw": "undefined | 'id'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "SinglePickerProps",
       "nameFull": "SinglePickerProps<TId, TItem>"
      }
     },
     "required": false
    }
   ]
  },
  "PickerBindingValueType": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "PickerBindingValueType",
    "nameFull": "PickerBindingValueType"
   },
   "typeValue": {
    "raw": "'scalar' | 'array'",
    "print": [
     "type PickerBindingValueType = 'scalar' | 'array';"
    ]
   }
  },
  "PickerFilterConfig": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "PickerFilterConfig",
    "nameFull": "PickerFilterConfig<TFilter>"
   },
   "typeValue": {
    "raw": "PickerFilterConfig<TFilter>",
    "print": [
     "type PickerFilterConfig<TFilter> = FilterConfigBase<TFilter> & {",
     "    type: 'singlePicker' | 'multiPicker';",
     "    dataSource: IDataSource<any, any, any>;",
     "    getName?: (item: any) => string;",
     "    renderRow?: (props: DataRowProps<any, any>) => ReactNode;",
     "    valueType?: 'id';",
     "    /**",
     "     * Pass false to hide search in picker body.",
     "     * If omitted, true value will be used.",
     "     */",
     "    showSearch?: boolean;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "columnKey",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FilterConfigBase",
       "nameFull": "FilterConfigBase<TFilter>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "dataSource",
     "typeValue": {
      "raw": "IDataSource<any, any, any>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "field",
     "typeValue": {
      "raw": "keyof TFilter"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FilterConfigBase",
       "nameFull": "FilterConfigBase<TFilter>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "getName",
     "typeValue": {
      "raw": "undefined | (item: any) => string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isAlwaysVisible",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FilterConfigBase",
       "nameFull": "FilterConfigBase<TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxCount",
     "comment": [
      "Count of words to show in the Filter toggler. By default, 2 item will be shown."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FilterConfigBase",
       "nameFull": "FilterConfigBase<TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "predicates",
     "typeValue": {
      "raw": "undefined | IFilterPredicate[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FilterConfigBase",
       "nameFull": "FilterConfigBase<TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderRow",
     "typeValue": {
      "raw": "undefined | (props: DataRowProps<any, any>) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "showSearch",
     "comment": [
      "Pass false to hide search in picker body.",
      " If omitted, true value will be used."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "title",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FilterConfigBase",
       "nameFull": "FilterConfigBase<TFilter>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "typeValue": {
      "raw": "'singlePicker' | 'multiPicker'"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "valueType",
     "typeValue": {
      "raw": "undefined | 'id'"
     },
     "required": false
    }
   ]
  },
  "PickerFooterProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "PickerFooterProps",
    "nameFull": "PickerFooterProps<TItem, TId>"
   },
   "typeValue": {
    "raw": "PickerFooterProps<TItem, TId>",
    "print": [
     "type PickerFooterProps<TItem, TId> = {",
     "    view: IDataSourceView<TItem, TId, any>;",
     "    showSelected: IEditable<boolean>;",
     "    clearSelection: () => void;",
     "    selectionMode: 'single' | 'multi';",
     "    disableClear?: boolean;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "clearSelection",
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableClear",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "typeValue": {
      "raw": "'multi' | 'single'"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "showSelected",
     "typeValue": {
      "raw": "IEditable<boolean>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "view",
     "typeValue": {
      "raw": "IDataSourceView<TItem, TId, any>"
     },
     "required": true
    }
   ]
  },
  "RangeDatePickerCoreProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RangeDatePickerCoreProps",
    "nameFull": "RangeDatePickerCoreProps"
   },
   "typeValue": {
    "raw": "RangeDatePickerCoreProps",
    "print": [
     "interface RangeDatePickerCoreProps extends BaseRangeDatePickerProps {",
     "    getPlaceholder?(type: RangeDatePickerInputType): string;",
     "    rawProps?: {",
     "        from?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
     "        to?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
     "        body?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
     "    };",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bodyCx",
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disableClear",
     "comment": [
      "Disables clearing component (with the cross icon)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "comment": [
      "Filter selectable days. Days, for which this callback returns false - will be disabled"
     ],
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "format",
     "comment": [
      "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getPlaceholder",
     "typeValue": {
      "raw": "undefined | (type: RangeDatePickerInputType) => string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "Styles for input and body components in RangeDatePicker"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "comment": [
      "If this function returns true, the day will be highlighted as holiday"
     ],
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<HTMLInputElement, Element>, inputType: 'from' | 'to') => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<HTMLInputElement, Element>, inputType: 'from' | 'to') => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onOpenChange",
     "comment": [
      "Called when component is opened/closed"
     ],
     "typeValue": {
      "raw": "undefined | (isOpen: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "comment": [
      "Range presets (like 'this week', 'this month', etc.) to display at the right of the Picker's body.",
      " UUI provides defaults in the 'rangeDatePickerPresets' exported variable - you can use it as is, or build on top of it (e.g. add your presets)"
     ],
     "typeValue": {
      "raw": "undefined | RangeDatePickerPresets"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "typeValue": {
      "raw": "undefined | { from?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; to?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "comment": [
      "Overrides rendering of the single day. For example, to highlight certain days"
     ],
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderFooter",
     "comment": [
      "Allows to add a custom footer to the Picker's dropdown body"
     ],
     "typeValue": {
      "raw": "undefined | (value: RangeDatePickerValue) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderTarget",
     "comment": [
      "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach RangeDatePicker to other components, e.g. Buttons"
     ],
     "typeValue": {
      "raw": "undefined | (props: IDropdownToggler) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "RangeDatePickerInputType": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "RangeDatePickerInputType",
    "nameFull": "RangeDatePickerInputType"
   },
   "typeValue": {
    "raw": "'from' | 'to'",
    "print": [
     "type RangeDatePickerInputType = 'from' | 'to';"
    ]
   }
  },
  "RangeDatePickerPresets": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "RangeDatePickerPresets",
    "nameFull": "RangeDatePickerPresets"
   },
   "typeValue": {
    "raw": "RangeDatePickerPresets",
    "print": [
     "type RangeDatePickerPresets = {",
     "    [key: string]: {",
     "        name: ReactNode;",
     "        getRange: () => RangeDatePickerPresetValue;",
     "    };",
     "};"
    ]
   }
  },
  "RangeDatePickerPresetValue": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "RangeDatePickerPresetValue",
    "nameFull": "RangeDatePickerPresetValue"
   },
   "typeValue": {
    "raw": "RangeDatePickerPresetValue",
    "print": [
     "type RangeDatePickerPresetValue = {",
     "    from: string;",
     "    to: string;",
     "    order?: number;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "from",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "order",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "to",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    }
   ]
  },
  "RangeDatePickerValue": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RangeDatePickerValue",
    "nameFull": "RangeDatePickerValue"
   },
   "typeValue": {
    "raw": "RangeDatePickerValue",
    "print": [
     "interface RangeDatePickerValue {",
     "    from: string | null;",
     "    to: string | null;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "from",
     "typeValue": {
      "raw": "null | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "to",
     "typeValue": {
      "raw": "null | string"
     },
     "required": false
    }
   ]
  },
  "RenderCellProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RenderCellProps",
    "nameFull": "RenderCellProps<TItem, TId>"
   },
   "typeValue": {
    "raw": "RenderCellProps<TItem, TId>",
    "print": [
     "interface RenderCellProps<TItem = any, TId = any> extends DataTableCellOptions<TItem, TId> {",
     "    /**",
     "     * Lens instance, wrapping IEditable on the row, to help binding to row's value.",
     "     * E.g. <TextInput { ...rowLens.prop('name').toProps() } />",
     "     */",
     "    rowLens: ILens<TItem>;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "column",
     "comment": [
      "DataColumnProps object for the column the cell is at"
     ],
     "typeValue": {
      "raw": "DataColumnProps<TItem, TId, any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableCellOptions",
       "nameFull": "DataTableCellOptions<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "index",
     "comment": [
      "Column index in table"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableCellOptions",
       "nameFull": "DataTableCellOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFirstColumn",
     "comment": [
      "True if the cell is in the first column"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableCellOptions",
       "nameFull": "DataTableCellOptions<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLastColumn",
     "comment": [
      "True if the cell is in the last column"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableCellOptions",
       "nameFull": "DataTableCellOptions<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "comment": [
      "Key to use as component's key"
     ],
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableCellOptions",
       "nameFull": "DataTableCellOptions<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowLens",
     "comment": [
      "Lens instance, wrapping IEditable on the row, to help binding to row's value.",
      " E.g. <TextInput { ...rowLens.prop('name').toProps() } />"
     ],
     "typeValue": {
      "raw": "ILens<TItem>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowProps",
     "comment": [
      "DataTableRowsProps object for the table row the cell is at"
     ],
     "typeValue": {
      "raw": "DataTableRowProps<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableCellOptions",
       "nameFull": "DataTableCellOptions<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "HTML tabIndex attribute to set on the cell"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableCellOptions",
       "nameFull": "DataTableCellOptions<TItem, TId>"
      }
     },
     "required": false
    }
   ]
  },
  "RenderEditorProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RenderEditorProps",
    "nameFull": "RenderEditorProps<TItem, TId, TCellValue>"
   },
   "typeValue": {
    "raw": "RenderEditorProps<TItem, TId, TCellValue>",
    "print": [
     "interface RenderEditorProps<TItem, TId, TCellValue> extends IEditable<TCellValue>, ICanFocus<any> {",
     "    rowProps: DataRowProps<TItem, TId>;",
     "    mode: 'cell'; // This can signal the editor component to adapt it's visuals to cell editor",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "'cell'"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowProps",
     "typeValue": {
      "raw": "DataRowProps<TItem, TId>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "ScrollAlign": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ScrollAlign",
    "nameFull": "ScrollAlign"
   },
   "typeValue": {
    "raw": "'top' | 'nearest'",
    "print": [
     "type ScrollAlign = 'top' | 'nearest';"
    ]
   }
  },
  "ScrollToConfig": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ScrollToConfig",
    "nameFull": "ScrollToConfig"
   },
   "typeValue": {
    "raw": "ScrollToConfig",
    "print": [
     "interface ScrollToConfig {",
     "    index?: number;",
     "    behavior?: ScrollBehavior;",
     "    align?: ScrollAlign;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "align",
     "typeValue": {
      "raw": "undefined | 'top' | 'nearest'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "behavior",
     "typeValue": {
      "raw": "undefined | 'auto' | 'instant' | 'smooth'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "index",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    }
   ]
  },
  "SearchResultItem": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "SearchResultItem",
    "nameFull": "SearchResultItem<TItem>"
   },
   "typeValue": {
    "raw": "SearchResultItem<TItem>",
    "print": [
     "type SearchResultItem<TItem> = TItem & {",
     "    parents?: [",
     "        TItem",
     "    ];",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "parents",
     "typeValue": {
      "raw": "undefined | [TItem]"
     },
     "required": false
    }
   ]
  },
  "SinglePickerProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "SinglePickerProps",
    "nameFull": "SinglePickerProps<TId, TItem>"
   },
   "typeValue": {
    "raw": "{ selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> | { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem>",
    "print": [
     "type SinglePickerProps<TId, TItem> = ({",
     "    /** 'single' - only one item is selected. 'multi' - multiple items are selected */",
     "    selectionMode: 'single';",
     "    /** Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem) */",
     "    valueType?: 'id';",
     "} & IEditable<TId>) | ({",
     "    selectionMode: 'single';",
     "    valueType: 'entity';",
     "} & IEditable<TItem>);"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "comment": [
      "'single' - only one item is selected. 'multi' - multiple items are selected"
     ],
     "typeValue": {
      "raw": "'single'"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "valueType",
     "comment": [
      "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
     ],
     "typeValue": {
      "raw": "undefined | 'id'"
     },
     "required": false
    }
   ]
  },
  "SkinContextComponentProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "SkinContextComponentProps",
    "nameFull": "SkinContextComponentProps<TProps, TSemanticProps>"
   },
   "typeValue": {
    "raw": "SkinContextComponentProps<TProps, TSemanticProps>",
    "print": [
     "type SkinContextComponentProps<TProps, TSemanticProps = {}> = TProps & TSemanticProps & {",
     "    usageContext?: string[];",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "usageContext",
     "typeValue": {
      "raw": "undefined | string[]"
     },
     "required": false
    }
   ]
  },
  "SortDirection": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "SortDirection",
    "nameFull": "SortDirection"
   },
   "typeValue": {
    "raw": "'asc' | 'desc'",
    "print": [
     "type SortDirection = 'asc' | 'desc';"
    ]
   }
  },
  "SortingOption": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "SortingOption",
    "nameFull": "SortingOption<T>"
   },
   "typeValue": {
    "raw": "SortingOption<T>",
    "print": [
     "interface SortingOption<T = any> {",
     "    field: keyof T;",
     "    direction?: SortDirection;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "direction",
     "typeValue": {
      "raw": "undefined | 'asc' | 'desc'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "field",
     "typeValue": {
      "raw": "keyof T"
     },
     "required": true
    }
   ]
  },
  "SpinnerCoreProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "SpinnerCoreProps",
    "nameFull": "SpinnerCoreProps"
   },
   "typeValue": {
    "raw": "SpinnerCoreProps",
    "print": [
     "interface SpinnerCoreProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    }
   ]
  },
  "StatefulProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "StatefulProps",
    "nameFull": "StatefulProps<T>"
   },
   "typeValue": {
    "raw": "StatefulProps<T>",
    "print": [
     "interface StatefulProps<T> {",
     "    initialState: Partial<T>;",
     "    render(props: IEditable<T>): React.ReactNode;",
     "    storage?: StatefulStorageSettings;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "initialState",
     "typeValue": {
      "raw": "Partial<T>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "render",
     "typeValue": {
      "raw": "(props: IEditable<T>) => React.ReactNode"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "storage",
     "typeValue": {
      "raw": "undefined | 'state' | 'query'"
     },
     "required": false
    }
   ]
  },
  "TableFiltersConfig": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "TableFiltersConfig",
    "nameFull": "TableFiltersConfig<TFilter>"
   },
   "typeValue": {
    "raw": "PickerFilterConfig<TFilter> | DatePickerFilterConfig<TFilter> | NumericFilterConfig<TFilter> | RangeDatePickerFilterConfig<TFilter> | CustomFilterConfig<TFilter>",
    "print": [
     "type TableFiltersConfig<TFilter> = PickerFilterConfig<TFilter> | DatePickerFilterConfig<TFilter> | NumericFilterConfig<TFilter> | RangeDatePickerFilterConfig<TFilter> | CustomFilterConfig<TFilter>;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "columnKey",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FilterConfigBase",
       "nameFull": "FilterConfigBase<TFilter>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "field",
     "typeValue": {
      "raw": "keyof TFilter"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FilterConfigBase",
       "nameFull": "FilterConfigBase<TFilter>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isAlwaysVisible",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FilterConfigBase",
       "nameFull": "FilterConfigBase<TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxCount",
     "comment": [
      "Count of words to show in the Filter toggler. By default, 2 item will be shown."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FilterConfigBase",
       "nameFull": "FilterConfigBase<TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "predicates",
     "typeValue": {
      "raw": "undefined | IFilterPredicate[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FilterConfigBase",
       "nameFull": "FilterConfigBase<TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "title",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FilterConfigBase",
       "nameFull": "FilterConfigBase<TFilter>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "typeValue": {
      "raw": "'singlePicker' | 'multiPicker'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerFilterConfig",
       "nameFull": "PickerFilterConfig<TFilter>"
      }
     },
     "required": true
    }
   ]
  },
  "TextInputCoreProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TextInputCoreProps",
    "nameFull": "TextInputCoreProps"
   },
   "typeValue": {
    "raw": "TextInputCoreProps",
    "print": [
     "interface TextInputCoreProps extends IHasCX, IClickable, IDisableable, IEditable<string | undefined>, IHasPlaceholder, IHasIcon, ICanBeReadonly, IDropdownToggler, IAnalyticableOnChange<string>, IHasRawProps<React.HTMLAttributes<HTMLInputElement>>, ICanFocus<HTMLInputElement>, IHasTabIndex {",
     "    /** Enables cancel (cross) icon, and fires when the icon is clicked */",
     "    onCancel?(): void;",
     "    /** Enables accept (check) icon, and fires when the icon is clicked */",
     "    onAccept?(): void;",
     "    /** keydown event handler to put on the HTML input element */",
     "    onKeyDown?(e?: any): void;",
     "    /** Put focus on the element, when component is mounted */",
     "    autoFocus?: boolean;",
     "    /** Standard 'type' attribute to put on the HTML input element (e.g. 'password') */",
     "    type?: string;",
     "    /** Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp} */",
     "    autoComplete?: string;",
     "    /** Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp} */",
     "    name?: string;",
     "    /** Maximum input length in characters */",
     "    maxLength?: number;",
     "    /** Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode} */",
     "    inputMode?: React.InputHTMLAttributes<HTMLInputElement>['inputMode'];",
     "    /** HTML ID attribute for input */",
     "    id?: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "autoComplete",
     "comment": [
      "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "comment": [
      "Put focus on the element, when component is mounted"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML ID attribute for input"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputMode",
     "comment": [
      "Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
     ],
     "typeValue": {
      "raw": "undefined | 'search' | 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "comment": [
      "Maximum input length in characters"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "comment": [
      "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onAccept",
     "comment": [
      "Enables accept (check) icon, and fires when the icon is clicked"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onCancel",
     "comment": [
      "Enables cancel (cross) icon, and fires when the icon is clicked"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "comment": [
      "keydown event handler to put on the HTML input element"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "comment": [
      "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "TimePickerValue": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TimePickerValue",
    "nameFull": "TimePickerValue"
   },
   "typeValue": {
    "raw": "TimePickerValue",
    "print": [
     "interface TimePickerValue {",
     "    hours: number;",
     "    minutes: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "hours",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "minutes",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    }
   ]
  },
  "TMouseCoords": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "TMouseCoords",
    "nameFull": "TMouseCoords"
   },
   "typeValue": {
    "raw": "TMouseCoords",
    "print": [
     "type TMouseCoords = {",
     "    mousePageX: number;",
     "    mousePageY: number;",
     "    mouseDx: number;",
     "    mouseDy: number;",
     "    mouseDxSmooth: number;",
     "    mouseDySmooth: number;",
     "    mouseDownPageX: number;",
     "    mouseDownPageY: number;",
     "    buttons: number;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "buttons",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "mouseDownPageX",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "mouseDownPageY",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "mouseDx",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "mouseDxSmooth",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "mouseDy",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "mouseDySmooth",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "mousePageX",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "mousePageY",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    }
   ]
  },
  "TooltipCoreProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TooltipCoreProps",
    "nameFull": "TooltipCoreProps"
   },
   "typeValue": {
    "raw": "TooltipCoreProps",
    "print": [
     "interface TooltipCoreProps extends IHasCX, IHasChildren, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, Partial<IEditable<boolean>>, Pick<DropdownProps, 'onClose' | 'placement' | 'modifiers' | 'openDelay' | 'closeDelay' | 'closeOnMouseLeave' | 'portalTarget' | 'boundaryElement' | 'closeBodyOnTogglerHidden'> {",
     "    /** Content to show in the tooltip (ReactNode) */",
     "    content?: any;",
     "    /** Alternative to 'content' prop, you can pass a render function.",
     "     * The function will only be called when content is shown, this can save performance. */",
     "    renderContent?(): any;",
     "    /** See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/} */",
     "    offset?: Options['offset'];",
     "    /** React Node(s) to show tooltip for */",
     "    children?: React.ReactNode;",
     "    /** Max width of tooltip */",
     "    maxWidth?: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "boundaryElement",
     "typeValue": {
      "raw": "undefined | HTMLElement | HTMLElement[] | 'clippingParents'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "comment": [
      "React Node(s) to show tooltip for"
     ],
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeBodyOnTogglerHidden",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeDelay",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnMouseLeave",
     "typeValue": {
      "raw": "undefined | false | 'toggler' | 'boundary'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "content",
     "comment": [
      "Content to show in the tooltip (ReactNode)"
     ],
     "typeValue": {
      "raw": "any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxWidth",
     "comment": [
      "Max width of tooltip"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "modifiers",
     "typeValue": {
      "raw": "undefined | (Modifier<any, object>>)[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "offset",
     "comment": [
      "See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/}"
     ],
     "typeValue": {
      "raw": "undefined | OffsetsFunction | [number | null | undefined, number | null | undefined]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "openDelay",
     "comment": [
      "Should we close dropdown on click on the Toggler, if it's already open? Default is true."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "portalTarget",
     "typeValue": {
      "raw": "undefined | HTMLElement"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderContent",
     "comment": [
      "Alternative to 'content' prop, you can pass a render function.",
      " The function will only be called when content is shown, this can save performance."
     ],
     "typeValue": {
      "raw": "undefined | () => any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "TreeNodeInfo": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TreeNodeInfo",
    "nameFull": "TreeNodeInfo"
   },
   "typeValue": {
    "raw": "TreeNodeInfo",
    "print": [
     "interface TreeNodeInfo {",
     "    count?: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "count",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    }
   ]
  },
  "TreeParams": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TreeParams",
    "nameFull": "TreeParams<TItem, TId>"
   },
   "typeValue": {
    "raw": "TreeParams<TItem, TId>",
    "print": [
     "interface TreeParams<TItem, TId> {",
     "    getId?(item: TItem): TId;",
     "    getParentId?(item: TItem): TId | undefined;",
     "    complexIds?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "complexIds",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "typeValue": {
      "raw": "undefined | (item: TItem) => TId"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getParentId",
     "typeValue": {
      "raw": "undefined | (item: TItem) => TId | undefined"
     },
     "required": false
    }
   ]
  },
  "UseFormProps": {
   "typeValue": {
    "raw": "UseFormProps<T>",
    "print": [
     "type UseFormProps<T> = Omit<FormProps<T>, 'renderForm'>;"
    ]
   },
   "typeName": {
    "name": "UseFormProps",
    "nameFull": "UseFormProps<T>"
   },
   "kind": "TypeAliasDeclaration"
  },
  "UseTableStateHookParams": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "UseTableStateHookParams",
    "nameFull": "UseTableStateHookParams<TFilter, TViewState>"
   },
   "typeValue": {
    "raw": "UseTableStateHookParams<TFilter, TViewState>",
    "print": [
     "interface UseTableStateHookParams<TFilter = Record<string, any>, TViewState = any> extends UseTableStateHookBaseParams<TFilter, TViewState>, Partial<IEditable<DataTableState<TFilter, TViewState>>> {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "columns",
     "comment": [
      "Columns configuration, can be omitted if used without tables"
     ],
     "typeValue": {
      "raw": "undefined | DataColumnProps<any, any, any>[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UseTableStateHookBaseParams",
       "nameFull": "UseTableStateHookBaseParams<TFilter, TViewState>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filters",
     "comment": [
      "Filters configuration, can be omitted if you don't need filters"
     ],
     "typeValue": {
      "raw": "undefined | TableFiltersConfig<TFilter>[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UseTableStateHookBaseParams",
       "nameFull": "UseTableStateHookBaseParams<TFilter, TViewState>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "initialPresets",
     "comment": [
      "Initial presets array"
     ],
     "typeValue": {
      "raw": "undefined | ITablePreset<TFilter, TViewState>[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UseTableStateHookBaseParams",
       "nameFull": "UseTableStateHookBaseParams<TFilter, TViewState>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onPresetCreate",
     "comment": [
      "Called when preset was created. Should return the ID of new preset"
     ],
     "typeValue": {
      "raw": "undefined | (preset: ITablePreset<TFilter, TViewState>) => Promise<number>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UseTableStateHookBaseParams",
       "nameFull": "UseTableStateHookBaseParams<TFilter, TViewState>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onPresetDelete",
     "comment": [
      "Called when preset was deleted"
     ],
     "typeValue": {
      "raw": "undefined | (preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UseTableStateHookBaseParams",
       "nameFull": "UseTableStateHookBaseParams<TFilter, TViewState>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onPresetUpdate",
     "comment": [
      "Called when preset was updated"
     ],
     "typeValue": {
      "raw": "undefined | (preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UseTableStateHookBaseParams",
       "nameFull": "UseTableStateHookBaseParams<TFilter, TViewState>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "UseUuiErrorOptions": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "UseUuiErrorOptions",
    "nameFull": "UseUuiErrorOptions"
   },
   "typeValue": {
    "raw": "UseUuiErrorOptions",
    "print": [
     "interface UseUuiErrorOptions {",
     "    errorConfig?: Record<ApiCallErrorType, UuiErrorInfo>;",
     "    recoveryConfig?: Record<ApiRecoveryReason, UuiRecoveryErrorInfo>;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "errorConfig",
     "typeValue": {
      "raw": "undefined | Record<UuiErrorInfo>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "recoveryConfig",
     "typeValue": {
      "raw": "undefined | Record<UuiRecoveryErrorInfo>"
     },
     "required": false
    }
   ]
  },
  "UseUuiErrorProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "UseUuiErrorProps",
    "nameFull": "UseUuiErrorProps"
   },
   "typeValue": {
    "raw": "UseUuiErrorProps",
    "print": [
     "interface UseUuiErrorProps {",
     "    getErrorInfo: (error: any, defaultErrorInfo: UuiErrorInfo) => UuiErrorInfo;",
     "    options?: UseUuiErrorOptions;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "getErrorInfo",
     "typeValue": {
      "raw": "(error: any, defaultErrorInfo: UuiErrorInfo"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "options",
     "typeValue": {
      "raw": "undefined | UseUuiErrorOptions"
     },
     "required": false
    }
   ]
  },
  "UseUuiServicesProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "UseUuiServicesProps",
    "nameFull": "UseUuiServicesProps<TApi, TAppContext>"
   },
   "typeValue": {
    "raw": "UseUuiServicesProps<TApi, TAppContext>",
    "print": [
     "interface UseUuiServicesProps<TApi, TAppContext> extends UuiServicesProps<TApi> {",
     "    appContext?: TAppContext;",
     "    router: IRouterContext;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "apiDefinition",
     "typeValue": {
      "raw": "undefined | (processRequest: IProcessRequest) => TApi"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UuiServicesProps",
       "nameFull": "UuiServicesProps<TApi>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "apiPingPath",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ApiContextProps",
       "nameFull": "ApiContextProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "apiReloginPath",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ApiContextProps",
       "nameFull": "ApiContextProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "apiServerUrl",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ApiContextProps",
       "nameFull": "ApiContextProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "appContext",
     "typeValue": {
      "raw": "undefined | TAppContext"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "router",
     "typeValue": {
      "raw": "IRouterContext"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "skinContext",
     "typeValue": {
      "raw": "undefined | ISkin"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "UuiServicesProps",
       "nameFull": "UuiServicesProps<TApi>"
      }
     },
     "required": false
    }
   ]
  },
  "UuiContexts": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "UuiContexts",
    "nameFull": "UuiContexts"
   },
   "typeValue": {
    "raw": "UuiContexts",
    "print": [
     "interface UuiContexts {",
     "    uuiApi: IApiContext;",
     "    uuiRouter: IRouterContext;",
     "    uuiModals: IModalContext;",
     "    uuiDnD: IDndContext;",
     "    uuiUserSettings: IUserSettingsContext;",
     "    uuiAnalytics: IAnalyticsContext;",
     "    uuiErrors: IErrorContext;",
     "    uuiNotifications: INotificationContext;",
     "    uuiLayout: ILayoutContext;",
     "    uuiLocks: ILockContext;",
     "    uuiSkin: SkinContext;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "uuiAnalytics",
     "typeValue": {
      "raw": "IAnalyticsContext"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiApi",
     "typeValue": {
      "raw": "IApiContext"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiDnD",
     "typeValue": {
      "raw": "IDndContext"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiErrors",
     "typeValue": {
      "raw": "IErrorContext"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiLayout",
     "typeValue": {
      "raw": "ILayoutContext"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiLocks",
     "typeValue": {
      "raw": "ILockContext"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiModals",
     "typeValue": {
      "raw": "IModalContext"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiNotifications",
     "typeValue": {
      "raw": "INotificationContext"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiRouter",
     "typeValue": {
      "raw": "IRouterContext"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiSkin",
     "typeValue": {
      "raw": "SkinContext"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiUserSettings",
     "typeValue": {
      "raw": "IUserSettingsContext"
     },
     "required": true
    }
   ]
  },
  "UuiErrorInfo": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "UuiErrorInfo",
    "nameFull": "UuiErrorInfo"
   },
   "typeValue": {
    "raw": "UuiErrorInfo",
    "print": [
     "interface UuiErrorInfo {",
     "    status?: number;",
     "    title?: React.ReactNode;",
     "    subtitle?: React.ReactNode;",
     "    imageUrl?: string;",
     "    mobileImageUrl?: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "imageUrl",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "mobileImageUrl",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "status",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "subtitle",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "title",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "required": false
    }
   ]
  },
  "UuiRecoveryErrorInfo": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "UuiRecoveryErrorInfo",
    "nameFull": "UuiRecoveryErrorInfo"
   },
   "typeValue": {
    "raw": "UuiRecoveryErrorInfo",
    "print": [
     "type UuiRecoveryErrorInfo = {",
     "    title: string;",
     "    subtitle: string;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "subtitle",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "title",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    }
   ]
  },
  "UuiServicesProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "UuiServicesProps",
    "nameFull": "UuiServicesProps<TApi>"
   },
   "typeValue": {
    "raw": "UuiServicesProps<TApi>",
    "print": [
     "interface UuiServicesProps<TApi> extends ApiContextProps {",
     "    apiDefinition?: (processRequest: IProcessRequest) => TApi;",
     "    skinContext?: ISkin;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "apiDefinition",
     "typeValue": {
      "raw": "undefined | (processRequest: IProcessRequest) => TApi"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "apiPingPath",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ApiContextProps",
       "nameFull": "ApiContextProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "apiReloginPath",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ApiContextProps",
       "nameFull": "ApiContextProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "apiServerUrl",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ApiContextProps",
       "nameFull": "ApiContextProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "skinContext",
     "typeValue": {
      "raw": "undefined | ISkin"
     },
     "required": false
    }
   ]
  },
  "ValidationMode": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ValidationMode",
    "nameFull": "ValidationMode"
   },
   "typeValue": {
    "raw": "'change' | 'save'",
    "print": [
     "type ValidationMode = 'change' | 'save';"
    ]
   }
  },
  "VirtualListRange": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "VirtualListRange",
    "nameFull": "VirtualListRange"
   },
   "typeValue": {
    "raw": "VirtualListRange",
    "print": [
     "interface VirtualListRange {",
     "    /**",
     "     * Index of the topmost item, in rendered batch.",
     "     * Note - this item might not be visible, as Virtual List maintain some reserve of rows on top / at the bottom of the list",
     "     */",
     "    topIndex?: number;",
     "    /**",
     "     * Number of currently rendered items.",
     "     * Virtual list updates this value automatically, if it too small.",
     "     * Note Virtual List renders more items, that actually visible,",
     "     * as it need maintain some reserve of rows on top / at the bottom of the list.",
     "     */",
     "    visibleCount?: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "topIndex",
     "comment": [
      "Index of the topmost item, in rendered batch.",
      " Note - this item might not be visible, as Virtual List maintain some reserve of rows on top / at the bottom of the list"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "visibleCount",
     "comment": [
      "Number of currently rendered items.",
      " Virtual list updates this value automatically, if it too small.",
      " Note Virtual List renders more items, that actually visible,",
      " as it need maintain some reserve of rows on top / at the bottom of the list."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    }
   ]
  },
  "VirtualListState": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "VirtualListState",
    "nameFull": "VirtualListState"
   },
   "typeValue": {
    "raw": "VirtualListState",
    "print": [
     "/** Holds state of a Virtual List - top visible item index, and estimated count of visible items */",
     "interface VirtualListState extends VirtualListRange {",
     "    /**",
     "     * Virtual list ensures that row with this Index is within the visible area, if not Virtual List .",
     "     * Virtual list updates this value on scroll to null when appear in the visible area.",
     "     * If this value is updated manually, Virtual List would scroll to the specified items.",
     "     * It would attempt to put scroll so this item will be at the top of the list.",
     "     */",
     "    scrollTo?: ScrollToConfig;",
     "    /**",
     "     * Virtual List manually scroll to this Index when it appears not within the visible area.",
     "     * It would attempt to put scroll so this item will be in the middle of the list.",
     "     */",
     "    focusedIndex?: number;",
     "}"
    ]
   },
   "comment": [
    "Holds state of a Virtual List - top visible item index, and estimated count of visible items"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "focusedIndex",
     "comment": [
      "Virtual List manually scroll to this Index when it appears not within the visible area.",
      " It would attempt to put scroll so this item will be in the middle of the list."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "scrollTo",
     "comment": [
      "Virtual list ensures that row with this Index is within the visible area, if not Virtual List .",
      " Virtual list updates this value on scroll to null when appear in the visible area.",
      " If this value is updated manually, Virtual List would scroll to the specified items.",
      " It would attempt to put scroll so this item will be at the top of the list."
     ],
     "typeValue": {
      "raw": "undefined | ScrollToConfig"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "topIndex",
     "comment": [
      "Index of the topmost item, in rendered batch.",
      " Note - this item might not be visible, as Virtual List maintain some reserve of rows on top / at the bottom of the list"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "VirtualListRange",
       "nameFull": "VirtualListRange"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "visibleCount",
     "comment": [
      "Number of currently rendered items.",
      " Virtual list updates this value automatically, if it too small.",
      " Note Virtual List renders more items, that actually visible,",
      " as it need maintain some reserve of rows on top / at the bottom of the list."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "VirtualListRange",
       "nameFull": "VirtualListRange"
      }
     },
     "required": false
    }
   ]
  },
  "VPanelProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "VPanelProps",
    "nameFull": "VPanelProps"
   },
   "typeValue": {
    "raw": "VPanelProps",
    "print": [
     "type VPanelProps = IHasCX & IHasChildren & IClickable & IHasRawProps<HTMLAttributes<HTMLDivElement>> & IHasForwardedRef<HTMLDivElement> & IAnalyticableClick & {",
     "    style?: CSSProperties;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "typeValue": {
      "raw": "undefined | React.CSSProperties"
     },
     "required": false
    }
   ]
  }
 },
 "@epam/uui-components": {
  "AccordionProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "AccordionProps",
    "nameFull": "AccordionProps"
   },
   "typeValue": {
    "raw": "GeneralAccordionProps | EditableAccordionProps",
    "print": [
     "type AccordionProps = GeneralAccordionProps | EditableAccordionProps;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Overrides the default dropdown (folding) icon.Pass null to disable the folding icon completely"
     ],
     "typeValue": {
      "raw": "undefined | null | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "GeneralAccordionProps",
       "nameFull": "GeneralAccordionProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderAdditionalItems",
     "comment": [
      "Renders additional items to component's header (after the title, and before the folding icon)"
     ],
     "typeValue": {
      "raw": "undefined | (isOpen: boolean) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "GeneralAccordionProps",
       "nameFull": "GeneralAccordionProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderTitle",
     "comment": [
      "Overrides default title rendering."
     ],
     "typeValue": {
      "raw": "undefined | (isOpen: boolean) => React.ReactElement<any, string | React.JSXElementConstructor<any>>"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "GeneralAccordionProps",
       "nameFull": "GeneralAccordionProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "title",
     "comment": [
      "Accordion title"
     ],
     "typeValue": {
      "raw": "undefined | string | React.ReactElement<any, string | React.JSXElementConstructor<any>>"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "GeneralAccordionProps",
       "nameFull": "GeneralAccordionProps"
      }
     },
     "required": false
    }
   ]
  },
  "AccordionState": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "AccordionState",
    "nameFull": "AccordionState"
   },
   "typeValue": {
    "raw": "AccordionState",
    "print": [
     "interface AccordionState {",
     "    opened: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "opened",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    }
   ]
  },
  "AdaptiveItemProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "AdaptiveItemProps",
    "nameFull": "AdaptiveItemProps<T>"
   },
   "typeValue": {
    "raw": "AdaptiveItemProps<T>",
    "print": [
     "type AdaptiveItemProps<T = unknown> = T & {",
     "    render: (item: AdaptiveItemProps<T>, hiddenItems?: AdaptiveItemProps<T>[], displayedItems?: AdaptiveItemProps<T>[]) => any;",
     "    priority: number;",
     "    collapsedContainer?: boolean;",
     "    id: string;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "render",
     "typeValue": {
      "raw": "(item: AdaptiveItemProps<T>[] | undefined) => any"
     },
     "required": true
    }
   ]
  },
  "AdaptivePanelProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "AdaptivePanelProps",
    "nameFull": "AdaptivePanelProps"
   },
   "typeValue": {
    "raw": "AdaptivePanelProps",
    "print": [
     "interface AdaptivePanelProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
     "    items: AdaptiveItemProps[];",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "typeValue": {
      "raw": "{ render: (item: any, hiddenItems?: any[] | undefined, displayedItems?: any[] | undefined) => any; priority: number; collapsedContainer?: boolean | undefined; id: string; }[]"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    }
   ]
  },
  "AnchorProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "AnchorProps",
    "nameFull": "AnchorProps"
   },
   "typeValue": {
    "raw": "AnchorProps",
    "print": [
     "interface AnchorProps extends IHasCX, ICanRedirect, IHasChildren, IDisableable, IClickable, IAnalyticableClick, IHasRawProps<React.ButtonHTMLAttributes<HTMLButtonElement>>, IHasForwardedRef<HTMLAnchorElement | HTMLButtonElement> {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    }
   ]
  },
  "ArrayPickerProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ArrayPickerProps",
    "nameFull": "ArrayPickerProps<TId, TItem>"
   },
   "typeValue": {
    "raw": "{ selectionMode: 'multi'; valueType: 'id'; emptyValue?: [] | null | undefined; } & IEditable<TId[]> | { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]>",
    "print": [
     "type ArrayPickerProps<TId, TItem> = ({",
     "    selectionMode: 'multi';",
     "    valueType: 'id';",
     "    emptyValue?: [",
     "    ] | null;",
     "} & IEditable<TId[]>) | ({",
     "    selectionMode: 'multi';",
     "    valueType: 'entity';",
     "    emptyValue?: [",
     "    ] | null;",
     "} & IEditable<TItem[]>);"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "emptyValue",
     "typeValue": {
      "raw": "undefined | null | []"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "typeValue": {
      "raw": "'multi'"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "valueType",
     "typeValue": {
      "raw": "'id'"
     },
     "required": true
    }
   ]
  },
  "AvatarProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "AvatarProps",
    "nameFull": "AvatarProps"
   },
   "typeValue": {
    "raw": "AvatarProps",
    "print": [
     "interface AvatarProps extends IHasCX, IHasRawProps<React.ImgHTMLAttributes<HTMLImageElement>>, IHasForwardedRef<HTMLImageElement> {",
     "    /** HTML alt attribute value */",
     "    alt?: string;",
     "    /** Image URL */",
     "    img: string;",
     "    /** Size  */",
     "    size: '12' | '18' | '24' | '30' | '36' | '42' | '48' | '54' | '60' | '72' | '78' | '90' | '144';",
     "    /** True to show placeholder */",
     "    isLoading?: boolean;",
     "    /** Avatar onClick.",
     "     *  @deprecated Property onClick is deprecated and will be removed in future release.",
     "     * */",
     "    onClick?: () => void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alt",
     "comment": [
      "HTML alt attribute value"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "img",
     "comment": [
      "Image URL"
     ],
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLoading",
     "comment": [
      "True to show placeholder"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClick",
     "comment": [
      "Avatar onClick.",
      "  @deprecated Property onClick is deprecated and will be removed in future release."
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "comment": [
      "Size"
     ],
     "typeValue": {
      "raw": "'12' | '18' | '24' | '30' | '36' | '42' | '48' | '54' | '60' | '72' | '78' | '90' | '144'"
     },
     "required": true
    }
   ]
  },
  "AvatarStackProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "AvatarStackProps",
    "nameFull": "AvatarStackProps"
   },
   "typeValue": {
    "raw": "AvatarStackProps",
    "print": [
     "interface AvatarStackProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
     "    avatarSize: '24' | '36' | '48' | '144';",
     "    urlArray: string[];",
     "    direction: 'right' | 'left';",
     "    avatarsCount?: number;",
     "    renderItem?: (url: string) => React.ReactElement;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "avatarsCount",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "avatarSize",
     "typeValue": {
      "raw": "'24' | '36' | '48' | '144'"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "direction",
     "typeValue": {
      "raw": "'right' | 'left'"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderItem",
     "typeValue": {
      "raw": "undefined | (url: string) => React.ReactElement<any, string | React.JSXElementConstructor<any>>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "urlArray",
     "typeValue": {
      "raw": "string[]"
     },
     "required": true
    }
   ]
  },
  "BaseRatingProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "BaseRatingProps",
    "nameFull": "BaseRatingProps<TValue>"
   },
   "typeValue": {
    "raw": "BaseRatingProps<TValue>",
    "print": [
     "interface BaseRatingProps<TValue> extends IHasCX, IDisableable, IEditable<TValue>, ICanBeReadonly, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "    from?: number;",
     "    to?: number;",
     "    step?: 0.5 | 1;",
     "    renderRating?: (rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "from",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderRating",
     "typeValue": {
      "raw": "undefined | (rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "step",
     "typeValue": {
      "raw": "undefined | 0.5 | 1"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "to",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "BaseTimePickerProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "BaseTimePickerProps",
    "nameFull": "BaseTimePickerProps"
   },
   "typeValue": {
    "raw": "BaseTimePickerProps",
    "print": [
     "interface BaseTimePickerProps extends IEditable<TimePickerValue | null>, IDisableable, ICanBeReadonly, IHasPlaceholder {",
     "    minutesStep?: number;",
     "    format?: 12 | 24;",
     "    id?: string;",
     "    renderTarget?(props: IDropdownToggler): React.ReactNode;",
     "    rawProps?: {",
     "        input?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
     "        body?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
     "    };",
     "    /** CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details */",
     "    inputCx?: CX;",
     "    /** CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details */",
     "    bodyCx?: CX;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bodyCx",
     "comment": [
      "CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "format",
     "typeValue": {
      "raw": "undefined | 12 | 24"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "minutesStep",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "typeValue": {
      "raw": "undefined | { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderTarget",
     "typeValue": {
      "raw": "undefined | (props: IDropdownToggler) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "BlockerProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "BlockerProps",
    "nameFull": "BlockerProps"
   },
   "typeValue": {
    "raw": "BlockerProps",
    "print": [
     "// TBD: move to loveship-specific mods",
     "// import { EpamColor, SpinnerMods } from '@epam/oswald';",
     "interface BlockerProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "    /** Turns the blocker on or off */",
     "    isEnabled: boolean;",
     "    /** Disables spinner animation display */",
     "    hideSpinner?: boolean;",
     "    /** Sets the minimal height in px, for cases when blocked content is empty */",
     "    spacerHeight?: number;",
     "    /** Replaces default spinner */",
     "    renderSpinner?(props: any): React.ReactNode; // React.ComponentClass<SpinnerMods>;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "hideSpinner",
     "comment": [
      "Disables spinner animation display"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isEnabled",
     "comment": [
      "Turns the blocker on or off"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderSpinner",
     "comment": [
      "Replaces default spinner"
     ],
     "typeValue": {
      "raw": "undefined | (props: any) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "spacerHeight",
     "comment": [
      "Sets the minimal height in px, for cases when blocked content is empty"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    }
   ]
  },
  "BurgerProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "BurgerProps",
    "nameFull": "BurgerProps"
   },
   "typeValue": {
    "raw": "BurgerProps",
    "print": [
     "interface BurgerProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "    burgerIcon?: Icon;",
     "    crossIcon?: Icon;",
     "    width?: number;",
     "    burgerContentCx?: string;",
     "    renderBurgerContent?: (props: {",
     "        onClose: () => void;",
     "    }) => React.ReactNode;",
     "    bg?: string;",
     "    logoUrl?: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bg",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "burgerContentCx",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "burgerIcon",
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "crossIcon",
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "logoUrl",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderBurgerContent",
     "typeValue": {
      "raw": "undefined | (props: { onClose: () => void; }) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    }
   ]
  },
  "ButtonBaseProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ButtonBaseProps",
    "nameFull": "ButtonBaseProps"
   },
   "typeValue": {
    "raw": "ButtonBaseProps",
    "print": [
     "interface ButtonBaseProps extends ButtonBaseCoreProps, IHasForwardedRef<HTMLButtonElement | HTMLAnchorElement> {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'right' | 'left'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    }
   ]
  },
  "ButtonProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ButtonProps",
    "nameFull": "ButtonProps"
   },
   "typeValue": {
    "raw": "ButtonProps",
    "print": [
     "interface ButtonProps extends ButtonCoreProps, IHasRawProps<React.ButtonHTMLAttributes<HTMLButtonElement>>, IHasForwardedRef<HTMLButtonElement | HTMLAnchorElement> {",
     "    /** Icon for clear value button (usually cross) */",
     "    clearIcon?: Icon;",
     "    /** CSS classes to put on the caption */",
     "    captionCX?: CX;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "typeValue": {
      "raw": "undefined | null | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "typeValue": {
      "raw": "undefined | 'right' | 'left'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "typeValue": {
      "raw": "undefined | 'right' | 'left'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'right' | 'left'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBasicPickerToggler",
       "nameFull": "IBasicPickerToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    }
   ]
  },
  "CalendarPresetsProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "CalendarPresetsProps",
    "nameFull": "CalendarPresetsProps"
   },
   "typeValue": {
    "raw": "CalendarPresetsProps",
    "print": [
     "interface CalendarPresetsProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "    presets: RangeDatePickerPresets;",
     "    onPresetSet: (nV: RangeDatePickerPresetValue) => void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPresetSet",
     "typeValue": {
      "raw": "(nV: RangeDatePickerPresetValue) => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "typeValue": {
      "raw": "RangeDatePickerPresets"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    }
   ]
  },
  "CalendarProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "CalendarProps",
    "nameFull": "CalendarProps<TSelection>"
   },
   "typeValue": {
    "raw": "CalendarProps<TSelection>",
    "print": [
     "interface CalendarProps<TSelection> extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "    value: TSelection;",
     "    onValueChange: (day: Dayjs) => void;",
     "    displayedDate: Dayjs;",
     "    renderDay?: (day: Dayjs, onDayClick: (day: Dayjs) => void) => React.ReactElement<Element>;",
     "    filter?(day: Dayjs): boolean;",
     "    hideAnotherMonths?: boolean;",
     "    getDayCX?: (day: Dayjs) => any;",
     "    isHoliday?: (day: Dayjs) => boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "displayedDate",
     "typeValue": {
      "raw": "Dayjs"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getDayCX",
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "hideAnotherMonths",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onValueChange",
     "typeValue": {
      "raw": "(day: Dayjs) => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "typeValue": {
      "raw": "TSelection"
     },
     "required": true
    }
   ]
  },
  "CarouselProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "CarouselProps",
    "nameFull": "CarouselProps"
   },
   "typeValue": {
    "raw": "CarouselProps",
    "print": [
     "interface CarouselProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "    items: Record<string, any>[];",
     "    renderItem: (item: Record<string, any>) => React.ReactNode;",
     "    divideBy: number;",
     "    arrowIcon?: Icon;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "arrowIcon",
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "divideBy",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "typeValue": {
      "raw": "Record<string, any>[]"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderItem",
     "typeValue": {
      "raw": "(item: Record<string, any>) => React.ReactNode"
     },
     "required": true
    }
   ]
  },
  "CarouselState": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "CarouselState",
    "nameFull": "CarouselState"
   },
   "typeValue": {
    "raw": "CarouselState",
    "print": [
     "interface CarouselState {",
     "    activeSlide: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "activeSlide",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    }
   ]
  },
  "CheckboxGroupProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "CheckboxGroupProps",
    "nameFull": "CheckboxGroupProps<TValue>"
   },
   "typeValue": {
    "raw": "CheckboxGroupProps<TValue>",
    "print": [
     "interface CheckboxGroupProps<TValue> extends ICanBeInvalid, IHasCX, IEditable<TValue[]>, IDisableable, IHasDirection, ICanBeReadonly, IHasRawProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>>, IHasForwardedRef<HTMLFieldSetElement> {",
     "    /** Overrides the component to render a single checkbox  */",
     "    CheckboxInput?: React.ComponentType<CheckboxProps>;",
     "    /** Each item defines: name: string, id: TValue (which item to put into array when item is checked), renderName() - an alternative to passing name  */",
     "    items: CheckboxGroupItem<TValue>[];",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "CheckboxInput",
     "comment": [
      "Overrides the component to render a single checkbox"
     ],
     "typeValue": {
      "raw": "undefined | React.ComponentClass<CheckboxProps, any> | React.FunctionComponent<CheckboxProps>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "direction",
     "typeValue": {
      "raw": "undefined | 'vertical' | 'horizontal'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasDirection",
       "nameFull": "IHasDirection"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "comment": [
      "Each item defines: name: string, id: TValue (which item to put into array when item is checked), renderName() - an alternative to passing name"
     ],
     "typeValue": {
      "raw": "CheckboxGroupItem<TValue>[]"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "CheckboxProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "CheckboxProps",
    "nameFull": "CheckboxProps"
   },
   "typeValue": {
    "raw": "CheckboxProps",
    "print": [
     "interface CheckboxProps extends CheckboxCoreProps, IHasTabIndex {",
     "    /** Check icon */",
     "    icon?: Icon;",
     "    /** Indeterminate state icon */",
     "    indeterminateIcon?: Icon;",
     "    renderLabel?(): React.ReactNode;",
     "    id?: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Check icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "indeterminate",
     "comment": [
      "Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICheckable",
       "nameFull": "ICheckable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "indeterminateIcon",
     "comment": [
      "Indeterminate state icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasLabel",
       "nameFull": "IHasLabel"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderLabel",
     "typeValue": {
      "raw": "undefined | () => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "ColumnsConfigurationRowProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ColumnsConfigurationRowProps",
    "nameFull": "ColumnsConfigurationRowProps"
   },
   "typeValue": {
    "raw": "ColumnsConfigurationRowProps",
    "print": [
     "interface ColumnsConfigurationRowProps extends GroupedDataColumnProps {",
     "    toggleVisibility: () => void;",
     "    togglePin: () => void;",
     "    onCanAcceptDrop: (props: AcceptDropParams<DndDataType, DndDataType>) => DropPositionOptions | null;",
     "    onDrop: (params: DropParams<DndDataType, DndDataType>) => void;",
     "    columnConfig: IColumnConfig;",
     "    isDndAllowed: boolean;",
     "    isPinned: boolean;",
     "    isPinnedAlways: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignSelf",
     "comment": [
      "Align cell content vertically"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataColumnProps",
       "nameFull": "DataColumnProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "canAcceptCopy",
     "typeValue": {
      "raw": "undefined | (from: DataTableSelectedCellData<TItem, TId, TFilter>) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataColumnProps",
       "nameFull": "DataColumnProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "canCopy",
     "typeValue": {
      "raw": "undefined | (cell: DataTableSelectedCellData<TItem, TId, TFilter>) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataColumnProps",
       "nameFull": "DataColumnProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Column caption. Can be a plain text, or any React Component"
     ],
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataColumnProps",
       "nameFull": "DataColumnProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "columnConfig",
     "typeValue": {
      "raw": "IColumnConfig"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fix",
     "comment": [
      "If specified, will make column fixed - it would not scroll horizontally"
     ],
     "typeValue": {
      "raw": "undefined | 'right' | 'left'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeFixed",
       "nameFull": "ICanBeFixed"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "groupKey",
     "typeValue": {
      "raw": "undefined | 'hidden' | 'displayedUnpinned' | 'displayedPinned'"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "GroupedDataColumnProps",
       "nameFull": "GroupedDataColumnProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "grow",
     "comment": [
      "The flex grow for the column. Allows column to grow in width if there's spare horizontal space"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataColumnProps",
       "nameFull": "DataColumnProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "info",
     "comment": [
      "Info tooltip displayed in the table header"
     ],
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataColumnProps",
       "nameFull": "DataColumnProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isAlwaysVisible",
     "comment": [
      "Disallows to hide column via ColumnsConfiguration"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataColumnProps",
       "nameFull": "DataColumnProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDndAllowed",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFilterActive",
     "comment": [
      "Should return true, if current filter affects the column.",
      " Usually, this prop is filled automatically by the useTableState hook.",
      " If you use the useTableState hook, you don't need to specify it manually."
     ],
     "typeValue": {
      "raw": "undefined | (filter: TFilter, column: DataColumnProps<TItem, TId, TFilter>) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataColumnProps",
       "nameFull": "DataColumnProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isHiddenByDefault",
     "comment": [
      "Makes column hidden by default. User can turn it on later, via ColumnsConfiguration"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataColumnProps",
       "nameFull": "DataColumnProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isPinned",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isPinnedAlways",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isSortable",
     "comment": [
      "Enables sorting arrows on the column.",
      " Sorting state is kept in DataSourceState.sorting"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataColumnProps",
       "nameFull": "DataColumnProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "justifyContent",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataColumnProps",
       "nameFull": "DataColumnProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "comment": [
      "Unique key to identify the column. Used to reference columns, e.g. in ColumnsConfig.",
      " Also, used as React key for cells, header cells, and other components inside tables."
     ],
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataColumnProps",
       "nameFull": "DataColumnProps<TItem, TId, TFilter>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "minWidth",
     "comment": [
      "Minimal width to which column can be resized manually"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataColumnProps",
       "nameFull": "DataColumnProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCanAcceptDrop",
     "typeValue": {
      "raw": "(props: DropPosition, boolean>> | null"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDrop",
     "typeValue": {
      "raw": "(params: DndDataType>) => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "render",
     "comment": [
      "Render the cell content. The item props is the value of the whole row (TItem)."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, props: DataRowProps<TItem, TId>) => any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataColumnProps",
       "nameFull": "DataColumnProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderCell",
     "comment": [
      "Overrides rendering of the whole cell"
     ],
     "typeValue": {
      "raw": "undefined | (cellProps: RenderCellProps<TItem, TId>) => any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataColumnProps",
       "nameFull": "DataColumnProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderDropdown",
     "comment": [
      "Renders column header dropdown.",
      " Usually, this prop is filled automatically by the useTableState hook.",
      " If you use the useTableState hook, you don't need to specify it manually."
     ],
     "typeValue": {
      "raw": "undefined | () => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataColumnProps",
       "nameFull": "DataColumnProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderFilter",
     "comment": [
      "Renders column filter.",
      " If you use useTableState hook, and you specify filter for the column, default filter will be rendered automatically.",
      " You can use this prop to render a custom filter component."
     ],
     "typeValue": {
      "raw": "undefined | (lens: IDropdownBodyProps) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataColumnProps",
       "nameFull": "DataColumnProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "textAlign",
     "comment": [
      "Aligns cell content horizontally"
     ],
     "typeValue": {
      "raw": "undefined | 'right' | 'left' | 'center'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataColumnProps",
       "nameFull": "DataColumnProps<TItem, TId, TFilter>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "togglePin",
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleVisibility",
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "comment": [
      "The width of the column. Usually, columns has exact this width.",
      " When all columns fit, and there's spare horizontal space, you can use 'grow' prop to use this space for certain columns.",
      " DataTable's columns can't shrink below width - table will add horizontal scrolling instead of shrinking columns"
     ],
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataColumnProps",
       "nameFull": "DataColumnProps<TItem, TId, TFilter>"
      }
     },
     "required": true
    }
   ]
  },
  "ControlGroupProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ControlGroupProps",
    "nameFull": "ControlGroupProps"
   },
   "typeValue": {
    "raw": "ControlGroupProps",
    "print": [
     "interface ControlGroupProps extends IHasCX, IHasChildren, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    }
   ]
  },
  "ControlIconProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ControlIconProps",
    "nameFull": "ControlIconProps"
   },
   "typeValue": {
    "raw": "ControlIconProps",
    "print": [
     "interface ControlIconProps extends IHasCX, IDisableable, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasTabIndex {",
     "    /** Icon to display */",
     "    icon?: Icon;",
     "    /** Flips the icon vertically */",
     "    flipY?: boolean;",
     "    /** Rotate the icon (cw stands for 'clock-wise', ccw stands for 'counter clock-wise)) */",
     "    rotate?: '0' | '90cw' | '180' | '90ccw';",
     "    /** Click handler */",
     "    onClick?(e: React.SyntheticEvent<HTMLDivElement>): void;",
     "    /** CSS style prop to put on the component */",
     "    style?: React.CSSProperties;",
     "    /** Icon size in pixels (both width and height, as icons are assumed to be square-shaped) */",
     "    size?: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "flipY",
     "comment": [
      "Flips the icon vertically"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon to display"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Click handler"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.SyntheticEvent<HTMLDivElement, Event>) => void"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rotate",
     "comment": [
      "Rotate the icon (cw stands for 'clock-wise', ccw stands for 'counter clock-wise))"
     ],
     "typeValue": {
      "raw": "undefined | '0' | '90cw' | '180' | '90ccw'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "comment": [
      "Icon size in pixels (both width and height, as icons are assumed to be square-shaped)"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "comment": [
      "CSS style prop to put on the component"
     ],
     "typeValue": {
      "raw": "undefined | React.CSSProperties"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    }
   ]
  },
  "DataSourceKeyboardParams": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataSourceKeyboardParams",
    "nameFull": "DataSourceKeyboardParams"
   },
   "typeValue": {
    "raw": "DataSourceKeyboardParams",
    "print": [
     "interface DataSourceKeyboardParams extends IEditable<DataSourceState> {",
     "    listView: IDataSourceView<any, any, any>;",
     "    rows: DataRowProps<any, any>[];",
     "    editMode?: 'dropdown' | 'modal';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "editMode",
     "typeValue": {
      "raw": "undefined | 'dropdown' | 'modal'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "listView",
     "typeValue": {
      "raw": "IDataSourceView<any, any, any>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rows",
     "typeValue": {
      "raw": "DataRowProps<any, any>[]"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "DataTableSelectionProviderProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataTableSelectionProviderProps",
    "nameFull": "DataTableSelectionProviderProps<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "DataTableSelectionProviderProps<TItem, TId, TFilter>",
    "print": [
     "interface DataTableSelectionProviderProps<TItem, TId, TFilter> extends React.PropsWithChildren {",
     "    rows: DataRowProps<TItem, TId>[];",
     "    columns: DataColumnProps<TItem, TId>[];",
     "    onCopy?: (copyFrom: DataTableSelectedCellData<TItem, TId, TFilter>, selectedCells: DataTableSelectedCellData<TItem, TId, TFilter>[]) => void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "typeName": {
       "name": "PropsWithChildren",
       "nameFull": "PropsWithChildren<P>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "columns",
     "typeValue": {
      "raw": "DataColumnProps<TItem, TId, any>[]"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCopy",
     "typeValue": {
      "raw": "undefined | (copyFrom: DataTableSelectedCellData<TItem, TId, TFilter>[]) => void"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rows",
     "typeValue": {
      "raw": "DataRowProps<TItem, TId>[]"
     },
     "required": true
    }
   ]
  },
  "DatePickerBodyBaseOptions": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DatePickerBodyBaseOptions",
    "nameFull": "DatePickerBodyBaseOptions"
   },
   "typeValue": {
    "raw": "DatePickerBodyBaseOptions",
    "print": [
     "interface DatePickerBodyBaseOptions extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "    filter?(day: Dayjs): boolean;",
     "    changeIsOpen?(newValue: boolean): void;",
     "    presets?: RangeDatePickerPresets;",
     "    renderDay?: (day: Dayjs, onDayClick: (day: Dayjs) => void) => React.ReactElement<Element>;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "changeIsOpen",
     "typeValue": {
      "raw": "undefined | (newValue: boolean) => void"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "typeValue": {
      "raw": "undefined | RangeDatePickerPresets"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
     },
     "required": false
    }
   ]
  },
  "DatePickerBodyBaseProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DatePickerBodyBaseProps",
    "nameFull": "DatePickerBodyBaseProps<TSelection>"
   },
   "typeValue": {
    "raw": "DatePickerBodyBaseProps<TSelection>",
    "print": [
     "interface DatePickerBodyBaseProps<TSelection> extends DatePickerBodyBaseOptions {",
     "    value: PickerBodyValue<TSelection>;",
     "    setSelectedDate: (newDate: TSelection) => void;",
     "    setDisplayedDateAndView: (displayedDate: Dayjs, view: ViewType) => void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "changeIsOpen",
     "typeValue": {
      "raw": "undefined | (newValue: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DatePickerBodyBaseOptions",
       "nameFull": "DatePickerBodyBaseOptions"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DatePickerBodyBaseOptions",
       "nameFull": "DatePickerBodyBaseOptions"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "typeValue": {
      "raw": "undefined | RangeDatePickerPresets"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DatePickerBodyBaseOptions",
       "nameFull": "DatePickerBodyBaseOptions"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DatePickerBodyBaseOptions",
       "nameFull": "DatePickerBodyBaseOptions"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "setDisplayedDateAndView",
     "typeValue": {
      "raw": "(displayedDate: ViewType) => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "setSelectedDate",
     "typeValue": {
      "raw": "(newDate: TSelection) => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "typeValue": {
      "raw": "PickerBodyValue<TSelection>"
     },
     "required": true
    }
   ]
  },
  "DatePickerState": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DatePickerState",
    "nameFull": "DatePickerState"
   },
   "typeValue": {
    "raw": "DatePickerState",
    "print": [
     "interface DatePickerState extends PickerBodyValue<string> {",
     "    isOpen: boolean;",
     "    inputValue: string | null;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "displayedDate",
     "typeValue": {
      "raw": "Dayjs"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerBodyValue",
       "nameFull": "PickerBodyValue<TSelection>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputValue",
     "typeValue": {
      "raw": "null | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectedDate",
     "typeValue": {
      "raw": "null | TSelection"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerBodyValue",
       "nameFull": "PickerBodyValue<TSelection>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "view",
     "typeValue": {
      "raw": "'DAY_SELECTION' | 'MONTH_SELECTION' | 'YEAR_SELECTION'"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerBodyValue",
       "nameFull": "PickerBodyValue<TSelection>"
      }
     },
     "required": true
    }
   ]
  },
  "DayProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DayProps",
    "nameFull": "DayProps"
   },
   "typeValue": {
    "raw": "DayProps",
    "print": [
     "interface DayProps extends IEditable<Dayjs>, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "    filter?(day: Dayjs): boolean;",
     "    getDayCX?: (day: Dayjs) => CX;",
     "    renderDayNumber?: (param: Dayjs) => any;",
     "    isSelected?: boolean;",
     "    isHoliday?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "filter",
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getDayCX",
     "typeValue": {
      "raw": "undefined | (day: ClassValue"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isSelected",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderDayNumber",
     "typeValue": {
      "raw": "undefined | (param: Dayjs) => any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "DragHandleProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DragHandleProps",
    "nameFull": "DragHandleProps"
   },
   "typeValue": {
    "raw": "DragHandleProps",
    "print": [
     "interface DragHandleProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IDisableable {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    }
   ]
  },
  "DropdownContainerProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DropdownContainerProps",
    "nameFull": "DropdownContainerProps"
   },
   "typeValue": {
    "raw": "DropdownContainerProps",
    "print": [
     "interface DropdownContainerProps extends IHasCX, IHasChildren, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement>, IDropdownBodyProps {",
     "    width?: number | 'auto';",
     "    maxWidth?: number;",
     "    height?: number;",
     "    showArrow?: boolean;",
     "    style?: React.CSSProperties;",
     "    /**",
     "     * Pass true to wrap DropdownContainer with FocusLock component to support keyboard navigation.",
     "     * If omitted, true value will be used.",
     "     *",
     "     * After DropdownContainer appeared the focus will be set on the first focusable element inside.",
     "     */",
     "    focusLock?: boolean;",
     "    /**",
     "     * Pass true to return focus into initial position on unmount.",
     "     * If omitted, true value will be used. It's used if focusLock=true.",
     "     * */",
     "    returnFocus?: boolean;",
     "    /**",
     "     * Pass true to lock focus within DropdownContainer.",
     "     * If omitted, true value will be used. It's used if focusLock=true.",
     "     */",
     "    persistentFocus?: boolean;",
     "    /**",
     "     * Pass any extra props to the FocusLock wrapper.",
     "     */",
     "    lockProps?: Record<string, any>;",
     "    /**",
     "     * Pass an array of ref pointing to the nodes, which focus lock should consider and a part of it. This is a way of focus scattering.",
     "     */",
     "    shards?: Array<React.RefObject<HTMLElement>>;",
     "    /**",
     "     * Pass element name if you need to change internal FocusLock div element, to any other.",
     "     */",
     "    as?: string;",
     "    /**",
     "     * Pass true to handle Escape key press and call props.onClose().",
     "     * If omitted, true value will be used. It's used if focusLock=true.",
     "     */",
     "    closeOnEsc?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "arrowProps",
     "typeValue": {
      "raw": "undefined | PopperArrowProps"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "as",
     "comment": [
      "Pass element name if you need to change internal FocusLock div element, to any other."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnEsc",
     "comment": [
      "Pass true to handle Escape key press and call props.onClose().",
      " If omitted, true value will be used. It's used if focusLock=true."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "focusLock",
     "comment": [
      "Pass true to wrap DropdownContainer with FocusLock component to support keyboard navigation.",
      " If omitted, true value will be used.",
      "",
      " After DropdownContainer appeared the focus will be set on the first focusable element inside."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "height",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "lockProps",
     "comment": [
      "Pass any extra props to the FocusLock wrapper."
     ],
     "typeValue": {
      "raw": "undefined | Record<string, any>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "persistentFocus",
     "comment": [
      "Pass true to lock focus within DropdownContainer.",
      " If omitted, true value will be used. It's used if focusLock=true."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "typeValue": {
      "raw": "undefined | 'right' | 'left' | 'top' | 'bottom' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "returnFocus",
     "comment": [
      "Pass true to return focus into initial position on unmount.",
      " If omitted, true value will be used. It's used if focusLock=true."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "scheduleUpdate",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "shards",
     "comment": [
      "Pass an array of ref pointing to the nodes, which focus lock should consider and a part of it. This is a way of focus scattering."
     ],
     "typeValue": {
      "raw": "undefined | React.RefObject<HTMLElement>[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "showArrow",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "typeValue": {
      "raw": "undefined | React.CSSProperties"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "togglerHeight",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "togglerWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "typeValue": {
      "raw": "undefined | number | 'auto'"
     },
     "required": false
    }
   ]
  },
  "DropSpotRenderParams": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DropSpotRenderParams",
    "nameFull": "DropSpotRenderParams"
   },
   "typeValue": {
    "raw": "DropSpotRenderParams",
    "print": [
     "interface DropSpotRenderParams extends DropSpotState {",
     "    eventHandlers: EventHandlers;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "eventHandlers",
     "typeValue": {
      "raw": "EventHandlers"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggingOver",
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DropSpotState",
       "nameFull": "DropSpotState"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDragStart",
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DropSpotState",
       "nameFull": "DropSpotState"
      }
     },
     "required": true
    }
   ]
  },
  "FlexSpacerProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "FlexSpacerProps",
    "nameFull": "FlexSpacerProps"
   },
   "typeValue": {
    "raw": "FlexSpacerProps",
    "print": [
     "interface FlexSpacerProps extends IAdaptiveItem {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "collapseToMore",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "estimatedWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "showInBurgerMenu",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    }
   ]
  },
  "HeaderCellContentProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "HeaderCellContentProps",
    "nameFull": "HeaderCellContentProps"
   },
   "typeValue": {
    "raw": "HeaderCellContentProps",
    "print": [
     "interface HeaderCellContentProps extends DndActorRenderParams {",
     "    onResizeStart: (e: React.MouseEvent) => void;",
     "    onResizeEnd: (e: React.MouseEvent) => void;",
     "    onResize: (e: MouseEvent) => void;",
     "    toggleSort: (e: React.MouseEvent) => void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "classNames",
     "comment": [
      "CSS class names to add to the element.",
      " Some of these markers are used by the DndActor internally, so they must be added even if no used by component itself to apply styles."
     ],
     "typeValue": {
      "raw": "string[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "dragData",
     "comment": [
      "Drag data associated with the element. Specified always, even if there is no DnD operation happening."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "eventHandlers",
     "comment": [
      "Event handlers. Component is expected to pass these events to the top element it renders.",
      " As onClick event on the element will be overwritten, use DndActorProps.onClick to receive click events on the element"
     ],
     "typeValue": {
      "raw": "{ onTouchStart?(e: React.TouchEvent<Element>): void; onPointerDown?(e: React.PointerEvent<Element>): void; onPointerEnter?(e: React.PointerEvent<any>): void; onPointerMove?(e: React.PointerEvent<any>): void; onPointerLeave?(e: React.PointerEvent<any>): void; onPointerUp?(e: React.PointerEvent<any>): void; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDndInProgress",
     "comment": [
      "True if any drag and drop operation is in progress, even if the element not being dragged"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggable",
     "comment": [
      "True, if the element can be dragged. Doesn't mean that DnD is active."
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggedOut",
     "comment": [
      "True, if the element is dragged out. True for placeholder left when it's element it dragged out. False for Drag Ghost."
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggedOver",
     "comment": [
      "True, if the element is being dragged over, even if drop is not accepted by the element (canAcceptDrop returned false)"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDragGhost",
     "comment": [
      "True, if the element is rendered as Drag Ghost. All other flags are false for drag ghost."
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropAccepted",
     "comment": [
      "True, if the element is being dragged over, and drop on it is accepted - canAcceptDrop returned true"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "onResize",
     "typeValue": {
      "raw": "(e: MouseEvent) => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "onResizeEnd",
     "typeValue": {
      "raw": "(e: React.MouseEvent<Element, MouseEvent>) => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "onResizeStart",
     "typeValue": {
      "raw": "(e: React.MouseEvent<Element, MouseEvent>) => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "position",
     "comment": [
      "Drop position. Chosen from accepted drop positions according to pointer coordinates"
     ],
     "typeValue": {
      "raw": "undefined | 'right' | 'left' | 'top' | 'bottom' | 'inside'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Ref to the DOM element to perform DnD actions"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleSort",
     "typeValue": {
      "raw": "(e: React.MouseEvent<Element, MouseEvent>) => void"
     },
     "required": true
    }
   ]
  },
  "IconButtonBaseProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IconButtonBaseProps",
    "nameFull": "IconButtonBaseProps"
   },
   "typeValue": {
    "raw": "IconButtonBaseProps",
    "print": [
     "interface IconButtonBaseProps extends ButtonBaseProps {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'right' | 'left'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    }
   ]
  },
  "InputAddonProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "InputAddonProps",
    "nameFull": "InputAddonProps"
   },
   "typeValue": {
    "raw": "InputAddonProps",
    "print": [
     "interface InputAddonProps extends IHasCX {",
     "    content: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "content",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    }
   ]
  },
  "IProgressBarProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IProgressBarProps",
    "nameFull": "IProgressBarProps"
   },
   "typeValue": {
    "raw": "IProgressBarProps",
    "print": [
     "interface IProgressBarProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
     "    progress: number;",
     "    label?: string;",
     "    hideLabel?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "hideLabel",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "progress",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    }
   ]
  },
  "IRenderInputProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "IRenderInputProps",
    "nameFull": "IRenderInputProps"
   },
   "typeValue": {
    "raw": "IRenderInputProps",
    "print": [
     "type IRenderInputProps = React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "'aria-activedescendant'",
     "comment": [
      "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-atomic'",
     "comment": [
      "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-autocomplete'",
     "comment": [
      "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be",
      " presented if they are made."
     ],
     "typeValue": {
      "raw": "undefined | 'list' | 'none' | 'inline' | 'both'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-busy'",
     "comment": [
      "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-checked'",
     "comment": [
      "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.",
      " @see aria-pressed @see aria-selected."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false' | 'mixed'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-colcount'",
     "comment": [
      "Defines the total number of columns in a table, grid, or treegrid.",
      " @see aria-colindex."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-colindex'",
     "comment": [
      "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.",
      " @see aria-colcount @see aria-colspan."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-colspan'",
     "comment": [
      "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.",
      " @see aria-colindex @see aria-rowspan."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-controls'",
     "comment": [
      "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
      " @see aria-owns."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-current'",
     "comment": [
      "Indicates the element that represents the current item within a container or set of related elements."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'date' | 'time' | 'true' | 'false' | 'page' | 'step' | 'location'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-describedby'",
     "comment": [
      "Identifies the element (or elements) that describes the object.",
      " @see aria-labelledby"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-details'",
     "comment": [
      "Identifies the element that provides a detailed, extended description for the object.",
      " @see aria-describedby."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-disabled'",
     "comment": [
      "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.",
      " @see aria-hidden @see aria-readonly."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-dropeffect'",
     "comment": [
      "Indicates what functions can be performed when a dragged object is released on the drop target.",
      " @deprecated in ARIA 1.1"
     ],
     "typeValue": {
      "raw": "undefined | 'link' | 'none' | 'copy' | 'execute' | 'move' | 'popup'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-errormessage'",
     "comment": [
      "Identifies the element that provides an error message for the object.",
      " @see aria-invalid @see aria-describedby."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-expanded'",
     "comment": [
      "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-flowto'",
     "comment": [
      "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,",
      " allows assistive technology to override the general default of reading in document source order."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-grabbed'",
     "comment": [
      "Indicates an element's \"grabbed\" state in a drag-and-drop operation.",
      " @deprecated in ARIA 1.1"
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-haspopup'",
     "comment": [
      "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false' | 'dialog' | 'grid' | 'listbox' | 'menu' | 'tree'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-hidden'",
     "comment": [
      "Indicates whether the element is exposed to an accessibility API.",
      " @see aria-disabled."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-invalid'",
     "comment": [
      "Indicates the entered value does not conform to the format expected by the application.",
      " @see aria-errormessage."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false' | 'grammar' | 'spelling'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-keyshortcuts'",
     "comment": [
      "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-label'",
     "comment": [
      "Defines a string value that labels the current element.",
      " @see aria-labelledby."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-labelledby'",
     "comment": [
      "Identifies the element (or elements) that labels the current element.",
      " @see aria-describedby."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-level'",
     "comment": [
      "Defines the hierarchical level of an element within a structure."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-live'",
     "comment": [
      "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
     ],
     "typeValue": {
      "raw": "undefined | 'off' | 'assertive' | 'polite'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-modal'",
     "comment": [
      "Indicates whether an element is modal when displayed."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-multiline'",
     "comment": [
      "Indicates whether a text box accepts multiple lines of input or only a single line."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-multiselectable'",
     "comment": [
      "Indicates that the user may select more than one item from the current selectable descendants."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-orientation'",
     "comment": [
      "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
     ],
     "typeValue": {
      "raw": "undefined | 'vertical' | 'horizontal'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-owns'",
     "comment": [
      "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship",
      " between DOM elements where the DOM hierarchy cannot be used to represent the relationship.",
      " @see aria-controls."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-placeholder'",
     "comment": [
      "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.",
      " A hint could be a sample value or a brief description of the expected format."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-posinset'",
     "comment": [
      "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
      " @see aria-setsize."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-pressed'",
     "comment": [
      "Indicates the current \"pressed\" state of toggle buttons.",
      " @see aria-checked @see aria-selected."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false' | 'mixed'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-readonly'",
     "comment": [
      "Indicates that the element is not editable, but is otherwise operable.",
      " @see aria-disabled."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-relevant'",
     "comment": [
      "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.",
      " @see aria-atomic."
     ],
     "typeValue": {
      "raw": "undefined | 'text' | 'additions' | 'additions removals' | 'additions text' | 'all' | 'removals' | 'removals additions' | 'removals text' | 'text additions' | 'text removals'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-required'",
     "comment": [
      "Indicates that user input is required on the element before a form may be submitted."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-roledescription'",
     "comment": [
      "Defines a human-readable, author-localized description for the role of an element."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-rowcount'",
     "comment": [
      "Defines the total number of rows in a table, grid, or treegrid.",
      " @see aria-rowindex."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-rowindex'",
     "comment": [
      "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.",
      " @see aria-rowcount @see aria-rowspan."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-rowspan'",
     "comment": [
      "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.",
      " @see aria-rowindex @see aria-colspan."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-selected'",
     "comment": [
      "Indicates the current \"selected\" state of various widgets.",
      " @see aria-checked @see aria-pressed."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-setsize'",
     "comment": [
      "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
      " @see aria-posinset."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-sort'",
     "comment": [
      "Indicates if items in a table or grid are sorted in ascending or descending order."
     ],
     "typeValue": {
      "raw": "undefined | 'none' | 'ascending' | 'descending' | 'other'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-valuemax'",
     "comment": [
      "Defines the maximum allowed value for a range widget."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-valuemin'",
     "comment": [
      "Defines the minimum allowed value for a range widget."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-valuenow'",
     "comment": [
      "Defines the current value for a range widget.",
      " @see aria-valuetext."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-valuetext'",
     "comment": [
      "Defines the human readable text alternative of aria-valuenow for a range widget."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "about",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "accept",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "accessKey",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "alt",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoCapitalize",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoComplete",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoCorrect",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoSave",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "capture",
     "typeValue": {
      "raw": "undefined | false | true | 'user' | 'environment'"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "checked",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "className",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "contentEditable",
     "typeValue": {
      "raw": "undefined | false | true | 'inherit' | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "contextMenu",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "crossOrigin",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dangerouslySetInnerHTML",
     "typeValue": {
      "raw": "undefined | { __html: string; }"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "datatype",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "defaultChecked",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "defaultValue",
     "typeValue": {
      "raw": "undefined | string | number | readonly string[]"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dir",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disabled",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "draggable",
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "enterKeyHint",
     "typeValue": {
      "raw": "undefined | 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "form",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "formAction",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "formEncType",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "formMethod",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "formNoValidate",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "formTarget",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "height",
     "typeValue": {
      "raw": "undefined | string | number"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "hidden",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inlist",
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputMode",
     "comment": [
      "Hints at the type of data that might be entered by the user while editing the element or its contents",
      " @see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute"
     ],
     "typeValue": {
      "raw": "undefined | 'search' | 'email' | 'tel' | 'text' | 'url' | 'none' | 'numeric' | 'decimal'"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "is",
     "comment": [
      "Specify that a standard HTML element should behave like a defined custom built-in element",
      " @see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "itemID",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "itemProp",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "itemRef",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "itemScope",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "itemType",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "undefined | null | string | number"
     },
     "from": {
      "typeName": {
       "name": "Attributes",
       "nameFull": "Attributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "lang",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "list",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "max",
     "typeValue": {
      "raw": "undefined | string | number"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "min",
     "typeValue": {
      "raw": "undefined | string | number"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "minLength",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "multiple",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "nonce",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAbort",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAbortCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationEnd",
     "typeValue": {
      "raw": "undefined | React.AnimationEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationEndCapture",
     "typeValue": {
      "raw": "undefined | React.AnimationEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationIteration",
     "typeValue": {
      "raw": "undefined | React.AnimationEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationIterationCapture",
     "typeValue": {
      "raw": "undefined | React.AnimationEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationStart",
     "typeValue": {
      "raw": "undefined | React.AnimationEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationStartCapture",
     "typeValue": {
      "raw": "undefined | React.AnimationEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAuxClick",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAuxClickCapture",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBeforeInput",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBeforeInputCapture",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "typeValue": {
      "raw": "undefined | React.FocusEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlurCapture",
     "typeValue": {
      "raw": "undefined | React.FocusEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCanPlay",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCanPlayCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCanPlayThrough",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCanPlayThroughCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onChange",
     "typeValue": {
      "raw": "undefined | React.ChangeEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onChangeCapture",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClick",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClickCapture",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionEnd",
     "typeValue": {
      "raw": "undefined | React.CompositionEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionEndCapture",
     "typeValue": {
      "raw": "undefined | React.CompositionEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionStart",
     "typeValue": {
      "raw": "undefined | React.CompositionEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionStartCapture",
     "typeValue": {
      "raw": "undefined | React.CompositionEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionUpdate",
     "typeValue": {
      "raw": "undefined | React.CompositionEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionUpdateCapture",
     "typeValue": {
      "raw": "undefined | React.CompositionEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onContextMenu",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onContextMenuCapture",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCopy",
     "typeValue": {
      "raw": "undefined | React.ClipboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCopyCapture",
     "typeValue": {
      "raw": "undefined | React.ClipboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCut",
     "typeValue": {
      "raw": "undefined | React.ClipboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCutCapture",
     "typeValue": {
      "raw": "undefined | React.ClipboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDoubleClick",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDoubleClickCapture",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDrag",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragCapture",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragEnd",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragEndCapture",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragEnter",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragEnterCapture",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragExit",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragExitCapture",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragLeave",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragLeaveCapture",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragOver",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragOverCapture",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragStart",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragStartCapture",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDrop",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDropCapture",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDurationChange",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDurationChangeCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onEmptied",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onEmptiedCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onEncrypted",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onEncryptedCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onEnded",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onEndedCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onError",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onErrorCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "typeValue": {
      "raw": "undefined | React.FocusEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocusCapture",
     "typeValue": {
      "raw": "undefined | React.FocusEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onGotPointerCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onGotPointerCaptureCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onInput",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onInputCapture",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onInvalid",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onInvalidCapture",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyDown",
     "typeValue": {
      "raw": "undefined | React.KeyboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyDownCapture",
     "typeValue": {
      "raw": "undefined | React.KeyboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyPress",
     "comment": [
      "@deprecated"
     ],
     "typeValue": {
      "raw": "undefined | React.KeyboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyPressCapture",
     "comment": [
      "@deprecated"
     ],
     "typeValue": {
      "raw": "undefined | React.KeyboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyUp",
     "typeValue": {
      "raw": "undefined | React.KeyboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyUpCapture",
     "typeValue": {
      "raw": "undefined | React.KeyboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLoad",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadedData",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadedDataCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadedMetadata",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadedMetadataCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadStart",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadStartCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLostPointerCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLostPointerCaptureCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseDown",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseDownCapture",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseEnter",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseLeave",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseMove",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseMoveCapture",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseOut",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseOutCapture",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseOver",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseOverCapture",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseUp",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseUpCapture",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPaste",
     "typeValue": {
      "raw": "undefined | React.ClipboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPasteCapture",
     "typeValue": {
      "raw": "undefined | React.ClipboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPause",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPauseCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPlay",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPlayCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPlaying",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPlayingCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerCancel",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerCancelCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerDown",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerDownCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerEnter",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerEnterCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerLeave",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerLeaveCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerMove",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerMoveCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerOut",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerOutCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerOver",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerOverCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerUp",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerUpCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onProgress",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onProgressCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onRateChange",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onRateChangeCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onReset",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onResetCapture",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onResize",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onResizeCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onScroll",
     "typeValue": {
      "raw": "undefined | React.UIEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onScrollCapture",
     "typeValue": {
      "raw": "undefined | React.UIEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSeeked",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSeekedCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSeeking",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSeekingCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSelect",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSelectCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onStalled",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onStalledCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSubmit",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSubmitCapture",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSuspend",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSuspendCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTimeUpdate",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTimeUpdateCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchCancel",
     "typeValue": {
      "raw": "undefined | React.TouchEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchCancelCapture",
     "typeValue": {
      "raw": "undefined | React.TouchEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchEnd",
     "typeValue": {
      "raw": "undefined | React.TouchEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchEndCapture",
     "typeValue": {
      "raw": "undefined | React.TouchEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchMove",
     "typeValue": {
      "raw": "undefined | React.TouchEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchMoveCapture",
     "typeValue": {
      "raw": "undefined | React.TouchEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchStart",
     "typeValue": {
      "raw": "undefined | React.TouchEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchStartCapture",
     "typeValue": {
      "raw": "undefined | React.TouchEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTransitionEnd",
     "typeValue": {
      "raw": "undefined | React.TransitionEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTransitionEndCapture",
     "typeValue": {
      "raw": "undefined | React.TransitionEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onVolumeChange",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onVolumeChangeCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onWaiting",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onWaitingCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onWheel",
     "typeValue": {
      "raw": "undefined | React.WheelEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onWheelCapture",
     "typeValue": {
      "raw": "undefined | React.WheelEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "pattern",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "prefix",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "property",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "radioGroup",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "readOnly",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "typeValue": {
      "raw": "undefined | null | string | (instance: T | null) => void | React.RefObject<T>"
     },
     "from": {
      "typeName": {
       "name": "ClassAttributes",
       "nameFull": "ClassAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "required",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "resource",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "results",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "role",
     "typeValue": {
      "raw": "undefined | 'search' | 'button' | 'checkbox' | 'radio' | string & {} | 'alert' | 'alertdialog' | 'application' | 'article' | 'banner' | 'cell' | 'columnheader' | 'combobox' | 'complementary' | 'contentinfo' | 'definition' | 'dialog' | 'directory' | 'document' | 'feed' | 'figure' | 'form' | 'grid' | 'gridcell' | 'group' | 'heading' | 'img' | 'link' | 'list' | 'listbox' | 'listitem' | 'log' | 'main' | 'marquee' | 'math' | 'menu' | 'menubar' | 'menuitem' | 'menuitemcheckbox' | 'menuitemradio' | 'navigation' | 'none' | 'note' | 'option' | 'presentation' | 'progressbar' | 'radiogroup' | 'region' | 'row' | 'rowgroup' | 'rowheader' | 'scrollbar' | 'searchbox' | 'separator' | 'slider' | 'spinbutton' | 'status' | 'switch' | 'tab' | 'table' | 'tablist' | 'tabpanel' | 'term' | 'textbox' | 'timer' | 'toolbar' | 'tooltip' | 'tree' | 'treegrid' | 'treeitem'"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "security",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "slot",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "spellCheck",
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "src",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "step",
     "typeValue": {
      "raw": "undefined | string | number"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "typeValue": {
      "raw": "undefined | React.CSSProperties"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "suppressContentEditableWarning",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "suppressHydrationWarning",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "title",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "translate",
     "typeValue": {
      "raw": "undefined | 'yes' | 'no'"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "typeValue": {
      "raw": "undefined | 'number' | 'hidden' | 'search' | 'button' | 'checkbox' | 'color' | 'date' | 'datetime-local' | 'email' | 'file' | 'image' | 'month' | 'password' | 'radio' | 'range' | 'reset' | 'submit' | 'tel' | 'text' | 'time' | 'url' | 'week' | string & {}"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "typeof",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "unselectable",
     "typeValue": {
      "raw": "undefined | 'on' | 'off'"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "typeValue": {
      "raw": "undefined | string | number | readonly string[]"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "vocab",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "typeValue": {
      "raw": "undefined | string | number"
     },
     "from": {
      "typeName": {
       "name": "InputHTMLAttributes",
       "nameFull": "InputHTMLAttributes<T>"
      }
     },
     "required": false
    }
   ]
  },
  "IScrollSpyApi": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IScrollSpyApi",
    "nameFull": "IScrollSpyApi"
   },
   "typeValue": {
    "raw": "IScrollSpyApi",
    "print": [
     "interface IScrollSpyApi {",
     "    scrollToElement: (item?: string) => void;",
     "    currentActive: string;",
     "    setRef: (ref: HTMLElement) => void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "currentActive",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "scrollToElement",
     "typeValue": {
      "raw": "(item?: string | undefined) => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "setRef",
     "typeValue": {
      "raw": "(ref: HTMLElement) => void"
     },
     "required": true
    }
   ]
  },
  "IScrollSpyProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IScrollSpyProps",
    "nameFull": "IScrollSpyProps"
   },
   "typeValue": {
    "raw": "IScrollSpyProps",
    "print": [
     "interface IScrollSpyProps {",
     "    elements?: Readonly<string[]>;",
     "    initialActive?: string;",
     "    options?: IntersectionObserverInit;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "elements",
     "typeValue": {
      "raw": "undefined | readonly string[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "initialActive",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "options",
     "typeValue": {
      "raw": "undefined | IntersectionObserverInit"
     },
     "required": false
    }
   ]
  },
  "LabeledInputProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "LabeledInputProps",
    "nameFull": "LabeledInputProps"
   },
   "typeValue": {
    "raw": "LabeledInputProps",
    "print": [
     "interface LabeledInputProps extends LabeledInputCoreProps {",
     "    /** Overrides the default Tooltip component to use for info tooltip */",
     "    Tooltip?: React.ComponentType<TooltipProps>;",
     "    /** Overrides the default info icon */",
     "    infoIcon?: Icon;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "htmlFor",
     "comment": [
      "HTML 'for' tag to bind the label to a component.",
      " Can be used when component can't be wrapped by the LabeledInput, e.g. when form is layed out as table with labels and inputs placed into different columns"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "LabeledInputCoreProps",
       "nameFull": "LabeledInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "info",
     "comment": [
      "Info hint text to show in tooltip"
     ],
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "LabeledInputCoreProps",
       "nameFull": "LabeledInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "infoIcon",
     "comment": [
      "Overrides the default info icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOptional",
     "comment": [
      "Marks related field as optional"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "LabeledInputCoreProps",
       "nameFull": "LabeledInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasLabel",
       "nameFull": "IHasLabel"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "labelPosition",
     "comment": [
      "Position of the label, relative to the wrapped component (top of left)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'top'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "LabeledInputCoreProps",
       "nameFull": "LabeledInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "Tooltip",
     "comment": [
      "Overrides the default Tooltip component to use for info tooltip"
     ],
     "typeValue": {
      "raw": "undefined | React.ComponentClass<TooltipProps, any> | React.FunctionComponent<TooltipProps>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    }
   ]
  },
  "MainMenuCustomElementProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "MainMenuCustomElementProps",
    "nameFull": "MainMenuCustomElementProps"
   },
   "typeValue": {
    "raw": "MainMenuCustomElementProps",
    "print": [
     "interface MainMenuCustomElementProps extends IAdaptiveItem, IHasChildren {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "collapseToMore",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "estimatedWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "showInBurgerMenu",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    }
   ]
  },
  "MainMenuDropdownProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "MainMenuDropdownProps",
    "nameFull": "MainMenuDropdownProps"
   },
   "typeValue": {
    "raw": "MainMenuDropdownProps",
    "print": [
     "interface MainMenuDropdownProps extends IHasChildren, IHasCaption, IAdaptiveItem, ICanRedirect, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLElement>> {",
     "    renderBody?: (props: DropdownBodyProps) => React.ReactNode;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "collapseToMore",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "estimatedWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderBody",
     "typeValue": {
      "raw": "undefined | (props: DropdownBodyProps) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "showInBurgerMenu",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    }
   ]
  },
  "MainMenuLogoProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "MainMenuLogoProps",
    "nameFull": "MainMenuLogoProps"
   },
   "typeValue": {
    "raw": "MainMenuLogoProps",
    "print": [
     "interface MainMenuLogoProps extends IAdaptiveItem, ICanRedirect, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "    logoUrl?: string;",
     "    logoBgColor?: string;",
     "    showArrow?: boolean;",
     "    onContextMenu?: any;",
     "    link?: Link;",
     "    onClick?: (e: React.MouseEvent) => any;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "collapseToMore",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "estimatedWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "typeValue": {
      "raw": "undefined | Link"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "logoBgColor",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "logoUrl",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClick",
     "typeValue": {
      "raw": "undefined | (e: React.MouseEvent<Element, MouseEvent>) => any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onContextMenu",
     "typeValue": {
      "raw": "any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "showArrow",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "showInBurgerMenu",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    }
   ]
  },
  "MainMenuProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "MainMenuProps",
    "nameFull": "MainMenuProps"
   },
   "typeValue": {
    "raw": "MainMenuProps",
    "print": [
     "interface MainMenuProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "    items?: AdaptiveItemProps[];",
     "    children?: any;",
     "    externalGap?: number;",
     "    appLogoUrl?: string;",
     "    appLogoBgColor?: string;",
     "    customerLogoUrl?: string;",
     "    customerLogoBgColor?: string;",
     "    customerLogoWidth?: number;",
     "    isTransparent?: boolean;",
     "    renderBurger?: (props: {",
     "        onClose: () => void;",
     "    }) => React.ReactNode;",
     "    alwaysShowBurger?: boolean;",
     "    serverBadge?: string;",
     "    tooltipTechInfo?: React.ReactNode;",
     "    logoLink?: Link;",
     "    logoHref?: string;",
     "    logoWidth?: number;",
     "    onLogoClick?: (e: MouseEvent) => any;",
     "    customerLogoLink?: Link;",
     "    customerLogoHref?: string;",
     "    MainMenuDropdown?: React.ComponentType<MainMenuDropdownProps>;",
     "    Burger?: React.ComponentType<BurgerProps>;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alwaysShowBurger",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "appLogoBgColor",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "appLogoUrl",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "Burger",
     "typeValue": {
      "raw": "undefined | React.ComponentClass<BurgerProps, any> | React.FunctionComponent<BurgerProps>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "customerLogoBgColor",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "customerLogoHref",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "customerLogoLink",
     "typeValue": {
      "raw": "undefined | Link"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "customerLogoUrl",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "customerLogoWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "externalGap",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isTransparent",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "typeValue": {
      "raw": "undefined | { render: (item: any, hiddenItems?: any[] | undefined, displayedItems?: any[] | undefined) => any; priority: number; collapsedContainer?: boolean | undefined; id: string; }[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "logoHref",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "logoLink",
     "typeValue": {
      "raw": "undefined | Link"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "logoWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "MainMenuDropdown",
     "typeValue": {
      "raw": "undefined | React.ComponentClass<MainMenuDropdownProps, any> | React.FunctionComponent<MainMenuDropdownProps>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLogoClick",
     "typeValue": {
      "raw": "undefined | (e: React.MouseEvent<Element, MouseEvent>) => any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderBurger",
     "typeValue": {
      "raw": "undefined | (props: { onClose: () => void; }) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "serverBadge",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tooltipTechInfo",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "required": false
    }
   ]
  },
  "MonthSelectionProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "MonthSelectionProps",
    "nameFull": "MonthSelectionProps"
   },
   "typeValue": {
    "raw": "MonthSelectionProps",
    "print": [
     "interface MonthSelectionProps extends IEditable<Dayjs>, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "    selectedDate: Dayjs;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectedDate",
     "typeValue": {
      "raw": "Dayjs"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "NumericInputProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "NumericInputProps",
    "nameFull": "NumericInputProps"
   },
   "typeValue": {
    "raw": "NumericInputProps",
    "print": [
     "interface NumericInputProps extends ICanFocus<HTMLInputElement>, IHasCX, IClickable, IDisableable, IEditable<number | null>, IHasPlaceholder, ICanBeReadonly, IAnalyticableOnChange<number>, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "    /** Maximum value (default is Number.MAX_SAFE_INTEGER) */",
     "    max?: number;",
     "    /** Minimum value (default is 0) */",
     "    min?: number;",
     "    /** Overrides the up/increase icon */",
     "    upIcon?: Icon;",
     "    /** Overrides the down/decrease icon */",
     "    downIcon?: Icon;",
     "    /** Increase/decrease step (for icons and ) */",
     "    step?: number;",
     "    /** CSS classes to put directly on the Input element */",
     "    inputCx?: CX;",
     "    /** HTML ID */",
     "    id?: string;",
     "    /** Turn off up/down (increase/decrease) buttons */",
     "    disableArrows?: boolean;",
     "    /** Align text inside the component. Useful for tables (in cell-mode) - to align numbers in table column */",
     "    align?: 'left' | 'right';",
     "    /** Turns off locale-based formatting, standard Number.toString() is used instead */",
     "    disableLocaleFormatting?: boolean;",
     "    /** Number formatting options. See #{link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat} */",
     "    formatOptions?: Intl.NumberFormatOptions;",
     "    /**",
     "     * A function to convert current input value to displayed text.",
     "     * Overrides standard Intl-based formatting.",
     "     * If passed, only maximumFractionDigits considered from formatOptions when both properties provided.",
     "     * Note, that formatting is used when input is out of focus.",
     "     */",
     "    formatValue?(value: number): string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "align",
     "comment": [
      "Align text inside the component. Useful for tables (in cell-mode) - to align numbers in table column"
     ],
     "typeValue": {
      "raw": "undefined | 'right' | 'left'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disableArrows",
     "comment": [
      "Turn off up/down (increase/decrease) buttons"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disableLocaleFormatting",
     "comment": [
      "Turns off locale-based formatting, standard Number.toString() is used instead"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "downIcon",
     "comment": [
      "Overrides the down/decrease icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "formatOptions",
     "comment": [
      "Number formatting options. See #{link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat}"
     ],
     "typeValue": {
      "raw": "undefined | Intl.NumberFormatOptions"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "formatValue",
     "comment": [
      "A function to convert current input value to displayed text.",
      " Overrides standard Intl-based formatting.",
      " If passed, only maximumFractionDigits considered from formatOptions when both properties provided.",
      " Note, that formatting is used when input is out of focus."
     ],
     "typeValue": {
      "raw": "undefined | (value: number) => string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML ID"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS classes to put directly on the Input element"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "max",
     "comment": [
      "Maximum value (default is Number.MAX_SAFE_INTEGER)"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "min",
     "comment": [
      "Minimum value (default is 0)"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "step",
     "comment": [
      "Increase/decrease step (for icons and )"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "upIcon",
     "comment": [
      "Overrides the up/increase icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "PaginatorParams": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "PaginatorParams",
    "nameFull": "PaginatorParams"
   },
   "typeValue": {
    "raw": "PaginatorParams",
    "print": [
     "interface PaginatorParams extends IHasRawProps<React.ReactHTMLElement<HTMLElement>> {",
     "    size: '24' | '30';",
     "    pages: PaginatorItem[];",
     "    goToNext(): void;",
     "    goToPrev(): void;",
     "    isLast: boolean;",
     "    isFirst: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "goToNext",
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "goToPrev",
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFirst",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLast",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "pages",
     "typeValue": {
      "raw": "PaginatorItem[]"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "'24' | '30'"
     },
     "required": true
    }
   ]
  },
  "PaginatorProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "PaginatorProps",
    "nameFull": "PaginatorProps"
   },
   "typeValue": {
    "raw": "PaginatorProps",
    "print": [
     "interface PaginatorProps extends IEditable<number>, IAnalyticableOnChange<number>, IHasRawProps<React.ReactHTMLElement<HTMLElement>> {",
     "    /** Component size */",
     "    size: '24' | '30';",
     "    /** Total number of pages */",
     "    totalPages: number;",
     "    /** Override default rendering, keeping the component behavior */",
     "    render?(params: PaginatorParams): any;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "render",
     "comment": [
      "Override default rendering, keeping the component behavior"
     ],
     "typeValue": {
      "raw": "undefined | (params: PaginatorParams) => any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "comment": [
      "Component size"
     ],
     "typeValue": {
      "raw": "'24' | '30'"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "totalPages",
     "comment": [
      "Total number of pages"
     ],
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "PickerBindingHelper": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "PickerBindingHelper",
    "nameFull": "PickerBindingHelper<TItem, TId>"
   },
   "typeValue": {
    "raw": "PickerBindingHelper<TItem, TId>",
    "print": [
     "interface PickerBindingHelper<TItem, TId> {",
     "    dataSourceStateToValue(dsState: DataSourceState<any, TId>, props: PickerBaseProps<TId, TItem>, dataSource: IDataSource<TItem, TId, any>): any;",
     "    applyValueToDataSourceState(dsState: DataSourceState<any, TId>, value: any, props: PickerBaseProps<TId, TItem>, dataSource: IDataSource<TItem, TId, any>): DataSourceState<any, TId>;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "applyValueToDataSourceState",
     "typeValue": {
      "raw": "(dsState: DataSourceState<any, TId>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "dataSourceStateToValue",
     "typeValue": {
      "raw": "(dsState: IDataSource<TItem, TId, any>) => any"
     },
     "required": true
    }
   ]
  },
  "PickerBindingProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "PickerBindingProps",
    "nameFull": "PickerBindingProps<TItem, TId>"
   },
   "typeValue": {
    "raw": "{ selectionMode: 'single'; valueType: 'id'; } & IEditable<TId> | { selectionMode: 'single'; valueType?: 'entity' | undefined; } & IEditable<TItem> | { selectionMode: 'multi'; valueType: 'id'; emptyValue?: [] | null | undefined; } & IEditable<TId[]> | { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]>",
    "print": [
     "type PickerBindingProps<TItem, TId> = SinglePickerProps<TId, TItem> | ArrayPickerProps<TId, TItem>;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "typeValue": {
      "raw": "'single'"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "SinglePickerProps",
       "nameFull": "SinglePickerProps<TId, TItem>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "valueType",
     "typeValue": {
      "raw": "'id'"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "SinglePickerProps",
       "nameFull": "SinglePickerProps<TId, TItem>"
      }
     },
     "required": true
    }
   ]
  },
  "PickerBindingValueType": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "PickerBindingValueType",
    "nameFull": "PickerBindingValueType"
   },
   "typeValue": {
    "raw": "'scalar' | 'array'",
    "print": [
     "type PickerBindingValueType = 'scalar' | 'array';"
    ]
   }
  },
  "PickerBodyBaseProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "PickerBodyBaseProps",
    "nameFull": "PickerBodyBaseProps"
   },
   "typeValue": {
    "raw": "PickerBodyBaseProps",
    "print": [
     "interface PickerBodyBaseProps extends DataSourceListProps, IEditable<DataSourceState>, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
     "    onKeyDown?(e: React.KeyboardEvent<HTMLElement>): void;",
     "    renderNotFound?: () => React.ReactNode;",
     "    rows: React.ReactNode[];",
     "    scheduleUpdate?: () => void;",
     "    search: IEditable<string>;",
     "    showSearch?: boolean | 'auto';",
     "    fixedBodyPosition?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "exactRowsCount",
     "comment": [
      "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListCounts",
       "nameFull": "DataSourceListCounts"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fixedBodyPosition",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReloading",
     "comment": [
      "Signals that data is reloading on search/sort/filter/reload."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListProps",
       "nameFull": "DataSourceListProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "knownRowsCount",
     "comment": [
      "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
      " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
      " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListCounts",
       "nameFull": "DataSourceListCounts"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "typeValue": {
      "raw": "undefined | (e: React.KeyboardEvent<HTMLElement>) => void"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderNotFound",
     "typeValue": {
      "raw": "undefined | () => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rows",
     "typeValue": {
      "raw": "React.ReactNode[]"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowsCount",
     "comment": [
      "Count of rows, after applying filter, and folding on tree nodes.",
      " Obsolete! Please switch to exactRowsCount / knownRowsCount"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListCounts",
       "nameFull": "DataSourceListCounts"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "scheduleUpdate",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "typeValue": {
      "raw": "IEditable<string>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "typeValue": {
      "raw": "undefined | ICheckable"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListProps",
       "nameFull": "DataSourceListProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "showSearch",
     "typeValue": {
      "raw": "undefined | false | true | 'auto'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "totalCount",
     "comment": [
      "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListCounts",
       "nameFull": "DataSourceListCounts"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "PickerBodyValue": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "PickerBodyValue",
    "nameFull": "PickerBodyValue<TSelection>"
   },
   "typeValue": {
    "raw": "PickerBodyValue<TSelection>",
    "print": [
     "interface PickerBodyValue<TSelection> {",
     "    selectedDate: TSelection | null;",
     "    displayedDate: Dayjs;",
     "    view: ViewType;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "displayedDate",
     "typeValue": {
      "raw": "Dayjs"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectedDate",
     "typeValue": {
      "raw": "null | TSelection"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "view",
     "typeValue": {
      "raw": "'DAY_SELECTION' | 'MONTH_SELECTION' | 'YEAR_SELECTION'"
     },
     "required": true
    }
   ]
  },
  "PickerInputBaseProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "PickerInputBaseProps",
    "nameFull": "PickerInputBaseProps<TItem, TId>"
   },
   "typeValue": {
    "raw": "ClassValue; highlightSearchMatches?: boolean | undefined; } | ClassValue; highlightSearchMatches?: boolean | undefined; } | ClassValue; highlightSearchMatches?: boolean | undefined; } | ClassValue; highlightSearchMatches?: boolean | undefined; }",
    "print": [
     "type PickerInputBaseProps<TItem, TId> = PickerBaseProps<TItem, TId> & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & {",
     "    /** dropdown (default) - show selection in dropdown; modal - opens modal window to select items */",
     "    editMode?: 'dropdown' | 'modal';",
     "    /** Maximum number of tags to display in input, before collapsing to \"N items selected\" mode */",
     "    maxItems?: number;",
     "    /** Minimum width of dropdown body */",
     "    minBodyWidth?: number;",
     "    /** Prevents selected items tags to occupy multiple lines  */",
     "    isSingleLine?: boolean;",
     "    /** Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/) */",
     "    dropdownPlacement?: Placement;",
     "    /** Replaces default 'toggler' - an input to which Picker attaches dropdown */",
     "    renderToggler?: (props: PickerTogglerProps<TItem, TId>) => React.ReactNode;",
     "    /**",
     "      *  Defines where search field is:",
     "      * 'input' - try to place search inside the toggler (default for single-select),",
     "      * 'body' - put search inside the dropdown (default for multi-select)",
     "      * 'none' - disables search completely",
     "      *",
     "      * Note: 'searchPosition' cannot be 'input' if 'editMode' is 'modal'",
     "      */",
     "    searchPosition?: 'input' | 'body' | 'none';",
     "    /** Disallow to clear Picker value (cross icon) */",
     "    disableClear?: boolean;",
     "    /**",
     "     * Minimum characters to type, before search will trigger. If input characters number is less then 'minCharsToSearch', it will disable opening dropdown body.",
     "     * By default search triggers after input value is changed.",
     "     *",
     "     * Note: defined minCharsToSearch isn't compatible with searchPosition=body.",
     "     */",
     "    minCharsToSearch?: number;",
     "    /** Overrides default height of the dropdown body */",
     "    dropdownHeight?: number;",
     "    /** Sets focus to component when it's mounted */",
     "    autoFocus?: boolean;",
     "    /** HTML attributes to put directly to the input and body elements */",
     "    rawProps?: {",
     "        input?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
     "        body?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
     "    };",
     "    /** Adds custom footer to the dropdown body */",
     "    renderFooter?: (props: PickerInputFooterProps<TItem, TId>) => React.ReactNode;",
     "    /** Disables moving the dropdown body, when togglers is moved. Used in filters panel, to prevent filter selection to 'jump' after adding a filter. */",
     "    fixedBodyPosition?: boolean;",
     "    portalTarget?: HTMLElement;",
     "    /** CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details */",
     "    inputCx?: CX;",
     "    /** CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details */",
     "    bodyCx?: CX;",
     "    /**",
     "     * Enables highlighting of the items' text with search-matching results.",
     "     * */",
     "    highlightSearchMatches?: boolean;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "comment": [
      "Sets focus to component when it's mounted"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "bodyCx",
     "comment": [
      "CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'implicit' | 'explicit'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dataSource",
     "comment": [
      "Provides items to the Picker"
     ],
     "typeValue": {
      "raw": "IDataSource<TItem, TId, any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableClear",
     "comment": [
      "Disallow to clear Picker value (cross icon)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownHeight",
     "comment": [
      "Overrides default height of the dropdown body"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownPlacement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "typeValue": {
      "raw": "undefined | 'right' | 'left' | 'top' | 'bottom' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "editMode",
     "comment": [
      "dropdown (default) - show selection in dropdown; modal - opens modal window to select items"
     ],
     "typeValue": {
      "raw": "undefined | 'dropdown' | 'modal'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "emptyValue",
     "comment": [
      "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
     ],
     "typeValue": {
      "raw": "undefined | null | []"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "entityName",
     "comment": [
      "Name of the entity being selected. Affects wording like \"Please select [entity]\""
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "entityPluralName",
     "comment": [
      "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "comment": [
      "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fixedBodyPosition",
     "comment": [
      "Disables moving the dropdown body, when togglers is moved. Used in filters panel, to prevent filter selection to 'jump' after adding a filter."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getName",
     "comment": [
      "Gets entity display name. Default it item.name."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getRowOptions",
     "comment": [
      "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "comment": [
      "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => string[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "highlightSearchMatches",
     "comment": [
      "Enables highlighting of the items' text with search-matching results."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'right' | 'left'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "You can return true for all, or some items to fold them."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isSingleLine",
     "comment": [
      "Prevents selected items tags to occupy multiple lines"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxItems",
     "comment": [
      "Maximum number of tags to display in input, before collapsing to \"N items selected\" mode"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "minBodyWidth",
     "comment": [
      "Minimum width of dropdown body"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "minCharsToSearch",
     "comment": [
      "Minimum characters to type, before search will trigger. If input characters number is less then 'minCharsToSearch', it will disable opening dropdown body.",
      " By default search triggers after input value is changed.",
      "",
      " Note: defined minCharsToSearch isn't compatible with searchPosition=body."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "portalTarget",
     "typeValue": {
      "raw": "undefined | HTMLElement"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "HTML attributes to put directly to the input and body elements"
     ],
     "typeValue": {
      "raw": "undefined | { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderFooter",
     "comment": [
      "Adds custom footer to the dropdown body"
     ],
     "typeValue": {
      "raw": "undefined | (props: PickerInputFooterProps<TItem, TId>) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderNotFound",
     "comment": [
      "Overrides the default 'no records found' banner.",
      " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
     ],
     "typeValue": {
      "raw": "undefined | (props: { search: string; onClose: () => void; }) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderRow",
     "comment": [
      "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
     ],
     "typeValue": {
      "raw": "undefined | (props: DataSourceState<Record<string, any>, any>) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderToggler",
     "comment": [
      "Replaces default 'toggler' - an input to which Picker attaches dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (props: PickerTogglerProps<TItem, TId>) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "searchPosition",
     "comment": [
      "Defines where search field is:",
      " 'input' - try to place search inside the toggler (default for single-select),",
      " 'body' - put search inside the dropdown (default for multi-select)",
      " 'none' - disables search completely",
      "",
      " Note: 'searchPosition' cannot be 'input' if 'editMode' is 'modal'"
     ],
     "typeValue": {
      "raw": "undefined | 'none' | 'input' | 'body'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "comment": [
      "'single' - only one item is selected. 'multi' - multiple items are selected"
     ],
     "typeValue": {
      "raw": "'single'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "SinglePickerProps",
       "nameFull": "SinglePickerProps<TId, TItem>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "comment": [
      "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, sorting: SortingOption<any>) => any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "comment": [
      "Defines sorting to pass to the DataSource"
     ],
     "typeValue": {
      "raw": "undefined | SortingOption<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "valueType",
     "comment": [
      "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
     ],
     "typeValue": {
      "raw": "undefined | 'id'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "SinglePickerProps",
       "nameFull": "SinglePickerProps<TId, TItem>"
      }
     },
     "required": false
    }
   ]
  },
  "PickerListBaseProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "PickerListBaseProps",
    "nameFull": "PickerListBaseProps<TItem, TId>"
   },
   "typeValue": {
    "raw": "SortingOption<any>): string; } | SortingOption<any>): string; } | SortingOption<any>): string; } | SortingOption<any>): string; }",
    "print": [
     "type PickerListBaseProps<TItem, TId> = Exclude<PickerBaseProps<TItem, TId>, 'cascadeSelection'> & {",
     "    /**",
     "     * Number of default items to show initially, when nothing is selected.",
     "     * Default it 10 items",
     "     */",
     "    maxDefaultItems?: number;",
     "    /** Maximum total number of items to show, including selected */",
     "    maxTotalItems?: number;",
     "    /**",
     "     * Ids of items to show first.",
     "     * If not specified, top props.maxDefaultItems will be shown according to the DataSource sorting settings (default is 10)",
     "     */",
     "    defaultIds?: TId[];",
     "    /** If provided, top picks will be automatically adjusted based on last user selection, and stored as user setting under provided key */",
     "    settingsKey?: string;",
     "    sortBy?(item: TItem, sorting: SortingOption): string;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'implicit' | 'explicit'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dataSource",
     "comment": [
      "Provides items to the Picker"
     ],
     "typeValue": {
      "raw": "IDataSource<TItem, TId, any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "defaultIds",
     "comment": [
      "Ids of items to show first.",
      " If not specified, top props.maxDefaultItems will be shown according to the DataSource sorting settings (default is 10)"
     ],
     "typeValue": {
      "raw": "undefined | TId[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "emptyValue",
     "comment": [
      "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
     ],
     "typeValue": {
      "raw": "undefined | null | []"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "entityName",
     "comment": [
      "Name of the entity being selected. Affects wording like \"Please select [entity]\""
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "entityPluralName",
     "comment": [
      "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "comment": [
      "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getName",
     "comment": [
      "Gets entity display name. Default it item.name."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getRowOptions",
     "comment": [
      "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "comment": [
      "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => string[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "You can return true for all, or some items to fold them."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxDefaultItems",
     "comment": [
      "Number of default items to show initially, when nothing is selected.",
      " Default it 10 items"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxTotalItems",
     "comment": [
      "Maximum total number of items to show, including selected"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderNotFound",
     "comment": [
      "Overrides the default 'no records found' banner.",
      " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
     ],
     "typeValue": {
      "raw": "undefined | (props: { search: string; onClose: () => void; }) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderRow",
     "comment": [
      "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
     ],
     "typeValue": {
      "raw": "undefined | (props: DataSourceState<Record<string, any>, any>) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "comment": [
      "'single' - only one item is selected. 'multi' - multiple items are selected"
     ],
     "typeValue": {
      "raw": "'single'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "SinglePickerProps",
       "nameFull": "SinglePickerProps<TId, TItem>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "settingsKey",
     "comment": [
      "If provided, top picks will be automatically adjusted based on last user selection, and stored as user setting under provided key"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "comment": [
      "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, sorting: SortingOption<any>) => any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "comment": [
      "Defines sorting to pass to the DataSource"
     ],
     "typeValue": {
      "raw": "undefined | SortingOption<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "valueType",
     "comment": [
      "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
     ],
     "typeValue": {
      "raw": "undefined | 'id'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "SinglePickerProps",
       "nameFull": "SinglePickerProps<TId, TItem>"
      }
     },
     "required": false
    }
   ]
  },
  "PickerModalArrayProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "PickerModalArrayProps",
    "nameFull": "PickerModalArrayProps<TId, TItem>"
   },
   "typeValue": {
    "raw": "{ selectionMode: 'multi'; valueType: 'id'; initialValue: TId[]; } & IModal<TId[]> | { selectionMode: 'multi'; valueType: 'entity'; initialValue: TItem[]; } & IModal<TItem[]>",
    "print": [
     "type PickerModalArrayProps<TId, TItem> = ({",
     "    selectionMode: 'multi';",
     "    valueType: 'id';",
     "    initialValue: TId[];",
     "} & IModal<TId[]>) | ({",
     "    selectionMode: 'multi';",
     "    valueType: 'entity';",
     "    initialValue: TItem[];",
     "} & IModal<TItem[]>);"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "abort",
     "typeValue": {
      "raw": "(result?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "initialValue",
     "typeValue": {
      "raw": "TId[]"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "typeValue": {
      "raw": "'multi'"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "success",
     "typeValue": {
      "raw": "(result: TResult) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "valueType",
     "typeValue": {
      "raw": "'id'"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "zIndex",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    }
   ]
  },
  "PickerModalOptions": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "PickerModalOptions",
    "nameFull": "PickerModalOptions<TItem, TId>"
   },
   "typeValue": {
    "raw": "PickerModalOptions<TItem, TId>",
    "print": [
     "interface PickerModalOptions<TItem, TId> extends IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
     "    renderFilter?(editableFilter: IEditable<any>): React.ReactNode;",
     "    renderFooter?: (props: PickerFooterProps<TItem, TId> & Partial<IModal<any>>) => React.ReactNode;",
     "    disallowClickOutside?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "disallowClickOutside",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderFilter",
     "typeValue": {
      "raw": "undefined | (editableFilter: IEditable<any>) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderFooter",
     "typeValue": {
      "raw": "undefined | (props: IModal<any>>) => React.ReactNode"
     },
     "required": false
    }
   ]
  },
  "PickerModalScalarProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "PickerModalScalarProps",
    "nameFull": "PickerModalScalarProps<TId, TItem>"
   },
   "typeValue": {
    "raw": "{ selectionMode: 'single'; valueType: 'id'; initialValue: TId; } & IModal<TId> | { selectionMode: 'single'; valueType: 'entity'; initialValue: TItem; } & IModal<TItem>",
    "print": [
     "type PickerModalScalarProps<TId, TItem> = ({",
     "    selectionMode: 'single';",
     "    valueType: 'id';",
     "    initialValue: TId;",
     "} & IModal<TId>) | ({",
     "    selectionMode: 'single';",
     "    valueType: 'entity';",
     "    initialValue: TItem;",
     "} & IModal<TItem>);"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "abort",
     "typeValue": {
      "raw": "(result?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "initialValue",
     "typeValue": {
      "raw": "TId"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "typeValue": {
      "raw": "'single'"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "success",
     "typeValue": {
      "raw": "(result: TResult) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "valueType",
     "typeValue": {
      "raw": "'id'"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "zIndex",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    }
   ]
  },
  "PickerTogglerProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "PickerTogglerProps",
    "nameFull": "PickerTogglerProps<TItem, TId>"
   },
   "typeValue": {
    "raw": "PickerTogglerProps<TItem, TId>",
    "print": [
     "interface PickerTogglerProps<TItem = any, TId = any> extends IPickerToggler<TItem, TId>, ICanFocus<HTMLElement>, IHasIcon, IHasCX, ICanBeReadonly, IHasRawProps<React.HTMLAttributes<HTMLElement>> {",
     "    cancelIcon?: Icon;",
     "    dropdownIcon?: Icon;",
     "    autoFocus?: boolean;",
     "    renderItem?(props: DataRowProps<TItem, TId>): React.ReactNode;",
     "    getName?: (item: TItem) => string;",
     "    entityName?: string;",
     "    maxItems?: number;",
     "    isSingleLine?: boolean;",
     "    pickerMode: 'single' | 'multi';",
     "    searchPosition: 'input' | 'body' | 'none';",
     "    onKeyDown?(e: React.KeyboardEvent<HTMLElement>): void;",
     "    closePickerBody(): void;",
     "    disableSearch?: boolean;",
     "    disableClear?: boolean;",
     "    minCharsToSearch?: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cancelIcon",
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "closePickerBody",
     "typeValue": {
      "raw": "() => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disableClear",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disableSearch",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "entityName",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getName",
     "typeValue": {
      "raw": "undefined | (item: TItem) => string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'right' | 'left'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disables component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isSingleLine",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxItems",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "minCharsToSearch",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBasicPickerToggler",
       "nameFull": "IBasicPickerToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "typeValue": {
      "raw": "undefined | (e: React.KeyboardEvent<HTMLElement>) => void"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "pickerMode",
     "typeValue": {
      "raw": "'multi' | 'single'"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderItem",
     "typeValue": {
      "raw": "undefined | (props: DataRowProps<TItem, TId>) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "searchPosition",
     "typeValue": {
      "raw": "'none' | 'input' | 'body'"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectedRowsCount",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPickerToggler",
       "nameFull": "IPickerToggler<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selection",
     "typeValue": {
      "raw": "undefined | DataRowProps<TItem, TId>[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPickerToggler",
       "nameFull": "IPickerToggler<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "PortalProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "PortalProps",
    "nameFull": "PortalProps"
   },
   "typeValue": {
    "raw": "PortalProps",
    "print": [
     "interface PortalProps extends IHasChildren {",
     "    target?: HTMLElement;",
     "    key?: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "typeValue": {
      "raw": "undefined | HTMLElement"
     },
     "required": false
    }
   ]
  },
  "PositionValues": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "PositionValues",
    "nameFull": "PositionValues"
   },
   "typeValue": {
    "raw": "PositionValues",
    "print": [
     "interface PositionValues extends positionValues {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "clientHeight",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "typeName": {
       "name": "positionValues",
       "nameFull": "positionValues"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "clientWidth",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "typeName": {
       "name": "positionValues",
       "nameFull": "positionValues"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "left",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "typeName": {
       "name": "positionValues",
       "nameFull": "positionValues"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "scrollHeight",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "typeName": {
       "name": "positionValues",
       "nameFull": "positionValues"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "scrollLeft",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "typeName": {
       "name": "positionValues",
       "nameFull": "positionValues"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "scrollTop",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "typeName": {
       "name": "positionValues",
       "nameFull": "positionValues"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "scrollWidth",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "typeName": {
       "name": "positionValues",
       "nameFull": "positionValues"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "top",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "typeName": {
       "name": "positionValues",
       "nameFull": "positionValues"
      }
     },
     "required": true
    }
   ]
  },
  "RadioGroupItem": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RadioGroupItem",
    "nameFull": "RadioGroupItem<TValue>"
   },
   "typeValue": {
    "raw": "RadioGroupItem<TValue>",
    "print": [
     "interface RadioGroupItem<TValue> extends IDisableable {",
     "    name?: string;",
     "    renderName?: () => React.ReactNode;",
     "    id: TValue;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "TValue"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderName",
     "typeValue": {
      "raw": "undefined | () => React.ReactNode"
     },
     "required": false
    }
   ]
  },
  "RadioGroupProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RadioGroupProps",
    "nameFull": "RadioGroupProps<TValue>"
   },
   "typeValue": {
    "raw": "RadioGroupProps<TValue>",
    "print": [
     "interface RadioGroupProps<TValue> extends IHasCX, IEditable<TValue>, IDisableable, IHasDirection, ICanBeReadonly, IHasRawProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>>, IHasForwardedRef<HTMLFieldSetElement> {",
     "    RadioInput?: React.ComponentType<RadioInputProps>;",
     "    items: RadioGroupItem<TValue>[];",
     "    radioInputProps?: RadioInputProps & {",
     "        key: React.Key;",
     "    };",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "direction",
     "typeValue": {
      "raw": "undefined | 'vertical' | 'horizontal'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasDirection",
       "nameFull": "IHasDirection"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "typeValue": {
      "raw": "RadioGroupItem<TValue>[]"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "RadioInput",
     "typeValue": {
      "raw": "undefined | React.ComponentClass<RadioInputProps, any> | React.FunctionComponent<RadioInputProps>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "radioInputProps",
     "typeValue": {
      "raw": "undefined | RadioInputProps & { key: React.Key; }"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "RadioInputProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RadioInputProps",
    "nameFull": "RadioInputProps"
   },
   "typeValue": {
    "raw": "RadioInputProps",
    "print": [
     "interface RadioInputProps extends IHasCX, IDisableable, IEditable<boolean>, IHasLabel, ICanBeReadonly, IAnalyticableOnChange<boolean>, IHasRawProps<React.LabelHTMLAttributes<HTMLLabelElement>>, IHasForwardedRef<HTMLLabelElement> {",
     "    icon?: Icon;",
     "    renderLabel?(): React.ReactNode;",
     "    tabIndex?: number;",
     "    id?: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasLabel",
       "nameFull": "IHasLabel"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderLabel",
     "typeValue": {
      "raw": "undefined | () => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "RangeSliderState": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RangeSliderState",
    "nameFull": "RangeSliderState"
   },
   "typeValue": {
    "raw": "RangeSliderState",
    "print": [
     "interface RangeSliderState extends SliderBaseState {",
     "    activeHandle: string | null;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "activeHandle",
     "typeValue": {
      "raw": "null | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "SliderBaseState",
       "nameFull": "SliderBaseState"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "valueWidth",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "SliderBaseState",
       "nameFull": "SliderBaseState"
      }
     },
     "required": true
    }
   ]
  },
  "RangeSliderValue": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RangeSliderValue",
    "nameFull": "RangeSliderValue"
   },
   "typeValue": {
    "raw": "RangeSliderValue",
    "print": [
     "interface RangeSliderValue {",
     "    from: number;",
     "    to: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "from",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "to",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    }
   ]
  },
  "RatingProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RatingProps",
    "nameFull": "RatingProps"
   },
   "typeValue": {
    "raw": "RatingProps",
    "print": [
     "interface RatingProps extends BaseRatingProps<number> {",
     "    filledStarIcon?: any;",
     "    emptyStarIcon?: any;",
     "    hideTooltip?: boolean;",
     "    hint?: (value: number) => string;",
     "    Tooltip?: React.ComponentType<TooltipProps>;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "emptyStarIcon",
     "typeValue": {
      "raw": "any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filledStarIcon",
     "typeValue": {
      "raw": "any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "from",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "BaseRatingProps",
       "nameFull": "BaseRatingProps<TValue>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "hideTooltip",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "hint",
     "typeValue": {
      "raw": "undefined | (value: number) => string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderRating",
     "typeValue": {
      "raw": "undefined | (rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "BaseRatingProps",
       "nameFull": "BaseRatingProps<TValue>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "step",
     "typeValue": {
      "raw": "undefined | 0.5 | 1"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "BaseRatingProps",
       "nameFull": "BaseRatingProps<TValue>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "to",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "BaseRatingProps",
       "nameFull": "BaseRatingProps<TValue>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "Tooltip",
     "typeValue": {
      "raw": "undefined | React.ComponentClass<TooltipProps, any> | React.FunctionComponent<TooltipProps>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "RichTextViewProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RichTextViewProps",
    "nameFull": "RichTextViewProps"
   },
   "typeValue": {
    "raw": "RichTextViewProps",
    "print": [
     "interface RichTextViewProps extends IHasCX, IHasChildren, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
     "    htmlContent?: any;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "htmlContent",
     "typeValue": {
      "raw": "any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    }
   ]
  },
  "ScrollbarProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ScrollbarProps",
    "nameFull": "ScrollbarProps"
   },
   "typeValue": {
    "raw": "ScrollbarProps",
    "print": [
     "interface ScrollbarProps extends IHasCX, Omit<LibScrollbarProps, 'ref'>, IHasRawProps<Scrollbars> {",
     "    disableScroll?: boolean;",
     "    hasTopShadow?: boolean;",
     "    hasBottomShadow?: boolean;",
     "    renderView?: (props: any) => React.ReactElement;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "'aria-activedescendant'",
     "comment": [
      "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-atomic'",
     "comment": [
      "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-autocomplete'",
     "comment": [
      "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be",
      " presented if they are made."
     ],
     "typeValue": {
      "raw": "undefined | 'list' | 'none' | 'inline' | 'both'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-busy'",
     "comment": [
      "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-checked'",
     "comment": [
      "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.",
      " @see aria-pressed @see aria-selected."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false' | 'mixed'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-colcount'",
     "comment": [
      "Defines the total number of columns in a table, grid, or treegrid.",
      " @see aria-colindex."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-colindex'",
     "comment": [
      "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.",
      " @see aria-colcount @see aria-colspan."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-colspan'",
     "comment": [
      "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.",
      " @see aria-colindex @see aria-rowspan."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-controls'",
     "comment": [
      "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
      " @see aria-owns."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-current'",
     "comment": [
      "Indicates the element that represents the current item within a container or set of related elements."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'date' | 'time' | 'true' | 'false' | 'page' | 'step' | 'location'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-describedby'",
     "comment": [
      "Identifies the element (or elements) that describes the object.",
      " @see aria-labelledby"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-details'",
     "comment": [
      "Identifies the element that provides a detailed, extended description for the object.",
      " @see aria-describedby."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-disabled'",
     "comment": [
      "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.",
      " @see aria-hidden @see aria-readonly."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-dropeffect'",
     "comment": [
      "Indicates what functions can be performed when a dragged object is released on the drop target.",
      " @deprecated in ARIA 1.1"
     ],
     "typeValue": {
      "raw": "undefined | 'link' | 'none' | 'copy' | 'execute' | 'move' | 'popup'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-errormessage'",
     "comment": [
      "Identifies the element that provides an error message for the object.",
      " @see aria-invalid @see aria-describedby."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-expanded'",
     "comment": [
      "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-flowto'",
     "comment": [
      "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,",
      " allows assistive technology to override the general default of reading in document source order."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-grabbed'",
     "comment": [
      "Indicates an element's \"grabbed\" state in a drag-and-drop operation.",
      " @deprecated in ARIA 1.1"
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-haspopup'",
     "comment": [
      "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false' | 'dialog' | 'grid' | 'listbox' | 'menu' | 'tree'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-hidden'",
     "comment": [
      "Indicates whether the element is exposed to an accessibility API.",
      " @see aria-disabled."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-invalid'",
     "comment": [
      "Indicates the entered value does not conform to the format expected by the application.",
      " @see aria-errormessage."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false' | 'grammar' | 'spelling'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-keyshortcuts'",
     "comment": [
      "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-label'",
     "comment": [
      "Defines a string value that labels the current element.",
      " @see aria-labelledby."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-labelledby'",
     "comment": [
      "Identifies the element (or elements) that labels the current element.",
      " @see aria-describedby."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-level'",
     "comment": [
      "Defines the hierarchical level of an element within a structure."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-live'",
     "comment": [
      "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
     ],
     "typeValue": {
      "raw": "undefined | 'off' | 'assertive' | 'polite'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-modal'",
     "comment": [
      "Indicates whether an element is modal when displayed."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-multiline'",
     "comment": [
      "Indicates whether a text box accepts multiple lines of input or only a single line."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-multiselectable'",
     "comment": [
      "Indicates that the user may select more than one item from the current selectable descendants."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-orientation'",
     "comment": [
      "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
     ],
     "typeValue": {
      "raw": "undefined | 'vertical' | 'horizontal'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-owns'",
     "comment": [
      "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship",
      " between DOM elements where the DOM hierarchy cannot be used to represent the relationship.",
      " @see aria-controls."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-placeholder'",
     "comment": [
      "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.",
      " A hint could be a sample value or a brief description of the expected format."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-posinset'",
     "comment": [
      "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
      " @see aria-setsize."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-pressed'",
     "comment": [
      "Indicates the current \"pressed\" state of toggle buttons.",
      " @see aria-checked @see aria-selected."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false' | 'mixed'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-readonly'",
     "comment": [
      "Indicates that the element is not editable, but is otherwise operable.",
      " @see aria-disabled."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-relevant'",
     "comment": [
      "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.",
      " @see aria-atomic."
     ],
     "typeValue": {
      "raw": "undefined | 'text' | 'additions' | 'additions removals' | 'additions text' | 'all' | 'removals' | 'removals additions' | 'removals text' | 'text additions' | 'text removals'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-required'",
     "comment": [
      "Indicates that user input is required on the element before a form may be submitted."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-roledescription'",
     "comment": [
      "Defines a human-readable, author-localized description for the role of an element."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-rowcount'",
     "comment": [
      "Defines the total number of rows in a table, grid, or treegrid.",
      " @see aria-rowindex."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-rowindex'",
     "comment": [
      "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.",
      " @see aria-rowcount @see aria-rowspan."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-rowspan'",
     "comment": [
      "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.",
      " @see aria-rowindex @see aria-colspan."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-selected'",
     "comment": [
      "Indicates the current \"selected\" state of various widgets.",
      " @see aria-checked @see aria-pressed."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-setsize'",
     "comment": [
      "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
      " @see aria-posinset."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-sort'",
     "comment": [
      "Indicates if items in a table or grid are sorted in ascending or descending order."
     ],
     "typeValue": {
      "raw": "undefined | 'none' | 'ascending' | 'descending' | 'other'"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-valuemax'",
     "comment": [
      "Defines the maximum allowed value for a range widget."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-valuemin'",
     "comment": [
      "Defines the minimum allowed value for a range widget."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-valuenow'",
     "comment": [
      "Defines the current value for a range widget.",
      " @see aria-valuetext."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-valuetext'",
     "comment": [
      "Defines the human readable text alternative of aria-valuenow for a range widget."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AriaAttributes",
       "nameFull": "AriaAttributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "about",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "accept",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "acceptCharset",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "accessKey",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "action",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "allowFullScreen",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "allowTransparency",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "alt",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "as",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "async",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoCapitalize",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoComplete",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoCorrect",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoHeight",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoHeightMax",
     "typeValue": {
      "raw": "undefined | string | number"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoHeightMin",
     "typeValue": {
      "raw": "undefined | string | number"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoHide",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoHideDuration",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoHideTimeout",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoPlay",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoSave",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "capture",
     "typeValue": {
      "raw": "undefined | false | true | 'user' | 'environment'"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cellPadding",
     "typeValue": {
      "raw": "undefined | string | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cellSpacing",
     "typeValue": {
      "raw": "undefined | string | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "challenge",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "charSet",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "checked",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cite",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "classID",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "className",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cols",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "colSpan",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "content",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "contentEditable",
     "typeValue": {
      "raw": "undefined | false | true | 'inherit' | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "contextMenu",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "controls",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "coords",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "crossOrigin",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dangerouslySetInnerHTML",
     "typeValue": {
      "raw": "undefined | { __html: string; }"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "data",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "datatype",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dateTime",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "default",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "defaultChecked",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "defaultValue",
     "typeValue": {
      "raw": "undefined | string | number | readonly string[]"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "defer",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dir",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disabled",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disableScroll",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "download",
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "draggable",
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "encType",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "form",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "formAction",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "formEncType",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "formMethod",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "formNoValidate",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "formTarget",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "frameBorder",
     "typeValue": {
      "raw": "undefined | string | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "hasBottomShadow",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "hasTopShadow",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "headers",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "height",
     "typeValue": {
      "raw": "undefined | string | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "hidden",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "hideTracksWhenNotNeeded",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "high",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "hrefLang",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "htmlFor",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "httpEquiv",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inlist",
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputMode",
     "comment": [
      "Hints at the type of data that might be entered by the user while editing the element or its contents",
      " @see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute"
     ],
     "typeValue": {
      "raw": "undefined | 'search' | 'email' | 'tel' | 'text' | 'url' | 'none' | 'numeric' | 'decimal'"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "integrity",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "is",
     "comment": [
      "Specify that a standard HTML element should behave like a defined custom built-in element",
      " @see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "itemID",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "itemProp",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "itemRef",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "itemScope",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "itemType",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "undefined | null | string | number"
     },
     "from": {
      "typeName": {
       "name": "Attributes",
       "nameFull": "Attributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "keyParams",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "keyType",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "kind",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "lang",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "list",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "loop",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "low",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "manifest",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "marginHeight",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "marginWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "max",
     "typeValue": {
      "raw": "undefined | string | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "media",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "mediaGroup",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "method",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "min",
     "typeValue": {
      "raw": "undefined | string | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "minLength",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "multiple",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "muted",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "nonce",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "noValidate",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAbort",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAbortCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationEnd",
     "typeValue": {
      "raw": "undefined | React.AnimationEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationEndCapture",
     "typeValue": {
      "raw": "undefined | React.AnimationEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationIteration",
     "typeValue": {
      "raw": "undefined | React.AnimationEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationIterationCapture",
     "typeValue": {
      "raw": "undefined | React.AnimationEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationStart",
     "typeValue": {
      "raw": "undefined | React.AnimationEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationStartCapture",
     "typeValue": {
      "raw": "undefined | React.AnimationEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAuxClick",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onAuxClickCapture",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBeforeInput",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBeforeInputCapture",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "typeValue": {
      "raw": "undefined | React.FocusEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlurCapture",
     "typeValue": {
      "raw": "undefined | React.FocusEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCanPlay",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCanPlayCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCanPlayThrough",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCanPlayThroughCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onChange",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onChangeCapture",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClick",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClickCapture",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionEnd",
     "typeValue": {
      "raw": "undefined | React.CompositionEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionEndCapture",
     "typeValue": {
      "raw": "undefined | React.CompositionEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionStart",
     "typeValue": {
      "raw": "undefined | React.CompositionEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionStartCapture",
     "typeValue": {
      "raw": "undefined | React.CompositionEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionUpdate",
     "typeValue": {
      "raw": "undefined | React.CompositionEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionUpdateCapture",
     "typeValue": {
      "raw": "undefined | React.CompositionEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onContextMenu",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onContextMenuCapture",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCopy",
     "typeValue": {
      "raw": "undefined | React.ClipboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCopyCapture",
     "typeValue": {
      "raw": "undefined | React.ClipboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCut",
     "typeValue": {
      "raw": "undefined | React.ClipboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCutCapture",
     "typeValue": {
      "raw": "undefined | React.ClipboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDoubleClick",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDoubleClickCapture",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDrag",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragCapture",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragEnd",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragEndCapture",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragEnter",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragEnterCapture",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragExit",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragExitCapture",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragLeave",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragLeaveCapture",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragOver",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragOverCapture",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragStart",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDragStartCapture",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDrop",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDropCapture",
     "typeValue": {
      "raw": "undefined | React.DragEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDurationChange",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onDurationChangeCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onEmptied",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onEmptiedCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onEncrypted",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onEncryptedCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onEnded",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onEndedCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onError",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onErrorCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "typeValue": {
      "raw": "undefined | React.FocusEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocusCapture",
     "typeValue": {
      "raw": "undefined | React.FocusEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onGotPointerCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onGotPointerCaptureCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onInput",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onInputCapture",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onInvalid",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onInvalidCapture",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyDown",
     "typeValue": {
      "raw": "undefined | React.KeyboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyDownCapture",
     "typeValue": {
      "raw": "undefined | React.KeyboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyPress",
     "comment": [
      "@deprecated"
     ],
     "typeValue": {
      "raw": "undefined | React.KeyboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyPressCapture",
     "comment": [
      "@deprecated"
     ],
     "typeValue": {
      "raw": "undefined | React.KeyboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyUp",
     "typeValue": {
      "raw": "undefined | React.KeyboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyUpCapture",
     "typeValue": {
      "raw": "undefined | React.KeyboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLoad",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadedData",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadedDataCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadedMetadata",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadedMetadataCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadStart",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadStartCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLostPointerCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onLostPointerCaptureCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseDown",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseDownCapture",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseEnter",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseLeave",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseMove",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseMoveCapture",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseOut",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseOutCapture",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseOver",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseOverCapture",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseUp",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseUpCapture",
     "typeValue": {
      "raw": "undefined | React.MouseEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPaste",
     "typeValue": {
      "raw": "undefined | React.ClipboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPasteCapture",
     "typeValue": {
      "raw": "undefined | React.ClipboardEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPause",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPauseCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPlay",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPlayCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPlaying",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPlayingCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerCancel",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerCancelCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerDown",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerDownCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerEnter",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerEnterCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerLeave",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerLeaveCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerMove",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerMoveCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerOut",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerOutCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerOver",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerOverCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerUp",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerUpCapture",
     "typeValue": {
      "raw": "undefined | React.PointerEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onProgress",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onProgressCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onRateChange",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onRateChangeCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onReset",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onResetCapture",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onResize",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onResizeCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onScroll",
     "typeValue": {
      "raw": "undefined | React.UIEventHandler<any>"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onScrollCapture",
     "typeValue": {
      "raw": "undefined | React.UIEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onScrollFrame",
     "typeValue": {
      "raw": "undefined | (values: ReactCustomScrollbars.positionValues) => void"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onScrollStart",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onScrollStop",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSeeked",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSeekedCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSeeking",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSeekingCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSelect",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSelectCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onStalled",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onStalledCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSubmit",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSubmitCapture",
     "typeValue": {
      "raw": "undefined | React.FormEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSuspend",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onSuspendCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTimeUpdate",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTimeUpdateCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchCancel",
     "typeValue": {
      "raw": "undefined | React.TouchEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchCancelCapture",
     "typeValue": {
      "raw": "undefined | React.TouchEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchEnd",
     "typeValue": {
      "raw": "undefined | React.TouchEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchEndCapture",
     "typeValue": {
      "raw": "undefined | React.TouchEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchMove",
     "typeValue": {
      "raw": "undefined | React.TouchEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchMoveCapture",
     "typeValue": {
      "raw": "undefined | React.TouchEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchStart",
     "typeValue": {
      "raw": "undefined | React.TouchEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchStartCapture",
     "typeValue": {
      "raw": "undefined | React.TouchEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTransitionEnd",
     "typeValue": {
      "raw": "undefined | React.TransitionEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onTransitionEndCapture",
     "typeValue": {
      "raw": "undefined | React.TransitionEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onUpdate",
     "typeValue": {
      "raw": "undefined | (values: ReactCustomScrollbars.positionValues) => void"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onVolumeChange",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onVolumeChangeCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onWaiting",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onWaitingCapture",
     "typeValue": {
      "raw": "undefined | React.ReactEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onWheel",
     "typeValue": {
      "raw": "undefined | React.WheelEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onWheelCapture",
     "typeValue": {
      "raw": "undefined | React.WheelEventHandler<T>"
     },
     "from": {
      "typeName": {
       "name": "DOMAttributes",
       "nameFull": "DOMAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "open",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "optimum",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "pattern",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "playsInline",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "poster",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "prefix",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "preload",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "property",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "radioGroup",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "readOnly",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rel",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderThumbHorizontal",
     "typeValue": {
      "raw": "undefined | React.ComponentClass<any, any> | React.FunctionComponent<any>"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderThumbVertical",
     "typeValue": {
      "raw": "undefined | React.ComponentClass<any, any> | React.FunctionComponent<any>"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderTrackHorizontal",
     "typeValue": {
      "raw": "undefined | React.ComponentClass<any, any> | React.FunctionComponent<any>"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderTrackVertical",
     "typeValue": {
      "raw": "undefined | React.ComponentClass<any, any> | React.FunctionComponent<any>"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderView",
     "typeValue": {
      "raw": "undefined | (props: any) => React.ReactElement<any, string | React.JSXElementConstructor<any>>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "required",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "resource",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "results",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "reversed",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "role",
     "typeValue": {
      "raw": "undefined | 'search' | 'button' | 'checkbox' | 'radio' | string & {} | 'alert' | 'alertdialog' | 'application' | 'article' | 'banner' | 'cell' | 'columnheader' | 'combobox' | 'complementary' | 'contentinfo' | 'definition' | 'dialog' | 'directory' | 'document' | 'feed' | 'figure' | 'form' | 'grid' | 'gridcell' | 'group' | 'heading' | 'img' | 'link' | 'list' | 'listbox' | 'listitem' | 'log' | 'main' | 'marquee' | 'math' | 'menu' | 'menubar' | 'menuitem' | 'menuitemcheckbox' | 'menuitemradio' | 'navigation' | 'none' | 'note' | 'option' | 'presentation' | 'progressbar' | 'radiogroup' | 'region' | 'row' | 'rowgroup' | 'rowheader' | 'scrollbar' | 'searchbox' | 'separator' | 'slider' | 'spinbutton' | 'status' | 'switch' | 'tab' | 'table' | 'tablist' | 'tabpanel' | 'term' | 'textbox' | 'timer' | 'toolbar' | 'tooltip' | 'tree' | 'treegrid' | 'treeitem'"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rows",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowSpan",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sandbox",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "scope",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "scoped",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "scrolling",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "seamless",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "security",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selected",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "shape",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sizes",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "slot",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "span",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "spellCheck",
     "typeValue": {
      "raw": "undefined | false | true | 'true' | 'false'"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "src",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "srcDoc",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "srcLang",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "srcSet",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "start",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "step",
     "typeValue": {
      "raw": "undefined | string | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "typeValue": {
      "raw": "undefined | React.CSSProperties"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "summary",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "suppressContentEditableWarning",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "suppressHydrationWarning",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tagName",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "thumbMinSize",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "thumbSize",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "title",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "translate",
     "typeValue": {
      "raw": "undefined | 'yes' | 'no'"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "typeof",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "universal",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "typeName": {
       "name": "ScrollbarProps",
       "nameFull": "ScrollbarProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "unselectable",
     "typeValue": {
      "raw": "undefined | 'on' | 'off'"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "useMap",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "typeValue": {
      "raw": "undefined | string | number | readonly string[]"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "vocab",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "HTMLAttributes",
       "nameFull": "HTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "typeValue": {
      "raw": "undefined | string | number"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "wmode",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "wrap",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "typeName": {
       "name": "AllHTMLAttributes",
       "nameFull": "AllHTMLAttributes<T>"
      }
     },
     "required": false
    }
   ]
  },
  "ScrollbarsApi": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ScrollbarsApi",
    "nameFull": "ScrollbarsApi"
   },
   "typeValue": {
    "raw": "ScrollbarsApi",
    "print": [
     "interface ScrollbarsApi extends Scrollbars {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "componentDidCatch",
     "comment": [
      "Catches exceptions generated in descendant components. Unhandled exceptions will cause",
      " the entire component tree to unmount."
     ],
     "typeValue": {
      "raw": "undefined | (error: Error, errorInfo: React.ErrorInfo) => void"
     },
     "from": {
      "typeName": {
       "name": "ComponentLifecycle",
       "nameFull": "ComponentLifecycle<P, S, SS>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "componentDidMount",
     "comment": [
      "Called immediately after a component is mounted. Setting state here will trigger re-rendering."
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "typeName": {
       "name": "ComponentLifecycle",
       "nameFull": "ComponentLifecycle<P, S, SS>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "componentDidUpdate",
     "comment": [
      "Called immediately after updating occurs. Not called for the initial render.",
      "",
      " The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null."
     ],
     "typeValue": {
      "raw": "undefined | (prevProps: Readonly<P>, prevState: Readonly<S>, snapshot?: SS | undefined) => void"
     },
     "from": {
      "typeName": {
       "name": "NewLifecycle",
       "nameFull": "NewLifecycle<P, S, SS>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "componentWillMount",
     "comment": [
      "Called immediately before mounting occurs, and before `Component#render`.",
      " Avoid introducing any side-effects or subscriptions in this method.",
      "",
      " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
      " prevents this from being invoked.",
      "",
      " @deprecated 16.3, use componentDidMount or the constructor instead; will stop working in React 17",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "typeName": {
       "name": "DeprecatedLifecycle",
       "nameFull": "DeprecatedLifecycle<P, S>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "componentWillReceiveProps",
     "comment": [
      "Called when the component may be receiving new props.",
      " React may call this even if props have not changed, so be sure to compare new and existing",
      " props if you only want to handle changes.",
      "",
      " Calling `Component#setState` generally does not trigger this method.",
      "",
      " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
      " prevents this from being invoked.",
      "",
      " @deprecated 16.3, use static getDerivedStateFromProps instead; will stop working in React 17",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
     ],
     "typeValue": {
      "raw": "undefined | (nextProps: Readonly<P>, nextContext: any) => void"
     },
     "from": {
      "typeName": {
       "name": "DeprecatedLifecycle",
       "nameFull": "DeprecatedLifecycle<P, S>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "componentWillUnmount",
     "comment": [
      "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as",
      " cancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "typeName": {
       "name": "ComponentLifecycle",
       "nameFull": "ComponentLifecycle<P, S, SS>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "componentWillUpdate",
     "comment": [
      "Called immediately before rendering when new props or state is received. Not called for the initial render.",
      "",
      " Note: You cannot call `Component#setState` here.",
      "",
      " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
      " prevents this from being invoked.",
      "",
      " @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
     ],
     "typeValue": {
      "raw": "undefined | (nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any) => void"
     },
     "from": {
      "typeName": {
       "name": "DeprecatedLifecycle",
       "nameFull": "DeprecatedLifecycle<P, S>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertyDeclaration",
     "name": "container",
     "typeValue": {
      "raw": "HTMLDivElement"
     },
     "from": {
      "typeName": {
       "name": "Scrollbars",
       "nameFull": "Scrollbars"
      }
     },
     "required": true
    },
    {
     "kind": "PropertyDeclaration",
     "name": "context",
     "comment": [
      "If using the new style context, re-declare this in your class to be the",
      " `React.ContextType` of your `static contextType`.",
      " Should be used with type annotation or static contextType.",
      "",
      " ```ts",
      " static contextType = MyContext",
      " // For TS pre-3.7:",
      " context!: React.ContextType<typeof MyContext>",
      " // For TS 3.7 and above:",
      " declare context: React.ContextType<typeof MyContext>",
      " ```",
      "",
      " @see https://reactjs.org/docs/context.html"
     ],
     "typeValue": {
      "raw": "unknown"
     },
     "from": {
      "typeName": {
       "name": "Component",
       "nameFull": "Component<P, S, SS>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodDeclaration",
     "name": "forceUpdate",
     "typeValue": {
      "raw": "(callback?: (() => void) | undefined) => void"
     },
     "from": {
      "typeName": {
       "name": "Component",
       "nameFull": "Component<P, S, SS>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodDeclaration",
     "name": "getClientHeight",
     "typeValue": {
      "raw": "() => number"
     },
     "from": {
      "typeName": {
       "name": "Scrollbars",
       "nameFull": "Scrollbars"
      }
     },
     "required": true
    },
    {
     "kind": "MethodDeclaration",
     "name": "getClientWidth",
     "typeValue": {
      "raw": "() => number"
     },
     "from": {
      "typeName": {
       "name": "Scrollbars",
       "nameFull": "Scrollbars"
      }
     },
     "required": true
    },
    {
     "kind": "MethodDeclaration",
     "name": "getScrollHeight",
     "typeValue": {
      "raw": "() => number"
     },
     "from": {
      "typeName": {
       "name": "Scrollbars",
       "nameFull": "Scrollbars"
      }
     },
     "required": true
    },
    {
     "kind": "MethodDeclaration",
     "name": "getScrollLeft",
     "typeValue": {
      "raw": "() => number"
     },
     "from": {
      "typeName": {
       "name": "Scrollbars",
       "nameFull": "Scrollbars"
      }
     },
     "required": true
    },
    {
     "kind": "MethodDeclaration",
     "name": "getScrollTop",
     "typeValue": {
      "raw": "() => number"
     },
     "from": {
      "typeName": {
       "name": "Scrollbars",
       "nameFull": "Scrollbars"
      }
     },
     "required": true
    },
    {
     "kind": "MethodDeclaration",
     "name": "getScrollWidth",
     "typeValue": {
      "raw": "() => number"
     },
     "from": {
      "typeName": {
       "name": "Scrollbars",
       "nameFull": "Scrollbars"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getSnapshotBeforeUpdate",
     "comment": [
      "Runs before React applies the result of `render` to the document, and",
      " returns an object to be given to componentDidUpdate. Useful for saving",
      " things such as scroll position before `render` causes changes to it.",
      "",
      " Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated",
      " lifecycle events from running."
     ],
     "typeValue": {
      "raw": "undefined | (prevProps: Readonly<P>, prevState: Readonly<S>) => SS | null"
     },
     "from": {
      "typeName": {
       "name": "NewLifecycle",
       "nameFull": "NewLifecycle<P, S, SS>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodDeclaration",
     "name": "getValues",
     "typeValue": {
      "raw": "() => ReactCustomScrollbars.positionValues"
     },
     "from": {
      "typeName": {
       "name": "Scrollbars",
       "nameFull": "Scrollbars"
      }
     },
     "required": true
    },
    {
     "kind": "PropertyDeclaration",
     "name": "props",
     "typeValue": {
      "raw": "Readonly<P>"
     },
     "from": {
      "typeName": {
       "name": "Component",
       "nameFull": "Component<P, S, SS>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertyDeclaration",
     "name": "refs",
     "comment": [
      "@deprecated",
      " https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs"
     ],
     "typeValue": {
      "raw": "{ [key: string]: React.ReactInstance; }"
     },
     "from": {
      "typeName": {
       "name": "Component",
       "nameFull": "Component<P, S, SS>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodDeclaration",
     "name": "render",
     "typeValue": {
      "raw": "() => React.ReactNode"
     },
     "from": {
      "typeName": {
       "name": "Component",
       "nameFull": "Component<P, S, SS>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodDeclaration",
     "name": "scrollLeft",
     "typeValue": {
      "raw": "(left: number) => void"
     },
     "from": {
      "typeName": {
       "name": "Scrollbars",
       "nameFull": "Scrollbars"
      }
     },
     "required": true
    },
    {
     "kind": "MethodDeclaration",
     "name": "scrollToBottom",
     "typeValue": {
      "raw": "() => void"
     },
     "from": {
      "typeName": {
       "name": "Scrollbars",
       "nameFull": "Scrollbars"
      }
     },
     "required": true
    },
    {
     "kind": "MethodDeclaration",
     "name": "scrollToLeft",
     "typeValue": {
      "raw": "() => void"
     },
     "from": {
      "typeName": {
       "name": "Scrollbars",
       "nameFull": "Scrollbars"
      }
     },
     "required": true
    },
    {
     "kind": "MethodDeclaration",
     "name": "scrollTop",
     "typeValue": {
      "raw": "(top: number) => void"
     },
     "from": {
      "typeName": {
       "name": "Scrollbars",
       "nameFull": "Scrollbars"
      }
     },
     "required": true
    },
    {
     "kind": "MethodDeclaration",
     "name": "scrollToRight",
     "typeValue": {
      "raw": "() => void"
     },
     "from": {
      "typeName": {
       "name": "Scrollbars",
       "nameFull": "Scrollbars"
      }
     },
     "required": true
    },
    {
     "kind": "MethodDeclaration",
     "name": "scrollToTop",
     "typeValue": {
      "raw": "() => void"
     },
     "from": {
      "typeName": {
       "name": "Scrollbars",
       "nameFull": "Scrollbars"
      }
     },
     "required": true
    },
    {
     "kind": "MethodDeclaration",
     "name": "setState",
     "typeValue": {
      "raw": "<K extends keyof S>(state: S | ((prevState: Readonly<S>, props: Readonly<P>) => S | Pick<S, K> | null) | Pick<S, K> | null, callback?: (() => void) | undefined) => void"
     },
     "from": {
      "typeName": {
       "name": "Component",
       "nameFull": "Component<P, S, SS>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "shouldComponentUpdate",
     "comment": [
      "Called to determine whether the change in props and state should trigger a re-render.",
      "",
      " `Component` always returns true.",
      " `PureComponent` implements a shallow comparison on props and state and returns true if any",
      " props or states have changed.",
      "",
      " If false is returned, `Component#render`, `componentWillUpdate`",
      " and `componentDidUpdate` will not be called."
     ],
     "typeValue": {
      "raw": "undefined | (nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any) => boolean"
     },
     "from": {
      "typeName": {
       "name": "ComponentLifecycle",
       "nameFull": "ComponentLifecycle<P, S, SS>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertyDeclaration",
     "name": "state",
     "typeValue": {
      "raw": "Readonly<S>"
     },
     "from": {
      "typeName": {
       "name": "Component",
       "nameFull": "Component<P, S, SS>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "UNSAFE_componentWillMount",
     "comment": [
      "Called immediately before mounting occurs, and before `Component#render`.",
      " Avoid introducing any side-effects or subscriptions in this method.",
      "",
      " This method will not stop working in React 17.",
      "",
      " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
      " prevents this from being invoked.",
      "",
      " @deprecated 16.3, use componentDidMount or the constructor instead",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "typeName": {
       "name": "DeprecatedLifecycle",
       "nameFull": "DeprecatedLifecycle<P, S>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "UNSAFE_componentWillReceiveProps",
     "comment": [
      "Called when the component may be receiving new props.",
      " React may call this even if props have not changed, so be sure to compare new and existing",
      " props if you only want to handle changes.",
      "",
      " Calling `Component#setState` generally does not trigger this method.",
      "",
      " This method will not stop working in React 17.",
      "",
      " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
      " prevents this from being invoked.",
      "",
      " @deprecated 16.3, use static getDerivedStateFromProps instead",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
     ],
     "typeValue": {
      "raw": "undefined | (nextProps: Readonly<P>, nextContext: any) => void"
     },
     "from": {
      "typeName": {
       "name": "DeprecatedLifecycle",
       "nameFull": "DeprecatedLifecycle<P, S>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "UNSAFE_componentWillUpdate",
     "comment": [
      "Called immediately before rendering when new props or state is received. Not called for the initial render.",
      "",
      " Note: You cannot call `Component#setState` here.",
      "",
      " This method will not stop working in React 17.",
      "",
      " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
      " prevents this from being invoked.",
      "",
      " @deprecated 16.3, use getSnapshotBeforeUpdate instead",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
     ],
     "typeValue": {
      "raw": "undefined | (nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any) => void"
     },
     "from": {
      "typeName": {
       "name": "DeprecatedLifecycle",
       "nameFull": "DeprecatedLifecycle<P, S>"
      }
     },
     "required": false
    }
   ]
  },
  "SelectionContextState": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "SelectionContextState",
    "nameFull": "SelectionContextState<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "SelectionContextState<TItem, TId, TFilter>",
    "print": [
     "interface SelectionContextState<TItem = any, TId = any, TFilter = any> extends Pick<SelectionManager<TItem, TId, TFilter>, 'selectionRange' | 'setSelectionRange' | 'getCellSelectionInfo'> {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "getCellSelectionInfo",
     "typeValue": {
      "raw": "(row: number, column: number) => { isSelected: boolean; showTopBorder: boolean; showRightBorder: boolean; showBottomBorder: boolean; showLeftBorder: boolean; canCopyFrom: boolean; canAcceptCopy: boolean; isStartCell: boolean; }"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "SelectionManager",
       "nameFull": "SelectionManager<TItem, TId, TFilter>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectionRange",
     "typeValue": {
      "raw": "DataTableSelectionRange"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "SelectionManager",
       "nameFull": "SelectionManager<TItem, TId, TFilter>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "setSelectionRange",
     "typeValue": {
      "raw": "React.Dispatch<React.SetStateAction<DataTableSelectionRange>>"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "SelectionManager",
       "nameFull": "SelectionManager<TItem, TId, TFilter>"
      }
     },
     "required": true
    }
   ]
  },
  "SinglePickerProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "SinglePickerProps",
    "nameFull": "SinglePickerProps<TId, TItem>"
   },
   "typeValue": {
    "raw": "{ selectionMode: 'single'; valueType: 'id'; } & IEditable<TId> | { selectionMode: 'single'; valueType?: 'entity' | undefined; } & IEditable<TItem>",
    "print": [
     "type SinglePickerProps<TId, TItem> = ({",
     "    selectionMode: 'single';",
     "    valueType: 'id';",
     "} & IEditable<TId>) | ({",
     "    selectionMode: 'single';",
     "    valueType?: 'entity';",
     "} & IEditable<TItem>);"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "typeValue": {
      "raw": "'single'"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "valueType",
     "typeValue": {
      "raw": "'id'"
     },
     "required": true
    }
   ]
  },
  "SliderBaseProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "SliderBaseProps",
    "nameFull": "SliderBaseProps<TSelection>"
   },
   "typeValue": {
    "raw": "SliderBaseProps<TSelection>",
    "print": [
     "interface SliderBaseProps<TSelection> extends IHasCX, IEditable<TSelection>, IDisableable, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "    /** Min value (when slider is at leftmost position) */",
     "    min: number;",
     "    /** Max value (when slider is at rightmost position) */",
     "    max: number;",
     "    /** Value change step */",
     "    step: number;",
     "    /** Slider renders a label at each splitAt position */",
     "    splitAt?: number;",
     "    /** Overrides rendering of values labels */",
     "    renderLabel?: (value: number) => string;",
     "    /** Toggles rendering of tooltip with current value */",
     "    showTooltip?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "max",
     "comment": [
      "Max value (when slider is at rightmost position)"
     ],
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "min",
     "comment": [
      "Min value (when slider is at leftmost position)"
     ],
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderLabel",
     "comment": [
      "Overrides rendering of values labels"
     ],
     "typeValue": {
      "raw": "undefined | (value: number) => string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "showTooltip",
     "comment": [
      "Toggles rendering of tooltip with current value"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "splitAt",
     "comment": [
      "Slider renders a label at each splitAt position"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "step",
     "comment": [
      "Value change step"
     ],
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "SliderBaseState": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "SliderBaseState",
    "nameFull": "SliderBaseState"
   },
   "typeValue": {
    "raw": "SliderBaseState",
    "print": [
     "interface SliderBaseState {",
     "    isActive: boolean;",
     "    valueWidth: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "valueWidth",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    }
   ]
  },
  "SnackbarProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "SnackbarProps",
    "nameFull": "SnackbarProps"
   },
   "typeValue": {
    "raw": "SnackbarProps",
    "print": [
     "interface SnackbarProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "    closeIcon?: Icon;",
     "    notifications?: NotificationOperation[];",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "closeIcon",
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "notifications",
     "typeValue": {
      "raw": "undefined | NotificationOperation[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    }
   ]
  },
  "SpinnerProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "SpinnerProps",
    "nameFull": "SpinnerProps"
   },
   "typeValue": {
    "raw": "SpinnerProps",
    "print": [
     "interface SpinnerProps extends SpinnerCoreProps {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    }
   ]
  },
  "SwitchProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "SwitchProps",
    "nameFull": "SwitchProps"
   },
   "typeValue": {
    "raw": "SwitchProps",
    "print": [
     "interface SwitchProps extends IHasCX, IDisableable, IEditable<boolean>, IHasLabel, IAnalyticableOnChange<boolean>, IHasRawProps<React.LabelHTMLAttributes<HTMLLabelElement>>, IHasForwardedRef<HTMLLabelElement>, IHasTabIndex {",
     "    id?: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasLabel",
       "nameFull": "IHasLabel"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "TextAreaProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TextAreaProps",
    "nameFull": "TextAreaProps"
   },
   "typeValue": {
    "raw": "TextAreaProps",
    "print": [
     "interface TextAreaProps extends IHasCX, IEditable<string>, IHasPlaceholder, IDisableable, ICanBeReadonly, IHasRawProps<React.TextareaHTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement>, ICanFocus<HTMLTextAreaElement> {",
     "    /** Adjust height to fit specified number or text rows. HTML TextArea attribute. */",
     "    rows?: number;",
     "    /** Enables auto-resizing height to fit text. Rows prop is ignored in this mode */",
     "    autoSize?: boolean;",
     "    /** onKeyDown event handler to put on HTML Input  */",
     "    onKeyDown?(e?: any): void;",
     "    /** Automatically sets input focus to component, when its mounted */",
     "    autoFocus?: boolean;",
     "    /** CSS class names to put to the HTML Input element */",
     "    inputCx?: CX;",
     "    /** Maximum text length, in characters */",
     "    maxLength?: number;",
     "    /** HTML id attribute to put on the HTML Input element */",
     "    id?: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "comment": [
      "Automatically sets input focus to component, when its mounted"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoSize",
     "comment": [
      "Enables auto-resizing height to fit text. Rows prop is ignored in this mode"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML id attribute to put on the HTML Input element"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class names to put to the HTML Input element"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "comment": [
      "Maximum text length, in characters"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "comment": [
      "onKeyDown event handler to put on HTML Input"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rows",
     "comment": [
      "Adjust height to fit specified number or text rows. HTML TextArea attribute."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "TextInputProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TextInputProps",
    "nameFull": "TextInputProps"
   },
   "typeValue": {
    "raw": "TextInputProps",
    "print": [
     "interface TextInputProps extends TextInputCoreProps {",
     "    /** Overrides accept (check) icon */",
     "    acceptIcon?: Icon;",
     "    /** Overrides cancel (cross) icon */",
     "    cancelIcon?: Icon;",
     "    /** Overrides dropdown (chevron) icon */",
     "    dropdownIcon?: Icon;",
     "    /** CSS class(es) to put to the HTML Input element */",
     "    inputCx?: CX;",
     "    /** overrides rendering of HTML Input element  */",
     "    renderInput?: (props: IRenderInputProps) => JSX.Element;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "acceptIcon",
     "comment": [
      "Overrides accept (check) icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoComplete",
     "comment": [
      "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "comment": [
      "Put focus on the element, when component is mounted"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cancelIcon",
     "comment": [
      "Overrides cancel (cross) icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Overrides dropdown (chevron) icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'right' | 'left'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML ID attribute for input"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class(es) to put to the HTML Input element"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputMode",
     "comment": [
      "Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
     ],
     "typeValue": {
      "raw": "undefined | 'search' | 'email' | 'tel' | 'text' | 'url' | 'none' | 'numeric' | 'decimal'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "comment": [
      "Maximum input length in characters"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "comment": [
      "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onAccept",
     "comment": [
      "Enables accept (check) icon, and fires when the icon is clicked"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onCancel",
     "comment": [
      "Enables cancel (cross) icon, and fires when the icon is clicked"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "comment": [
      "keydown event handler to put on the HTML input element"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderInput",
     "comment": [
      "overrides rendering of HTML Input element"
     ],
     "typeValue": {
      "raw": "undefined | (props: IRenderInputProps) => JSX.Element"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "comment": [
      "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "TextProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "TextProps",
    "nameFull": "TextProps"
   },
   "typeValue": {
    "raw": "TextProps",
    "print": [
     "type TextProps = IHasCX & IHasChildren & IClickable & IAnalyticableClick & IHasRawProps<React.HTMLAttributes<HTMLDivElement>> & IHasForwardedRef<HTMLDivElement>;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    }
   ]
  },
  "TimePickerBodyProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TimePickerBodyProps",
    "nameFull": "TimePickerBodyProps"
   },
   "typeValue": {
    "raw": "TimePickerBodyProps",
    "print": [
     "interface TimePickerBodyProps extends IHasCX, IEditable<TimePickerValue>, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "    minutesStep?: number;",
     "    addIcon?: Icon;",
     "    subtractIcon?: Icon;",
     "    format?: 12 | 24;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "addIcon",
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "format",
     "typeValue": {
      "raw": "undefined | 12 | 24"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "minutesStep",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "subtractIcon",
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "TooltipProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TooltipProps",
    "nameFull": "TooltipProps"
   },
   "typeValue": {
    "raw": "TooltipProps",
    "print": [
     "interface TooltipProps extends TooltipCoreProps {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "boundaryElement",
     "typeValue": {
      "raw": "undefined | HTMLElement | HTMLElement[] | 'clippingParents'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "comment": [
      "React Node(s) to show tooltip for"
     ],
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeBodyOnTogglerHidden",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeDelay",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnMouseLeave",
     "typeValue": {
      "raw": "undefined | false | 'toggler' | 'boundary'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "content",
     "comment": [
      "Content to show in the tooltip (ReactNode)"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxWidth",
     "comment": [
      "Max width of tooltip"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "modifiers",
     "typeValue": {
      "raw": "undefined | (Modifier<any, object>>)[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "offset",
     "comment": [
      "See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/}"
     ],
     "typeValue": {
      "raw": "undefined | OffsetsFunction | [number | null | undefined, number | null | undefined]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "openDelay",
     "comment": [
      "Should we close dropdown on click on the Toggler, if it's already open? Default is true."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "typeValue": {
      "raw": "undefined | 'right' | 'left' | 'top' | 'bottom' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "portalTarget",
     "typeValue": {
      "raw": "undefined | HTMLElement"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderContent",
     "comment": [
      "Alternative to 'content' prop, you can pass a render function.",
      " The function will only be called when content is shown, this can save performance."
     ],
     "typeValue": {
      "raw": "undefined | () => any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "TooltipState": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TooltipState",
    "nameFull": "TooltipState"
   },
   "typeValue": {
    "raw": "TooltipState",
    "print": [
     "interface TooltipState {",
     "    isOpen: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    }
   ]
  },
  "TreeListItem": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TreeListItem",
    "nameFull": "TreeListItem"
   },
   "typeValue": {
    "raw": "TreeListItem",
    "print": [
     "interface TreeListItem {",
     "    id: string;",
     "    data?: TreeListItem;",
     "    parentId?: string;",
     "    name?: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "data",
     "typeValue": {
      "raw": "undefined | TreeListItem"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "parentId",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    }
   ]
  },
  "TreeProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TreeProps",
    "nameFull": "TreeProps<TItem>"
   },
   "typeValue": {
    "raw": "TreeProps<TItem>",
    "print": [
     "interface TreeProps<TItem extends TreeListItem> extends IHasCX, IHasChildren, IEditable<DataSourceState> {",
     "    items: TreeListItem[];",
     "    renderRow(row: DataRowProps<TItem, string>): void;",
     "    getSearchFields?(item: TItem): string[];",
     "    search?: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "typeValue": {
      "raw": "undefined | (item: TItem) => string[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "typeValue": {
      "raw": "TreeListItem[]"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderRow",
     "typeValue": {
      "raw": "(row: DataRowProps<TItem, string>) => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "UsePickerInputProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "UsePickerInputProps",
    "nameFull": "UsePickerInputProps<TItem, TId, TProps>"
   },
   "typeValue": {
    "raw": "ClassValue; highlightSearchMatches?: boolean | undefined; } & TProps & { toggleModalOpening?(opened: boolean): void; shouldShowBody?(): boolean; } | ClassValue; highlightSearchMatches?: boolean | undefined; } & TProps & { toggleModalOpening?(opened: boolean): void; shouldShowBody?(): boolean; } | ClassValue; highlightSearchMatches?: boolean | undefined; } & TProps & { toggleModalOpening?(opened: boolean): void; shouldShowBody?(): boolean; } | ClassValue; highlightSearchMatches?: boolean | undefined; } & TProps & { toggleModalOpening?(opened: boolean): void; shouldShowBody?(): boolean; }",
    "print": [
     "type UsePickerInputProps<TItem, TId, TProps> = PickerInputBaseProps<TItem, TId> & TProps & {",
     "    toggleModalOpening?(opened: boolean): void;",
     "    shouldShowBody?(): boolean;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "comment": [
      "Sets focus to component when it's mounted"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerInputBaseProps",
       "nameFull": "PickerInputBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "bodyCx",
     "comment": [
      "CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerInputBaseProps",
       "nameFull": "PickerInputBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'implicit' | 'explicit'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dataSource",
     "comment": [
      "Provides items to the Picker"
     ],
     "typeValue": {
      "raw": "IDataSource<TItem, TId, any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableClear",
     "comment": [
      "Disallow to clear Picker value (cross icon)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerInputBaseProps",
       "nameFull": "PickerInputBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownHeight",
     "comment": [
      "Overrides default height of the dropdown body"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerInputBaseProps",
       "nameFull": "PickerInputBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownPlacement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "typeValue": {
      "raw": "undefined | 'right' | 'left' | 'top' | 'bottom' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerInputBaseProps",
       "nameFull": "PickerInputBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "editMode",
     "comment": [
      "dropdown (default) - show selection in dropdown; modal - opens modal window to select items"
     ],
     "typeValue": {
      "raw": "undefined | 'dropdown' | 'modal'"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerInputBaseProps",
       "nameFull": "PickerInputBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "emptyValue",
     "comment": [
      "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
     ],
     "typeValue": {
      "raw": "undefined | null | []"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "entityName",
     "comment": [
      "Name of the entity being selected. Affects wording like \"Please select [entity]\""
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "entityPluralName",
     "comment": [
      "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "comment": [
      "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fixedBodyPosition",
     "comment": [
      "Disables moving the dropdown body, when togglers is moved. Used in filters panel, to prevent filter selection to 'jump' after adding a filter."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerInputBaseProps",
       "nameFull": "PickerInputBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getName",
     "comment": [
      "Gets entity display name. Default it item.name."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getRowOptions",
     "comment": [
      "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "comment": [
      "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => string[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "highlightSearchMatches",
     "comment": [
      "Enables highlighting of the items' text with search-matching results."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerInputBaseProps",
       "nameFull": "PickerInputBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'right' | 'left'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerInputBaseProps",
       "nameFull": "PickerInputBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "You can return true for all, or some items to fold them."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isSingleLine",
     "comment": [
      "Prevents selected items tags to occupy multiple lines"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerInputBaseProps",
       "nameFull": "PickerInputBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxItems",
     "comment": [
      "Maximum number of tags to display in input, before collapsing to \"N items selected\" mode"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerInputBaseProps",
       "nameFull": "PickerInputBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "minBodyWidth",
     "comment": [
      "Minimum width of dropdown body"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerInputBaseProps",
       "nameFull": "PickerInputBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "minCharsToSearch",
     "comment": [
      "Minimum characters to type, before search will trigger. If input characters number is less then 'minCharsToSearch', it will disable opening dropdown body.",
      " By default search triggers after input value is changed.",
      "",
      " Note: defined minCharsToSearch isn't compatible with searchPosition=body."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerInputBaseProps",
       "nameFull": "PickerInputBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "portalTarget",
     "typeValue": {
      "raw": "undefined | HTMLElement"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerInputBaseProps",
       "nameFull": "PickerInputBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "HTML attributes to put directly to the input and body elements"
     ],
     "typeValue": {
      "raw": "undefined | { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerInputBaseProps",
       "nameFull": "PickerInputBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderFooter",
     "comment": [
      "Adds custom footer to the dropdown body"
     ],
     "typeValue": {
      "raw": "undefined | (props: PickerInputFooterProps<TItem, TId>) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerInputBaseProps",
       "nameFull": "PickerInputBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderNotFound",
     "comment": [
      "Overrides the default 'no records found' banner.",
      " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
     ],
     "typeValue": {
      "raw": "undefined | (props: { search: string; onClose: () => void; }) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderRow",
     "comment": [
      "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
     ],
     "typeValue": {
      "raw": "undefined | (props: DataSourceState<Record<string, any>, any>) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderToggler",
     "comment": [
      "Replaces default 'toggler' - an input to which Picker attaches dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (props: PickerTogglerProps<TItem, TId>) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerInputBaseProps",
       "nameFull": "PickerInputBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "searchPosition",
     "comment": [
      "Defines where search field is:",
      " 'input' - try to place search inside the toggler (default for single-select),",
      " 'body' - put search inside the dropdown (default for multi-select)",
      " 'none' - disables search completely",
      "",
      " Note: 'searchPosition' cannot be 'input' if 'editMode' is 'modal'"
     ],
     "typeValue": {
      "raw": "undefined | 'none' | 'input' | 'body'"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerInputBaseProps",
       "nameFull": "PickerInputBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "comment": [
      "'single' - only one item is selected. 'multi' - multiple items are selected"
     ],
     "typeValue": {
      "raw": "'single'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "SinglePickerProps",
       "nameFull": "SinglePickerProps<TId, TItem>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "shouldShowBody",
     "typeValue": {
      "raw": "undefined | () => boolean"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "comment": [
      "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, sorting: SortingOption<any>) => any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "comment": [
      "Defines sorting to pass to the DataSource"
     ],
     "typeValue": {
      "raw": "undefined | SortingOption<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "toggleModalOpening",
     "typeValue": {
      "raw": "undefined | (opened: boolean) => void"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "valueType",
     "comment": [
      "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
     ],
     "typeValue": {
      "raw": "undefined | 'id'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "SinglePickerProps",
       "nameFull": "SinglePickerProps<TId, TItem>"
      }
     },
     "required": false
    }
   ]
  },
  "UsePickerListProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "UsePickerListProps",
    "nameFull": "UsePickerListProps<TItem, TId, TProps>"
   },
   "typeValue": {
    "raw": "SortingOption<any>): string; } & TProps | SortingOption<any>): string; } & TProps | SortingOption<any>): string; } & TProps | SortingOption<any>): string; } & TProps",
    "print": [
     "type UsePickerListProps<TItem, TId, TProps> = PickerListBaseProps<TItem, TId> & TProps & {};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'implicit' | 'explicit'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dataSource",
     "comment": [
      "Provides items to the Picker"
     ],
     "typeValue": {
      "raw": "IDataSource<TItem, TId, any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "defaultIds",
     "comment": [
      "Ids of items to show first.",
      " If not specified, top props.maxDefaultItems will be shown according to the DataSource sorting settings (default is 10)"
     ],
     "typeValue": {
      "raw": "undefined | TId[]"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerListBaseProps",
       "nameFull": "PickerListBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "emptyValue",
     "comment": [
      "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
     ],
     "typeValue": {
      "raw": "undefined | null | []"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "entityName",
     "comment": [
      "Name of the entity being selected. Affects wording like \"Please select [entity]\""
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "entityPluralName",
     "comment": [
      "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "comment": [
      "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getName",
     "comment": [
      "Gets entity display name. Default it item.name."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getRowOptions",
     "comment": [
      "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "comment": [
      "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => string[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "You can return true for all, or some items to fold them."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxDefaultItems",
     "comment": [
      "Number of default items to show initially, when nothing is selected.",
      " Default it 10 items"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerListBaseProps",
       "nameFull": "PickerListBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxTotalItems",
     "comment": [
      "Maximum total number of items to show, including selected"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerListBaseProps",
       "nameFull": "PickerListBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderNotFound",
     "comment": [
      "Overrides the default 'no records found' banner.",
      " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
     ],
     "typeValue": {
      "raw": "undefined | (props: { search: string; onClose: () => void; }) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderRow",
     "comment": [
      "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
     ],
     "typeValue": {
      "raw": "undefined | (props: DataSourceState<Record<string, any>, any>) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "comment": [
      "'single' - only one item is selected. 'multi' - multiple items are selected"
     ],
     "typeValue": {
      "raw": "'single'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "SinglePickerProps",
       "nameFull": "SinglePickerProps<TId, TItem>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "settingsKey",
     "comment": [
      "If provided, top picks will be automatically adjusted based on last user selection, and stored as user setting under provided key"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerListBaseProps",
       "nameFull": "PickerListBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "comment": [
      "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, sorting: SortingOption<any>) => any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "comment": [
      "Defines sorting to pass to the DataSource"
     ],
     "typeValue": {
      "raw": "undefined | SortingOption<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "valueType",
     "comment": [
      "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
     ],
     "typeValue": {
      "raw": "undefined | 'id'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "SinglePickerProps",
       "nameFull": "SinglePickerProps<TId, TItem>"
      }
     },
     "required": false
    }
   ]
  },
  "UsePickerModalProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "UsePickerModalProps",
    "nameFull": "UsePickerModalProps<TItem, TId>"
   },
   "typeValue": {
    "raw": "PickerModalOptions<TItem, TId> | PickerModalOptions<TItem, TId> | PickerModalOptions<TItem, TId> | PickerModalOptions<TItem, TId>",
    "print": [
     "type UsePickerModalProps<TItem, TId> = PickerBaseOptions<TItem, TId> & IHasCaption & (PickerModalScalarProps<TId, TItem> | PickerModalArrayProps<TId, TItem>) & PickerModalOptions<TItem, TId>;"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "abort",
     "typeValue": {
      "raw": "(result?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'implicit' | 'explicit'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dataSource",
     "comment": [
      "Provides items to the Picker"
     ],
     "typeValue": {
      "raw": "IDataSource<TItem, TId, any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "disallowClickOutside",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerModalOptions",
       "nameFull": "PickerModalOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "emptyValue",
     "comment": [
      "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
     ],
     "typeValue": {
      "raw": "undefined | null | []"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "entityName",
     "comment": [
      "Name of the entity being selected. Affects wording like \"Please select [entity]\""
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "entityPluralName",
     "comment": [
      "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "comment": [
      "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getName",
     "comment": [
      "Gets entity display name. Default it item.name."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getRowOptions",
     "comment": [
      "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "comment": [
      "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => string[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "initialValue",
     "typeValue": {
      "raw": "TId"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerModalScalarProps",
       "nameFull": "PickerModalScalarProps<TId, TItem>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "You can return true for all, or some items to fold them."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderFilter",
     "typeValue": {
      "raw": "undefined | (editableFilter: IEditable<any>) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerModalOptions",
       "nameFull": "PickerModalOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderFooter",
     "typeValue": {
      "raw": "undefined | (props: IModal<any>>) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerModalOptions",
       "nameFull": "PickerModalOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderNotFound",
     "comment": [
      "Overrides the default 'no records found' banner.",
      " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
     ],
     "typeValue": {
      "raw": "undefined | (props: { search: string; onClose: () => void; }) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderRow",
     "comment": [
      "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
     ],
     "typeValue": {
      "raw": "undefined | (props: DataSourceState<Record<string, any>, any>) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "typeValue": {
      "raw": "'single'"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerModalScalarProps",
       "nameFull": "PickerModalScalarProps<TId, TItem>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "comment": [
      "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, sorting: SortingOption<any>) => any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "comment": [
      "Defines sorting to pass to the DataSource"
     ],
     "typeValue": {
      "raw": "undefined | SortingOption<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "success",
     "typeValue": {
      "raw": "(result: TResult) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "valueType",
     "typeValue": {
      "raw": "'id'"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerModalScalarProps",
       "nameFull": "PickerModalScalarProps<TId, TItem>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "zIndex",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    }
   ]
  },
  "ViewType": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ViewType",
    "nameFull": "ViewType"
   },
   "typeValue": {
    "raw": "'DAY_SELECTION' | 'MONTH_SELECTION' | 'YEAR_SELECTION'",
    "print": [
     "type ViewType = 'DAY_SELECTION' | 'MONTH_SELECTION' | 'YEAR_SELECTION';"
    ]
   }
  },
  "VirtualListProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "VirtualListProps",
    "nameFull": "VirtualListProps<List, ScrollContainer>"
   },
   "typeValue": {
    "raw": "BaseVirtualListProps<ScrollContainer> & { rows?: React.ReactNode[] | undefined; renderRows: (config: VirtualListRenderRowsParams<List>) => React.ReactNode; } | BaseVirtualListProps<ScrollContainer> & { rows: React.ReactNode[]; renderRows?: ((config: VirtualListRenderRowsParams<List>) => React.ReactNode) | undefined; }",
    "print": [
     "type VirtualListProps<List extends HTMLElement = any, ScrollContainer extends HTMLElement = any> = BaseVirtualListProps<ScrollContainer> & VirtualListRenderRows<List>;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disableScroll",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "BaseVirtualListProps",
       "nameFull": "BaseVirtualListProps<ScrollContainer>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onScroll",
     "typeValue": {
      "raw": "undefined | (value: PositionValues) => void"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "BaseVirtualListProps",
       "nameFull": "BaseVirtualListProps<ScrollContainer>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderRows",
     "typeValue": {
      "raw": "(config: VirtualListRenderRowsParams<List>) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "VirtualListRenderRows",
       "nameFull": "VirtualListRenderRows<List>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "role",
     "typeValue": {
      "raw": "undefined | 'search' | 'button' | 'checkbox' | 'radio' | string & {} | 'alert' | 'alertdialog' | 'application' | 'article' | 'banner' | 'cell' | 'columnheader' | 'combobox' | 'complementary' | 'contentinfo' | 'definition' | 'dialog' | 'directory' | 'document' | 'feed' | 'figure' | 'form' | 'grid' | 'gridcell' | 'group' | 'heading' | 'img' | 'link' | 'list' | 'listbox' | 'listitem' | 'log' | 'main' | 'marquee' | 'math' | 'menu' | 'menubar' | 'menuitem' | 'menuitemcheckbox' | 'menuitemradio' | 'navigation' | 'none' | 'note' | 'option' | 'presentation' | 'progressbar' | 'radiogroup' | 'region' | 'row' | 'rowgroup' | 'rowheader' | 'scrollbar' | 'searchbox' | 'separator' | 'slider' | 'spinbutton' | 'status' | 'switch' | 'tab' | 'table' | 'tablist' | 'tabpanel' | 'term' | 'textbox' | 'timer' | 'toolbar' | 'tooltip' | 'tree' | 'treegrid' | 'treeitem'"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "BaseVirtualListProps",
       "nameFull": "BaseVirtualListProps<ScrollContainer>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rows",
     "typeValue": {
      "raw": "undefined | React.ReactNode[]"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "VirtualListRenderRows",
       "nameFull": "VirtualListRenderRows<List>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowsCount",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "BaseVirtualListProps",
       "nameFull": "BaseVirtualListProps<ScrollContainer>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowsSelector",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "BaseVirtualListProps",
       "nameFull": "BaseVirtualListProps<ScrollContainer>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "VirtualListRenderRowsParams": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "VirtualListRenderRowsParams",
    "nameFull": "VirtualListRenderRowsParams<List>"
   },
   "typeValue": {
    "raw": "VirtualListRenderRowsParams<List>",
    "print": [
     "interface VirtualListRenderRowsParams<List extends HTMLElement = any> {",
     "    listContainerRef: React.MutableRefObject<List>;",
     "    estimatedHeight: number;",
     "    offsetY: number;",
     "    scrollShadows: {",
     "        verticalTop: boolean;",
     "        verticalBottom: boolean;",
     "        horizontalLeft: boolean;",
     "        horizontalRight: boolean;",
     "    };",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "estimatedHeight",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "listContainerRef",
     "typeValue": {
      "raw": "React.MutableRefObject<List>"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "offsetY",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "scrollShadows",
     "typeValue": {
      "raw": "{ verticalTop: boolean; verticalBottom: boolean; horizontalLeft: boolean; horizontalRight: boolean; }"
     },
     "required": true
    }
   ]
  },
  "YearSelectionProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "YearSelectionProps",
    "nameFull": "YearSelectionProps"
   },
   "typeValue": {
    "raw": "YearSelectionProps",
    "print": [
     "interface YearSelectionProps extends IEditable<Dayjs>, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
     "    selectedDate: Dayjs;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectedDate",
     "typeValue": {
      "raw": "Dayjs"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  }
 },
 "@epam/uui": {
  "AccordionMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "AccordionMods",
    "nameFull": "AccordionMods"
   },
   "typeValue": {
    "raw": "AccordionMods",
    "print": [
     "interface AccordionMods {",
     "    mode?: 'block' | 'inline';",
     "    padding?: '0' | '6' | '12' | '18';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'block' | 'inline'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "typeValue": {
      "raw": "undefined | '0' | '6' | '12' | '18'"
     },
     "required": false
    }
   ]
  },
  "AlertProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "AlertProps",
    "nameFull": "AlertProps"
   },
   "typeValue": {
    "raw": "AlertProps",
    "print": [
     "interface AlertProps extends IHasChildren, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
     "    /** List of actions to display in the alert. Each action has name and 'action' callback */",
     "    actions?: notificationAction[];",
     "    /** Alert color */",
     "    color?: SemanticColor;",
     "    /** When specified, a close icon is rendered. onClose callback will be called on clicking the close icon */",
     "    onClose?(): void;",
     "    /** An optional icon to show on the left of the alert */",
     "    icon?: Icon;",
     "    /** Component size. If omitted, 48 size will be used. */",
     "    size?: '36' | '48';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "actions",
     "comment": [
      "List of actions to display in the alert. Each action has name and 'action' callback"
     ],
     "typeValue": {
      "raw": "undefined | notificationAction[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Alert color"
     ],
     "typeValue": {
      "raw": "undefined | 'info' | 'success' | 'warning' | 'error'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "An optional icon to show on the left of the alert"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClose",
     "comment": [
      "When specified, a close icon is rendered. onClose callback will be called on clicking the close icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "comment": [
      "Component size. If omitted, 48 size will be used."
     ],
     "typeValue": {
      "raw": "undefined | '36' | '48'"
     },
     "required": false
    }
   ]
  },
  "BadgeColor": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "BadgeColor",
    "nameFull": "BadgeColor"
   },
   "typeValue": {
    "raw": "'info' | 'success' | 'warning' | 'error' | 'default'",
    "print": [
     "type BadgeColor = EpamBadgeSemanticColor;"
    ]
   }
  },
  "BadgeFill": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "BadgeFill",
    "nameFull": "BadgeFill"
   },
   "typeValue": {
    "raw": "'solid' | 'semitransparent' | 'transparent'",
    "print": [
     "type BadgeFill = 'solid' | 'semitransparent' | 'transparent';"
    ]
   }
  },
  "BadgeMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "BadgeMods",
    "nameFull": "BadgeMods"
   },
   "typeValue": {
    "raw": "BadgeMods",
    "print": [
     "interface BadgeMods {",
     "    color?: BadgeColor;",
     "    fill?: BadgeFill;",
     "    size?: BadgeSize;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'info' | 'success' | 'warning' | 'error' | 'default'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fill",
     "typeValue": {
      "raw": "undefined | 'solid' | 'semitransparent' | 'transparent'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '18' | '36' | '48' | '24' | '30' | '42'"
     },
     "required": false
    }
   ]
  },
  "BadgeProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "BadgeProps",
    "nameFull": "BadgeProps"
   },
   "typeValue": {
    "raw": "BadgeProps",
    "print": [
     "type BadgeProps = ButtonProps & BadgeMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'info' | 'success' | 'warning' | 'error' | 'default'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "BadgeMods",
       "nameFull": "BadgeMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "typeValue": {
      "raw": "undefined | null | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fill",
     "typeValue": {
      "raw": "undefined | 'solid' | 'semitransparent' | 'transparent'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "BadgeMods",
       "nameFull": "BadgeMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBasicPickerToggler",
       "nameFull": "IBasicPickerToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '18' | '36' | '48' | '24' | '30' | '42'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "BadgeMods",
       "nameFull": "BadgeMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    }
   ]
  },
  "BadgeSize": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "BadgeSize",
    "nameFull": "BadgeSize"
   },
   "typeValue": {
    "raw": "'18' | '36' | '48' | '24' | '30' | '42'",
    "print": [
     "type BadgeSize = '18' | '24' | '30' | '36' | '42' | '48';"
    ]
   }
  },
  "BurgerButtonMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "BurgerButtonMods",
    "nameFull": "BurgerButtonMods"
   },
   "typeValue": {
    "raw": "BurgerButtonMods",
    "print": [
     "interface BurgerButtonMods extends IHasIcon, IDropdownToggler {",
     "    type?: 'primary' | 'secondary';",
     "    indentLevel?: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "indentLevel",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disables component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "typeValue": {
      "raw": "undefined | 'primary' | 'secondary'"
     },
     "required": false
    }
   ]
  },
  "BurgerGroupHeaderProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "BurgerGroupHeaderProps",
    "nameFull": "BurgerGroupHeaderProps"
   },
   "typeValue": {
    "raw": "BurgerGroupHeaderProps",
    "print": [
     "interface BurgerGroupHeaderProps {",
     "    caption: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    }
   ]
  },
  "BurgerMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "BurgerMods",
    "nameFull": "BurgerMods"
   },
   "typeValue": {
    "raw": "BurgerMods",
    "print": [
     "interface BurgerMods {",
     "}"
    ]
   }
  },
  "BurgerSearchProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "BurgerSearchProps",
    "nameFull": "BurgerSearchProps"
   },
   "typeValue": {
    "raw": "BurgerSearchProps",
    "print": [
     "interface BurgerSearchProps extends TextInputProps {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "acceptIcon",
     "comment": [
      "Overrides accept (check) icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoComplete",
     "comment": [
      "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "comment": [
      "Put focus on the element, when component is mounted"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cancelIcon",
     "comment": [
      "Overrides cancel (cross) icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Overrides dropdown (chevron) icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML ID attribute for input"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class(es) to put to the HTML Input element"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputMode",
     "comment": [
      "Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
     ],
     "typeValue": {
      "raw": "undefined | 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "comment": [
      "Maximum input length in characters"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "comment": [
      "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onAccept",
     "comment": [
      "Enables accept (check) icon, and fires when the icon is clicked"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onCancel",
     "comment": [
      "Enables cancel (cross) icon, and fires when the icon is clicked"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "comment": [
      "keydown event handler to put on the HTML input element"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderInput",
     "comment": [
      "overrides rendering of HTML Input element"
     ],
     "typeValue": {
      "raw": "undefined | (props: IRenderInputProps) => JSX.Element"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "comment": [
      "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "ButtonColor": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ButtonColor",
    "nameFull": "ButtonColor"
   },
   "typeValue": {
    "raw": "'primary' | 'secondary' | 'accent' | 'negative'",
    "print": [
     "type ButtonColor = 'accent' | 'primary' | 'secondary' | 'negative';"
    ]
   }
  },
  "ButtonMode": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ButtonMode",
    "nameFull": "ButtonMode"
   },
   "typeValue": {
    "raw": "'solid' | 'none' | 'outline' | 'ghost'",
    "print": [
     "type ButtonMode = 'solid' | 'outline' | 'ghost' | 'none';"
    ]
   }
  },
  "ButtonMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ButtonMods",
    "nameFull": "ButtonMods"
   },
   "typeValue": {
    "raw": "ButtonMods",
    "print": [
     "interface ButtonMods {",
     "    size?: ControlSize | '18';",
     "    mode?: ButtonMode;",
     "    color?: ButtonColor;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'primary' | 'secondary' | 'accent' | 'negative'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'solid' | 'none' | 'outline' | 'ghost'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '18' | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "required": false
    }
   ]
  },
  "ButtonProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ButtonProps",
    "nameFull": "ButtonProps"
   },
   "typeValue": {
    "raw": "ButtonProps",
    "print": [
     "type ButtonProps = ButtonMods & uuiButtonProps;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'primary' | 'secondary' | 'accent' | 'negative'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "ButtonMods",
       "nameFull": "ButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "typeValue": {
      "raw": "undefined | null | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'solid' | 'none' | 'outline' | 'ghost'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "ButtonMods",
       "nameFull": "ButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBasicPickerToggler",
       "nameFull": "IBasicPickerToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '18' | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "ButtonMods",
       "nameFull": "ButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    }
   ]
  },
  "ButtonSemanticColor": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ButtonSemanticColor",
    "nameFull": "ButtonSemanticColor"
   },
   "typeValue": {
    "raw": "'primary' | 'secondary' | 'accent' | 'negative'",
    "print": [
     "type ButtonSemanticColor = 'accent' | 'primary' | 'secondary' | 'negative';"
    ]
   }
  },
  "CheckboxMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "CheckboxMods",
    "nameFull": "CheckboxMods"
   },
   "typeValue": {
    "raw": "CheckboxMods",
    "print": [
     "interface CheckboxMods {",
     "    size?: '12' | '18';",
     "    mode?: 'form' | 'cell';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'form' | 'cell'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '12' | '18'"
     },
     "required": false
    }
   ]
  },
  "CheckboxProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "CheckboxProps",
    "nameFull": "CheckboxProps"
   },
   "typeValue": {
    "raw": "CheckboxProps",
    "print": [
     "type CheckboxProps = CheckboxMods & UuiCheckboxProps;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Check icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "CheckboxProps",
       "nameFull": "CheckboxProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "CheckboxProps",
       "nameFull": "CheckboxProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "indeterminate",
     "comment": [
      "Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICheckable",
       "nameFull": "ICheckable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "indeterminateIcon",
     "comment": [
      "Indeterminate state icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "CheckboxProps",
       "nameFull": "CheckboxProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasLabel",
       "nameFull": "IHasLabel"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'form' | 'cell'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "CheckboxMods",
       "nameFull": "CheckboxMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderLabel",
     "typeValue": {
      "raw": "undefined | () => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "CheckboxProps",
       "nameFull": "CheckboxProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '12' | '18'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "CheckboxMods",
       "nameFull": "CheckboxMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "ColorMod": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ColorMod",
    "nameFull": "ColorMod"
   },
   "typeValue": {
    "raw": "ColorMod",
    "print": [
     "interface ColorMod {",
     "    // TODO remove",
     "    /** Component color */",
     "    color?: SemanticColor;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Component color"
     ],
     "typeValue": {
      "raw": "undefined | 'info' | 'success' | 'warning' | 'error'"
     },
     "required": false
    }
   ]
  },
  "ColumnsConfigurationModalProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ColumnsConfigurationModalProps",
    "nameFull": "ColumnsConfigurationModalProps<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "ColumnsConfigurationModalProps<TItem, TId, TFilter>",
    "print": [
     "interface ColumnsConfigurationModalProps<TItem, TId, TFilter> extends IModal<ColumnsConfig> {",
     "    columnsConfig?: ColumnsConfig;",
     "    defaultConfig: ColumnsConfig;",
     "    columns: DataColumnProps<TItem, TId, TFilter>[];",
     "    renderItem?: (column: DataColumnProps<TItem, TId, TFilter>) => React.ReactNode;",
     "    getSearchFields?: (column: DataColumnProps<TItem, TId, TFilter>) => string[];",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "abort",
     "typeValue": {
      "raw": "(result?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "columns",
     "typeValue": {
      "raw": "DataColumnProps<TItem, TId, TFilter>[]"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "columnsConfig",
     "typeValue": {
      "raw": "undefined | ColumnsConfig"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "defaultConfig",
     "typeValue": {
      "raw": "ColumnsConfig"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "getSearchFields",
     "typeValue": {
      "raw": "undefined | (column: DataColumnProps<TItem, TId, TFilter>) => string[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderItem",
     "typeValue": {
      "raw": "undefined | (column: DataColumnProps<TItem, TId, TFilter>) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "success",
     "typeValue": {
      "raw": "(result: TResult) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "zIndex",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    }
   ]
  },
  "ConfirmationModalWindowProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ConfirmationModalWindowProps",
    "nameFull": "ConfirmationModalWindowProps"
   },
   "typeValue": {
    "raw": "ConfirmationModalWindowProps",
    "print": [
     "interface ConfirmationModalWindowProps extends IModal<any> {",
     "    caption: any;",
     "    bodyContent?: any;",
     "    hideCancelButton?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "abort",
     "typeValue": {
      "raw": "(result?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "bodyContent",
     "typeValue": {
      "raw": "any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "typeValue": {
      "raw": "any"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "hideCancelButton",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "success",
     "typeValue": {
      "raw": "(result: TResult) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "zIndex",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    }
   ]
  },
  "ControlSize": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ControlSize",
    "nameFull": "ControlSize"
   },
   "typeValue": {
    "raw": "'36' | '48' | '24' | '30' | '42' | 'none'",
    "print": [
     "type ControlSize = 'none' | '24' | '30' | '36' | '42' | '48';"
    ]
   }
  },
  "DataPickerBodyProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataPickerBodyProps",
    "nameFull": "DataPickerBodyProps"
   },
   "typeValue": {
    "raw": "DataPickerBodyProps",
    "print": [
     "interface DataPickerBodyProps extends PickerBodyBaseProps {",
     "    maxHeight?: number;",
     "    editMode?: 'dropdown' | 'modal';",
     "    searchSize?: ControlSize;",
     "    selectionMode?: 'single' | 'multi';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "editMode",
     "typeValue": {
      "raw": "undefined | 'dropdown' | 'modal'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "exactRowsCount",
     "comment": [
      "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListCounts",
       "nameFull": "DataSourceListCounts"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fixedBodyPosition",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerBodyBaseProps",
       "nameFull": "PickerBodyBaseProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReloading",
     "comment": [
      "Signals that data is reloading on search/sort/filter/reload."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListProps",
       "nameFull": "DataSourceListProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "knownRowsCount",
     "comment": [
      "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
      " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
      " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListCounts",
       "nameFull": "DataSourceListCounts"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxHeight",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "typeValue": {
      "raw": "undefined | (e: React.KeyboardEvent<HTMLElement>) => void"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerBodyBaseProps",
       "nameFull": "PickerBodyBaseProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderNotFound",
     "typeValue": {
      "raw": "undefined | () => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerBodyBaseProps",
       "nameFull": "PickerBodyBaseProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rows",
     "typeValue": {
      "raw": "React.ReactNode[]"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerBodyBaseProps",
       "nameFull": "PickerBodyBaseProps"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowsCount",
     "comment": [
      "Count of rows, after applying filter, and folding on tree nodes.",
      " Obsolete! Please switch to exactRowsCount / knownRowsCount"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListCounts",
       "nameFull": "DataSourceListCounts"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "scheduleUpdate",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerBodyBaseProps",
       "nameFull": "PickerBodyBaseProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "typeValue": {
      "raw": "IEditable<string>"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerBodyBaseProps",
       "nameFull": "PickerBodyBaseProps"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "searchSize",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "typeValue": {
      "raw": "undefined | ICheckable"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListProps",
       "nameFull": "DataSourceListProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "typeValue": {
      "raw": "undefined | 'single' | 'multi'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "showSearch",
     "typeValue": {
      "raw": "undefined | false | true | 'auto'"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerBodyBaseProps",
       "nameFull": "PickerBodyBaseProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "totalCount",
     "comment": [
      "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListCounts",
       "nameFull": "DataSourceListCounts"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "DataPickerRowProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataPickerRowProps",
    "nameFull": "DataPickerRowProps<TItem, TId>"
   },
   "typeValue": {
    "raw": "DataPickerRowProps<TItem, TId>",
    "print": [
     "interface DataPickerRowProps<TItem, TId> extends DataRowProps<TItem, TId> {",
     "    renderItem(item: TItem, rowProps: DataRowProps<TItem, TId>): React.ReactNode;",
     "    padding?: '12' | '24';",
     "    size?: 'none' | '24' | '30' | '36' | '42' | '48' | '60';",
     "    borderBottom?: 'none' | 'gray20';",
     "    alignActions?: 'top' | 'center';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignActions",
     "typeValue": {
      "raw": "undefined | 'top' | 'center'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "alignItems",
     "comment": [
      "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
     ],
     "typeValue": {
      "raw": "undefined | 'top' | 'center' | 'bottom' | 'stretch'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FlexRowProps",
       "nameFull": "FlexRowProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "borderBottom",
     "typeValue": {
      "raw": "undefined | 'none' | 'gray20'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "checkbox",
     "comment": [
      "If row needs a checkbox, this field should be specified and it props can be configured here"
     ],
     "typeValue": {
      "raw": "undefined | { isVisible: boolean; } & ICanBeInvalid"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "comment": [
      "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "typeValue": {
      "raw": "undefined | number | '6' | '12' | '18' | '36' | '24'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FlexRowProps",
       "nameFull": "FlexRowProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "depth",
     "comment": [
      "Depth of the row in tree, 0 for the top-level"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dnd",
     "comment": [
      "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
     ],
     "typeValue": {
      "raw": "undefined | IDndActor<any, any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "ID of the TItem rows displays"
     ],
     "typeValue": {
      "raw": "TId"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "indent",
     "comment": [
      "Indent of the item, to show hierarchy.",
      "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
      "  if all children of node has no children, all nodes would get the same indent as parent."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "index",
     "comment": [
      "Index of the row, from the top of the list. This doesn't account any hierarchy."
     ],
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isCheckable",
     "comment": [
      "True if row has checkbox and can be checkable"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isChecked",
     "comment": [
      "True if row is checked with checkbox"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenChecked",
     "comment": [
      "True if some of row's children are checked.",
      " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenSelected",
     "comment": [
      "True if any of row's children is selected."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFocused",
     "comment": [
      "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFoldable",
     "comment": [
      "True if row be folded or unfolded (usually because it contains children)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFolded",
     "comment": [
      "True if row is currently folded"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLastChild",
     "comment": [
      "True if row is the last child of his parent"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLoading",
     "comment": [
      "True if row is in loading state. 'value' is empty in this case"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isPinned",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isSelectable",
     "comment": [
      "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isSelected",
     "comment": [
      "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isUnknown",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "undefined | null | string | number"
     },
     "from": {
      "typeName": {
       "name": "Attributes",
       "nameFull": "Attributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Can be specified to make row act as a link (plain or SPA)"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onCheck",
     "comment": [
      "Handles row checkbox change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onFocus",
     "comment": [
      "Handles row focusing."
     ],
     "typeValue": {
      "raw": "undefined | (focusedIndex: number) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onFold",
     "comment": [
      "Handles row folding change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onSelect",
     "comment": [
      "Handles row selection.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "typeValue": {
      "raw": "undefined | '12' | '24'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "parentId",
     "comment": [
      "ID of the parent TItem"
     ],
     "typeValue": {
      "raw": "undefined | TId"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "path",
     "comment": [
      "Hierarchical path from the root node to the item (excluding the item itself)"
     ],
     "typeValue": {
      "raw": "undefined | DataRowPathItem<TId, TItem>[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "pin",
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderItem",
     "typeValue": {
      "raw": "(item: TItem, rowProps: DataRowProps<TItem, TId>) => React.ReactNode"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "comment": [
      "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "typeValue": {
      "raw": "undefined | number | '6' | '12' | '18' | '36' | '24'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FlexRowProps",
       "nameFull": "FlexRowProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowKey",
     "comment": [
      "Key to be used as component's key when rendering. Usually, it's stringified ID"
     ],
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none' | '60'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "DataRowsContainerProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataRowsContainerProps",
    "nameFull": "DataRowsContainerProps<TItem, TId, List>"
   },
   "typeValue": {
    "raw": "DataRowsContainerProps<TItem, TId, List>",
    "print": [
     "interface DataRowsContainerProps<TItem, TId, List extends HTMLDivElement = any> extends VirtualListRenderRowsParams<List> {",
     "    rows: DataRowProps<TItem, TId>[];",
     "    renderRow: (row: DataRowProps<TItem, TId>) => React.ReactNode;",
     "    headerRef?: React.MutableRefObject<HTMLDivElement>;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "estimatedHeight",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "VirtualListRenderRowsParams",
       "nameFull": "VirtualListRenderRowsParams<List>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "headerRef",
     "typeValue": {
      "raw": "undefined | React.MutableRefObject<HTMLDivElement>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "listContainerRef",
     "typeValue": {
      "raw": "React.MutableRefObject<List>"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "VirtualListRenderRowsParams",
       "nameFull": "VirtualListRenderRowsParams<List>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "offsetY",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "VirtualListRenderRowsParams",
       "nameFull": "VirtualListRenderRowsParams<List>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderRow",
     "typeValue": {
      "raw": "(row: DataRowProps<TItem, TId>) => React.ReactNode"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rows",
     "typeValue": {
      "raw": "DataRowProps<TItem, TId>[]"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "scrollShadows",
     "typeValue": {
      "raw": "{ verticalTop: boolean; verticalBottom: boolean; horizontalLeft: boolean; horizontalRight: boolean; }"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "VirtualListRenderRowsParams",
       "nameFull": "VirtualListRenderRowsParams<List>"
      }
     },
     "required": true
    }
   ]
  },
  "DataTableCellMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataTableCellMods",
    "nameFull": "DataTableCellMods"
   },
   "typeValue": {
    "raw": "DataTableCellMods",
    "print": [
     "interface DataTableCellMods extends TableSizesAndPositionMods {",
     "    border?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignActions",
     "typeValue": {
      "raw": "undefined | 'top' | 'center'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TableSizesAndPositionMods",
       "nameFull": "TableSizesAndPositionMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "border",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "typeValue": {
      "raw": "undefined | '0' | '12' | '24'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TableSizesAndPositionMods",
       "nameFull": "TableSizesAndPositionMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none' | '60'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TableSizesAndPositionMods",
       "nameFull": "TableSizesAndPositionMods"
      }
     },
     "required": false
    }
   ]
  },
  "DataTableHeaderCellMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataTableHeaderCellMods",
    "nameFull": "DataTableHeaderCellMods"
   },
   "typeValue": {
    "raw": "DataTableHeaderCellMods",
    "print": [
     "interface DataTableHeaderCellMods extends BaseRowMods {",
     "    textCase?: 'upper' | 'normal';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none' | '60'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "BaseRowMods",
       "nameFull": "BaseRowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "textCase",
     "typeValue": {
      "raw": "undefined | 'upper' | 'normal'"
     },
     "required": false
    }
   ]
  },
  "DataTableHeaderRowMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataTableHeaderRowMods",
    "nameFull": "DataTableHeaderRowMods"
   },
   "typeValue": {
    "raw": "DataTableHeaderRowMods",
    "print": [
     "interface DataTableHeaderRowMods extends BaseRowMods {",
     "    textCase?: 'upper' | 'normal';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none' | '60'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "BaseRowMods",
       "nameFull": "BaseRowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "textCase",
     "typeValue": {
      "raw": "undefined | 'upper' | 'normal'"
     },
     "required": false
    }
   ]
  },
  "DataTableMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataTableMods",
    "nameFull": "DataTableMods"
   },
   "typeValue": {
    "raw": "DataTableMods",
    "print": [
     "interface DataTableMods {",
     "    size?: ControlSize;",
     "    border?: boolean;",
     "    headerTextCase?: 'upper' | 'normal';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "border",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "headerTextCase",
     "typeValue": {
      "raw": "undefined | 'upper' | 'normal'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "required": false
    }
   ]
  },
  "DataTableProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataTableProps",
    "nameFull": "DataTableProps<TItem, TId, TFilter>"
   },
   "typeValue": {
    "raw": "DataTableProps<TItem, TId, TFilter>",
    "print": [
     "interface DataTableProps<TItem, TId, TFilter = any> extends IEditable<DataTableState>, DataSourceListProps, DataTableColumnsConfigOptions {",
     "    getRows(): DataRowProps<TItem, TId>[];",
     "    columns: DataColumnProps<TItem, TId>[];",
     "    renderRow?(props: DataTableRowProps<TItem, TId>): React.ReactNode;",
     "    renderNoResultsBlock?(): React.ReactNode;",
     "    onScroll?(value: PositionValues): void;",
     "    showColumnsConfig?: boolean;",
     "    filters?: TableFiltersConfig<any>[];",
     "    onCopy?: (copyFrom: DataTableSelectedCellData<TItem, TId, TFilter>, selectedCells: DataTableSelectedCellData<TItem, TId, TFilter>[]) => void;",
     "    renderColumnsConfigurationModal?: (props: ColumnsConfigurationModalProps<TItem, TId, TFilter>) => React.ReactNode;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "allowColumnsReordering",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableColumnsConfigOptions",
       "nameFull": "DataTableColumnsConfigOptions"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "allowColumnsResizing",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataTableColumnsConfigOptions",
       "nameFull": "DataTableColumnsConfigOptions"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "columns",
     "typeValue": {
      "raw": "DataColumnProps<TItem, TId, any>[]"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "exactRowsCount",
     "comment": [
      "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListCounts",
       "nameFull": "DataSourceListCounts"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filters",
     "typeValue": {
      "raw": "undefined | TableFiltersConfig<any>[]"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getRows",
     "typeValue": {
      "raw": "() => DataRowProps<TItem, TId>[]"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReloading",
     "comment": [
      "Signals that data is reloading on search/sort/filter/reload."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListProps",
       "nameFull": "DataSourceListProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "knownRowsCount",
     "comment": [
      "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
      " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
      " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListCounts",
       "nameFull": "DataSourceListCounts"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCopy",
     "typeValue": {
      "raw": "undefined | (copyFrom: DataTableSelectedCellData<TItem, TId, TFilter>[]) => void"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onScroll",
     "typeValue": {
      "raw": "undefined | (value: PositionValues) => void"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderColumnsConfigurationModal",
     "typeValue": {
      "raw": "undefined | (props: ColumnsConfigurationModalProps<TItem, TId, TFilter>) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderNoResultsBlock",
     "typeValue": {
      "raw": "undefined | () => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderRow",
     "typeValue": {
      "raw": "undefined | (props: DataTableRowProps<TItem, TId>) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowsCount",
     "comment": [
      "Count of rows, after applying filter, and folding on tree nodes.",
      " Obsolete! Please switch to exactRowsCount / knownRowsCount"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListCounts",
       "nameFull": "DataSourceListCounts"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "typeValue": {
      "raw": "undefined | ICheckable"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListProps",
       "nameFull": "DataSourceListProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "showColumnsConfig",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "totalCount",
     "comment": [
      "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataSourceListCounts",
       "nameFull": "DataSourceListCounts"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "DataTableRowMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DataTableRowMods",
    "nameFull": "DataTableRowMods"
   },
   "typeValue": {
    "raw": "DataTableRowMods",
    "print": [
     "interface DataTableRowMods extends TableSizesAndPositionMods {",
     "    borderBottom?: any;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignActions",
     "typeValue": {
      "raw": "undefined | 'top' | 'center'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TableSizesAndPositionMods",
       "nameFull": "TableSizesAndPositionMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "borderBottom",
     "typeValue": {
      "raw": "any"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "typeValue": {
      "raw": "undefined | '0' | '12' | '24'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TableSizesAndPositionMods",
       "nameFull": "TableSizesAndPositionMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none' | '60'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TableSizesAndPositionMods",
       "nameFull": "TableSizesAndPositionMods"
      }
     },
     "required": false
    }
   ]
  },
  "DatePickerBodyProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DatePickerBodyProps",
    "nameFull": "DatePickerBodyProps"
   },
   "typeValue": {
    "raw": "DatePickerBodyProps",
    "print": [
     "interface DatePickerBodyProps extends DatePickerBodyBaseProps<string> {",
     "    getDayCX?(day: Dayjs): string[];",
     "    isHoliday?: (day: Dayjs) => boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "changeIsOpen",
     "typeValue": {
      "raw": "undefined | (newValue: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DatePickerBodyBaseOptions",
       "nameFull": "DatePickerBodyBaseOptions"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DatePickerBodyBaseOptions",
       "nameFull": "DatePickerBodyBaseOptions"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getDayCX",
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => string[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "typeValue": {
      "raw": "undefined | RangeDatePickerPresets"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DatePickerBodyBaseOptions",
       "nameFull": "DatePickerBodyBaseOptions"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DatePickerBodyBaseOptions",
       "nameFull": "DatePickerBodyBaseOptions"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "setDisplayedDateAndView",
     "typeValue": {
      "raw": "(displayedDate: ViewType) => void"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DatePickerBodyBaseProps",
       "nameFull": "DatePickerBodyBaseProps<TSelection>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "setSelectedDate",
     "typeValue": {
      "raw": "(newDate: TSelection) => void"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DatePickerBodyBaseProps",
       "nameFull": "DatePickerBodyBaseProps<TSelection>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "typeValue": {
      "raw": "PickerBodyValue<TSelection>"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DatePickerBodyBaseProps",
       "nameFull": "DatePickerBodyBaseProps<TSelection>"
      }
     },
     "required": true
    }
   ]
  },
  "DatePickerProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DatePickerProps",
    "nameFull": "DatePickerProps"
   },
   "typeValue": {
    "raw": "DatePickerProps",
    "print": [
     "interface DatePickerProps extends DatePickerCoreProps, SizeMod, IHasEditMode {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bodyCx",
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disableClear",
     "comment": [
      "Disable clearing date value (e.g. via cross icon)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "comment": [
      "Filter selectable days. Days, for which this callback returns false - will be disabled"
     ],
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "format",
     "comment": [
      "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "Styles for input and body components in DatePicker"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "comment": [
      "If this function returns true, the day will be highlighted as holiday"
     ],
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'inline' | 'form' | 'cell'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "IHasEditMode",
       "nameFull": "IHasEditMode"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "typeValue": {
      "raw": "undefined | (e?: React.FocusEvent<HTMLInputElement, Element> | undefined) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'auto' | 'top' | 'bottom' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Attributes for HTML Element"
     ],
     "typeValue": {
      "raw": "undefined | { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "comment": [
      "Overrides rendering of the single day. For example, to highlight certain days"
     ],
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderFooter",
     "comment": [
      "render prop to add a custom footer inside the DatePicker dropdown body"
     ],
     "typeValue": {
      "raw": "undefined | () => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DatePickerCoreProps",
       "nameFull": "DatePickerCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderTarget",
     "comment": [
      "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach DatePicker to other components, e.g. Buttons"
     ],
     "typeValue": {
      "raw": "undefined | (props: IDropdownToggler) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseDatePickerProps",
       "nameFull": "BaseDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "SizeMod",
       "nameFull": "SizeMod"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "DefaultNotificationProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DefaultNotificationProps",
    "nameFull": "DefaultNotificationProps"
   },
   "typeValue": {
    "raw": "DefaultNotificationProps",
    "print": [
     "interface DefaultNotificationProps extends INotification, IHasChildren, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
     "    actions?: NotificationAction[];",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "actions",
     "typeValue": {
      "raw": "undefined | NotificationAction[]"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "clearTimer",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onSuccess",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "refreshTimer",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    }
   ]
  },
  "DropdownContainerMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DropdownContainerMods",
    "nameFull": "DropdownContainerMods"
   },
   "typeValue": {
    "raw": "DropdownContainerMods",
    "print": [
     "interface DropdownContainerMods {",
     "    vPadding?: '6' | '12' | '18' | '24' | '30' | '48';",
     "    padding?: '6' | '12' | '18' | '24' | '30';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "padding",
     "typeValue": {
      "raw": "undefined | '6' | '12' | '18' | '24' | '30'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "vPadding",
     "typeValue": {
      "raw": "undefined | '6' | '12' | '18' | '48' | '24' | '30'"
     },
     "required": false
    }
   ]
  },
  "DropdownContainerProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DropdownContainerProps",
    "nameFull": "DropdownContainerProps"
   },
   "typeValue": {
    "raw": "DropdownContainerProps",
    "print": [
     "interface DropdownContainerProps extends uuiDropdownContainerProps, DropdownContainerMods {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "arrowProps",
     "typeValue": {
      "raw": "undefined | PopperArrowProps"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "as",
     "comment": [
      "Pass element name if you need to change internal FocusLock div element, to any other."
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DropdownContainerProps",
       "nameFull": "DropdownContainerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnEsc",
     "comment": [
      "Pass true to handle Escape key press and call props.onClose().",
      " If omitted, true value will be used. It's used if focusLock=true."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DropdownContainerProps",
       "nameFull": "DropdownContainerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "focusLock",
     "comment": [
      "Pass true to wrap DropdownContainer with FocusLock component to support keyboard navigation.",
      " If omitted, true value will be used.",
      "",
      " After DropdownContainer appeared the focus will be set on the first focusable element inside."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DropdownContainerProps",
       "nameFull": "DropdownContainerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "height",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DropdownContainerProps",
       "nameFull": "DropdownContainerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "lockProps",
     "comment": [
      "Pass any extra props to the FocusLock wrapper."
     ],
     "typeValue": {
      "raw": "undefined | Record<string, any>"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DropdownContainerProps",
       "nameFull": "DropdownContainerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DropdownContainerProps",
       "nameFull": "DropdownContainerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "typeValue": {
      "raw": "undefined | '6' | '12' | '18' | '24' | '30'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "DropdownContainerMods",
       "nameFull": "DropdownContainerMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "persistentFocus",
     "comment": [
      "Pass true to lock focus within DropdownContainer.",
      " If omitted, true value will be used. It's used if focusLock=true."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DropdownContainerProps",
       "nameFull": "DropdownContainerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'auto' | 'top' | 'bottom' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "returnFocus",
     "comment": [
      "Pass true to return focus into initial position on unmount.",
      " If omitted, true value will be used. It's used if focusLock=true."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DropdownContainerProps",
       "nameFull": "DropdownContainerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "scheduleUpdate",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "shards",
     "comment": [
      "Pass an array of ref pointing to the nodes, which focus lock should consider and a part of it. This is a way of focus scattering."
     ],
     "typeValue": {
      "raw": "undefined | React.RefObject<HTMLElement>[]"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DropdownContainerProps",
       "nameFull": "DropdownContainerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "showArrow",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DropdownContainerProps",
       "nameFull": "DropdownContainerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "typeValue": {
      "raw": "undefined | React.CSSProperties"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DropdownContainerProps",
       "nameFull": "DropdownContainerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "togglerHeight",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "togglerWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "vPadding",
     "typeValue": {
      "raw": "undefined | '6' | '12' | '18' | '48' | '24' | '30'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "DropdownContainerMods",
       "nameFull": "DropdownContainerMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "typeValue": {
      "raw": "undefined | number | 'auto'"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DropdownContainerProps",
       "nameFull": "DropdownContainerProps"
      }
     },
     "required": false
    }
   ]
  },
  "DropMarkerProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DropMarkerProps",
    "nameFull": "DropMarkerProps"
   },
   "typeValue": {
    "raw": "DropMarkerProps",
    "print": [
     "interface DropMarkerProps extends DndActorRenderParams, IHasCX {",
     "    enableBlocker?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "classNames",
     "comment": [
      "CSS class names to add to the element.",
      " Some of these markers are used by the DndActor internally, so they must be added even if no used by component itself to apply styles."
     ],
     "typeValue": {
      "raw": "string[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dragData",
     "comment": [
      "Drag data associated with the element. Specified always, even if there is no DnD operation happening."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "enableBlocker",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "eventHandlers",
     "comment": [
      "Event handlers. Component is expected to pass these events to the top element it renders.",
      " As onClick event on the element will be overwritten, use DndActorProps.onClick to receive click events on the element"
     ],
     "typeValue": {
      "raw": "{ onTouchStart?(e: React.TouchEvent<Element>): void; onPointerDown?(e: React.PointerEvent<Element>): void; onPointerEnter?(e: React.PointerEvent<any>): void; onPointerMove?(e: React.PointerEvent<any>): void; onPointerLeave?(e: React.PointerEvent<any>): void; onPointerUp?(e: React.PointerEvent<any>): void; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDndInProgress",
     "comment": [
      "True if any drag and drop operation is in progress, even if the element not being dragged"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggable",
     "comment": [
      "True, if the element can be dragged. Doesn't mean that DnD is active."
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggedOut",
     "comment": [
      "True, if the element is dragged out. True for placeholder left when it's element it dragged out. False for Drag Ghost."
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggedOver",
     "comment": [
      "True, if the element is being dragged over, even if drop is not accepted by the element (canAcceptDrop returned false)"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDragGhost",
     "comment": [
      "True, if the element is rendered as Drag Ghost. All other flags are false for drag ghost."
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropAccepted",
     "comment": [
      "True, if the element is being dragged over, and drop on it is accepted - canAcceptDrop returned true"
     ],
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "position",
     "comment": [
      "Drop position. Chosen from accepted drop positions according to pointer coordinates"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'top' | 'bottom' | 'inside'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Ref to the DOM element to perform DnD actions"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DndActorRenderParams",
       "nameFull": "DndActorRenderParams"
      }
     },
     "required": false
    }
   ]
  },
  "DropSpotProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DropSpotProps",
    "nameFull": "DropSpotProps"
   },
   "typeValue": {
    "raw": "DropSpotProps",
    "print": [
     "interface DropSpotProps extends IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
     "    cx?: string;",
     "    infoText?: string;",
     "    onUploadFiles(files: File[]): any;",
     "    accept?: string;",
     "    single?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "accept",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "infoText",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onUploadFiles",
     "typeValue": {
      "raw": "(files: File[]) => any"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "single",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    }
   ]
  },
  "EpamBadgeSemanticColor": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "EpamBadgeSemanticColor",
    "nameFull": "EpamBadgeSemanticColor"
   },
   "typeValue": {
    "raw": "'info' | 'success' | 'warning' | 'error' | 'default'",
    "print": [
     "type EpamBadgeSemanticColor = 'info' | 'success' | 'warning' | 'error' | 'default';"
    ]
   }
  },
  "FileCardItem": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "FileCardItem",
    "nameFull": "FileCardItem"
   },
   "typeValue": {
    "raw": "FileCardItem",
    "print": [
     "interface FileCardItem extends Partial<File & FileUploadResponse> {",
     "    progress?: number;",
     "    abortXHR?: () => void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "abortXHR",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "arrayBuffer",
     "typeValue": {
      "raw": "() => Promise<ArrayBuffer>"
     },
     "from": {
      "typeName": {
       "name": "Blob",
       "nameFull": "Blob"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "error",
     "typeValue": {
      "raw": "undefined | { isError: boolean; message?: string | undefined; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FileUploadResponse",
       "nameFull": "FileUploadResponse"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "extension",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FileUploadResponse",
       "nameFull": "FileUploadResponse"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FileUploadResponse",
       "nameFull": "FileUploadResponse"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "lastModified",
     "comment": [
      "[MDN Reference](https://developer.mozilla.org/docs/Web/API/File/lastModified)"
     ],
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "typeName": {
       "name": "File",
       "nameFull": "File"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "comment": [
      "[MDN Reference](https://developer.mozilla.org/docs/Web/API/File/name)"
     ],
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "typeName": {
       "name": "File",
       "nameFull": "File"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "path",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FileUploadResponse",
       "nameFull": "FileUploadResponse"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "progress",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "typeName": {
       "name": "Blob",
       "nameFull": "Blob"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "slice",
     "typeValue": {
      "raw": "(start?: number | undefined, end?: number | undefined, contentType?: string | undefined) => Blob"
     },
     "from": {
      "typeName": {
       "name": "Blob",
       "nameFull": "Blob"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "stream",
     "typeValue": {
      "raw": "() => ReadableStream<Uint8Array>"
     },
     "from": {
      "typeName": {
       "name": "Blob",
       "nameFull": "Blob"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "text",
     "typeValue": {
      "raw": "() => Promise<string>"
     },
     "from": {
      "typeName": {
       "name": "Blob",
       "nameFull": "Blob"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "typeName": {
       "name": "Blob",
       "nameFull": "Blob"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "webkitRelativePath",
     "comment": [
      "[MDN Reference](https://developer.mozilla.org/docs/Web/API/File/webkitRelativePath)"
     ],
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "typeName": {
       "name": "File",
       "nameFull": "File"
      }
     },
     "required": true
    }
   ]
  },
  "FileCardProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "FileCardProps",
    "nameFull": "FileCardProps"
   },
   "typeValue": {
    "raw": "FileCardProps",
    "print": [
     "interface FileCardProps extends IClickable, IHasCX {",
     "    file: FileCardItem;",
     "    width?: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "file",
     "typeValue": {
      "raw": "FileCardItem"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    }
   ]
  },
  "FillStyle": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "FillStyle",
    "nameFull": "FillStyle"
   },
   "typeValue": {
    "raw": "'solid' | 'none' | 'outline' | 'ghost'",
    "print": [
     "type FillStyle = ButtonMode;"
    ]
   }
  },
  "FiltersPanelProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "FiltersPanelProps",
    "nameFull": "FiltersPanelProps<TFilter>"
   },
   "typeValue": {
    "raw": "FiltersPanelProps<TFilter>",
    "print": [
     "interface FiltersPanelProps<TFilter> {",
     "    filters: TableFiltersConfig<TFilter>[];",
     "    tableState: DataTableState;",
     "    setTableState: (newState: DataTableState) => void;",
     "    size?: '24' | '30' | '36' | '42' | '48';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "filters",
     "typeValue": {
      "raw": "TableFiltersConfig<TFilter>[]"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "setTableState",
     "typeValue": {
      "raw": "(newState: DataTableState<any, any>) => void"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tableState",
     "typeValue": {
      "raw": "DataTableState<any, any>"
     },
     "required": true
    }
   ]
  },
  "FlexCellMods": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "FlexCellMods",
    "nameFull": "FlexCellMods"
   },
   "typeValue": {
    "raw": "FlexCellMods",
    "print": [
     "type FlexCellMods = {};"
    ]
   }
  },
  "FlexRowProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "FlexRowProps",
    "nameFull": "FlexRowProps"
   },
   "typeValue": {
    "raw": "FlexRowProps",
    "print": [
     "interface FlexRowProps extends Omit<uuiFlexRowProps, 'columnGap' | 'rowGap'> {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignItems",
     "comment": [
      "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
     ],
     "typeValue": {
      "raw": "undefined | 'top' | 'center' | 'bottom' | 'stretch'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FlexRowProps",
       "nameFull": "FlexRowProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "undefined | null | string | number"
     },
     "from": {
      "typeName": {
       "name": "Attributes",
       "nameFull": "Attributes"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    }
   ]
  },
  "FontStyle": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "FontStyle",
    "nameFull": "FontStyle"
   },
   "typeValue": {
    "raw": "'primary' | 'regular' | 'semibold' | 'italic' | 'promo'",
    "print": [
     "type FontStyle = 'regular' | 'semibold' | 'italic' | 'primary' | 'promo';"
    ]
   }
  },
  "GlobalMenuProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "GlobalMenuProps",
    "nameFull": "GlobalMenuProps"
   },
   "typeValue": {
    "raw": "GlobalMenuProps",
    "print": [
     "interface GlobalMenuProps extends IAdaptiveItem, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLButtonElement>> {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "collapseToMore",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "estimatedWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "showInBurgerMenu",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    }
   ]
  },
  "HighlightRange": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "HighlightRange",
    "nameFull": "HighlightRange"
   },
   "typeValue": {
    "raw": "HighlightRange",
    "print": [
     "interface HighlightRange {",
     "    from: number;",
     "    to: number;",
     "    isHighlighted: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "from",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isHighlighted",
     "typeValue": {
      "raw": "false | true"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "to",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    }
   ]
  },
  "IconButtonMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IconButtonMods",
    "nameFull": "IconButtonMods"
   },
   "typeValue": {
    "raw": "IconButtonMods",
    "print": [
     "interface IconButtonMods {",
     "    color?: IconColor;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'info' | 'success' | 'warning' | 'error' | 'default' | 'secondary'"
     },
     "required": false
    }
   ]
  },
  "IconButtonProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IconButtonProps",
    "nameFull": "IconButtonProps"
   },
   "typeValue": {
    "raw": "IconButtonProps",
    "print": [
     "interface IconButtonProps extends IconButtonBaseProps, IconButtonMods {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'info' | 'success' | 'warning' | 'error' | 'default' | 'secondary'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "IconButtonMods",
       "nameFull": "IconButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    }
   ]
  },
  "IconColor": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "IconColor",
    "nameFull": "IconColor"
   },
   "typeValue": {
    "raw": "'info' | 'success' | 'warning' | 'error' | 'default' | 'secondary'",
    "print": [
     "type IconColor = 'info' | 'success' | 'warning' | 'error' | 'secondary' | 'default';"
    ]
   }
  },
  "IDropdownMenuContainer": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IDropdownMenuContainer",
    "nameFull": "IDropdownMenuContainer"
   },
   "typeValue": {
    "raw": "IDropdownMenuContainer",
    "print": [
     "interface IDropdownMenuContainer extends VPanelProps, DropdownBodyProps {",
     "    closeOnKey?: React.KeyboardEvent<HTMLElement>['key'];",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "arrowProps",
     "typeValue": {
      "raw": "undefined | PopperArrowProps"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnKey",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'auto' | 'top' | 'bottom' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "scheduleUpdate",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "typeValue": {
      "raw": "undefined | React.CSSProperties"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "VPanelProps",
       "nameFull": "VPanelProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "togglerHeight",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "togglerWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownBodyProps",
       "nameFull": "IDropdownBodyProps"
      }
     },
     "required": false
    }
   ]
  },
  "IDropdownMenuItemProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IDropdownMenuItemProps",
    "nameFull": "IDropdownMenuItemProps"
   },
   "typeValue": {
    "raw": "IDropdownMenuItemProps",
    "print": [
     "interface IDropdownMenuItemProps extends IHasIcon, ICanRedirect, IHasCX, IDisableable, IAnalyticableClick, IDropdownToggler {",
     "    isSelected?: boolean;",
     "    isActive?: boolean;",
     "    indent?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "indent",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isSelected",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    }
   ]
  },
  "IHasEditMode": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IHasEditMode",
    "nameFull": "IHasEditMode"
   },
   "typeValue": {
    "raw": "IHasEditMode",
    "print": [
     "interface IHasEditMode {",
     "    mode?: 'form' | 'cell' | 'inline';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'inline' | 'form' | 'cell'"
     },
     "required": false
    }
   ]
  },
  "IndeterminateBarMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IndeterminateBarMods",
    "nameFull": "IndeterminateBarMods"
   },
   "typeValue": {
    "raw": "IndeterminateBarMods",
    "print": [
     "interface IndeterminateBarMods extends IHasCX {",
     "    size?: '12' | '18' | '24';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '12' | '18' | '24'"
     },
     "required": false
    }
   ]
  },
  "InputType": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "InputType",
    "nameFull": "InputType"
   },
   "typeValue": {
    "raw": "'from' | 'to'",
    "print": [
     "type InputType = 'from' | 'to';"
    ]
   }
  },
  "ITextPlaceholderProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ITextPlaceholderProps",
    "nameFull": "ITextPlaceholderProps"
   },
   "typeValue": {
    "raw": "ITextPlaceholderProps",
    "print": [
     "interface ITextPlaceholderProps extends IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasCX {",
     "    wordsCount?: number;",
     "    isNotAnimated?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isNotAnimated",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "wordsCount",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    }
   ]
  },
  "LabeledInputMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "LabeledInputMods",
    "nameFull": "LabeledInputMods"
   },
   "typeValue": {
    "raw": "LabeledInputMods",
    "print": [
     "interface LabeledInputMods extends types.SizeMod {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "SizeMod",
       "nameFull": "SizeMod"
      }
     },
     "required": false
    }
   ]
  },
  "LinkButtonColorType": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "LinkButtonColorType",
    "nameFull": "LinkButtonColorType"
   },
   "typeValue": {
    "raw": "'primary' | 'secondary' | 'contrast'",
    "print": [
     "type LinkButtonColorType = 'primary' | 'secondary' | 'contrast';"
    ]
   }
  },
  "LinkButtonMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "LinkButtonMods",
    "nameFull": "LinkButtonMods"
   },
   "typeValue": {
    "raw": "LinkButtonMods",
    "print": [
     "interface LinkButtonMods {",
     "    size?: types.ControlSize | '42';",
     "    color?: LinkButtonColorType;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'primary' | 'secondary' | 'contrast'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "required": false
    }
   ]
  },
  "LinkButtonProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "LinkButtonProps",
    "nameFull": "LinkButtonProps"
   },
   "typeValue": {
    "raw": "LinkButtonProps",
    "print": [
     "type LinkButtonProps = LinkButtonMods & ButtonProps;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'primary' | 'secondary' | 'contrast'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "LinkButtonMods",
       "nameFull": "LinkButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "typeValue": {
      "raw": "undefined | null | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBasicPickerToggler",
       "nameFull": "IBasicPickerToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "LinkButtonMods",
       "nameFull": "LinkButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    }
   ]
  },
  "MainMenuAvatarProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "MainMenuAvatarProps",
    "nameFull": "MainMenuAvatarProps"
   },
   "typeValue": {
    "raw": "MainMenuAvatarProps",
    "print": [
     "interface MainMenuAvatarProps extends IAdaptiveItem, IDropdownToggler, IHasCX {",
     "    avatarUrl?: string;",
     "    icon?: Icon;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "avatarUrl",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "collapseToMore",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "estimatedWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disables component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "showInBurgerMenu",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    }
   ]
  },
  "MainMenuButtonMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "MainMenuButtonMods",
    "nameFull": "MainMenuButtonMods"
   },
   "typeValue": {
    "raw": "MainMenuButtonMods",
    "print": [
     "interface MainMenuButtonMods {",
     "    type?: 'primary' | 'secondary';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "type",
     "typeValue": {
      "raw": "undefined | 'primary' | 'secondary'"
     },
     "required": false
    }
   ]
  },
  "MainMenuIconProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "MainMenuIconProps",
    "nameFull": "MainMenuIconProps"
   },
   "typeValue": {
    "raw": "MainMenuIconProps",
    "print": [
     "interface MainMenuIconProps extends ButtonProps, IAdaptiveItem {",
     "    icon: Icon;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "collapseToMore",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "typeValue": {
      "raw": "undefined | null | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "estimatedWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "typeValue": {
      "raw": "Icon"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBasicPickerToggler",
       "nameFull": "IBasicPickerToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "showInBurgerMenu",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    }
   ]
  },
  "MainMenuMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "MainMenuMods",
    "nameFull": "MainMenuMods"
   },
   "typeValue": {
    "raw": "MainMenuMods",
    "print": [
     "interface MainMenuMods {",
     "}"
    ]
   }
  },
  "MainMenuSearchProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "MainMenuSearchProps",
    "nameFull": "MainMenuSearchProps"
   },
   "typeValue": {
    "raw": "MainMenuSearchProps",
    "print": [
     "interface MainMenuSearchProps extends TextInputProps, IAdaptiveItem {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "acceptIcon",
     "comment": [
      "Overrides accept (check) icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoComplete",
     "comment": [
      "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "comment": [
      "Put focus on the element, when component is mounted"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cancelIcon",
     "comment": [
      "Overrides cancel (cross) icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "collapseToMore",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Overrides dropdown (chevron) icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "estimatedWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML ID attribute for input"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class(es) to put to the HTML Input element"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputMode",
     "comment": [
      "Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
     ],
     "typeValue": {
      "raw": "undefined | 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "comment": [
      "Maximum input length in characters"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "comment": [
      "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onAccept",
     "comment": [
      "Enables accept (check) icon, and fires when the icon is clicked"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onCancel",
     "comment": [
      "Enables cancel (cross) icon, and fires when the icon is clicked"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "comment": [
      "keydown event handler to put on the HTML input element"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderInput",
     "comment": [
      "overrides rendering of HTML Input element"
     ],
     "typeValue": {
      "raw": "undefined | (props: IRenderInputProps) => JSX.Element"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "showInBurgerMenu",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAdaptiveItem",
       "nameFull": "IAdaptiveItem"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "comment": [
      "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "ModalFooterProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ModalFooterProps",
    "nameFull": "ModalFooterProps"
   },
   "typeValue": {
    "raw": "ModalFooterProps",
    "print": [
     "interface ModalFooterProps extends RowMods, ModalFooterCoreProps {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "borderBottom",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "borderTop",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ModalFooterCoreProps",
       "nameFull": "ModalFooterCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "typeValue": {
      "raw": "undefined | number | '6' | '12' | '18' | '36' | '24'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "margin",
     "typeValue": {
      "raw": "undefined | '12' | '24'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "typeValue": {
      "raw": "undefined | '6' | '12' | '18' | '24'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "typeValue": {
      "raw": "undefined | number | '6' | '12' | '18' | '36' | '24'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | null | '36' | '48' | '24' | '30' | '42'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowSizeMod",
       "nameFull": "RowSizeMod"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "spacing",
     "typeValue": {
      "raw": "undefined | '6' | '12' | '18'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "topShadow",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "vPadding",
     "typeValue": {
      "raw": "undefined | '12' | '18' | '36' | '48' | '24'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    }
   ]
  },
  "ModalHeaderProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ModalHeaderProps",
    "nameFull": "ModalHeaderProps"
   },
   "typeValue": {
    "raw": "ModalHeaderProps",
    "print": [
     "interface ModalHeaderProps extends RowMods, ModalHeaderCoreProps {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "borderBottom",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "typeValue": {
      "raw": "undefined | number | '6' | '12' | '18' | '36' | '24'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "margin",
     "typeValue": {
      "raw": "undefined | '12' | '24'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ModalHeaderCoreProps",
       "nameFull": "ModalHeaderCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "typeValue": {
      "raw": "undefined | '6' | '12' | '18' | '24'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "typeValue": {
      "raw": "undefined | number | '6' | '12' | '18' | '36' | '24'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | null | '36' | '48' | '24' | '30' | '42'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowSizeMod",
       "nameFull": "RowSizeMod"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "spacing",
     "typeValue": {
      "raw": "undefined | '6' | '12' | '18'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "title",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ModalHeaderCoreProps",
       "nameFull": "ModalHeaderCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "topShadow",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "vPadding",
     "typeValue": {
      "raw": "undefined | '12' | '18' | '36' | '48' | '24'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    }
   ]
  },
  "ModalWindowMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ModalWindowMods",
    "nameFull": "ModalWindowMods"
   },
   "typeValue": {
    "raw": "ModalWindowMods",
    "print": [
     "interface ModalWindowMods {",
     "    width?: number;",
     "    height?: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "height",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    }
   ]
  },
  "ModalWindowProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ModalWindowProps",
    "nameFull": "ModalWindowProps"
   },
   "typeValue": {
    "raw": "ModalWindowProps",
    "print": [
     "type ModalWindowProps = UuiModalWindowProps & ModalWindowMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "height",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "ModalWindowMods",
       "nameFull": "ModalWindowMods"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "typeValue": {
      "raw": "undefined | React.CSSProperties"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "VPanelProps",
       "nameFull": "VPanelProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "ModalWindowMods",
       "nameFull": "ModalWindowMods"
      }
     },
     "required": false
    }
   ]
  },
  "MultiSwitchProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "MultiSwitchProps",
    "nameFull": "MultiSwitchProps<TValue>"
   },
   "typeValue": {
    "raw": "MultiSwitchProps<TValue>",
    "print": [
     "interface MultiSwitchProps<TValue> extends IEditable<TValue>, SizeMod, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
     "    items: MultiSwitchItem<TValue>[];",
     "    color?: UuiMultiSwitchColor;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'primary' | 'secondary'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "typeValue": {
      "raw": "MultiSwitchItem<TValue>[]"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "SizeMod",
       "nameFull": "SizeMod"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "NotificationCardProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "NotificationCardProps",
    "nameFull": "NotificationCardProps"
   },
   "typeValue": {
    "raw": "NotificationCardProps",
    "print": [
     "interface NotificationCardProps extends DefaultNotificationProps {",
     "    icon?: Icon;",
     "    color?: SemanticColor;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "actions",
     "typeValue": {
      "raw": "undefined | NotificationAction[]"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "DefaultNotificationProps",
       "nameFull": "DefaultNotificationProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "clearTimer",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'info' | 'success' | 'warning' | 'error'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onSuccess",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "refreshTimer",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    }
   ]
  },
  "NumericInputMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "NumericInputMods",
    "nameFull": "NumericInputMods"
   },
   "typeValue": {
    "raw": "NumericInputMods",
    "print": [
     "interface NumericInputMods extends types.SizeMod, IHasEditMode {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'inline' | 'form' | 'cell'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "IHasEditMode",
       "nameFull": "IHasEditMode"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "SizeMod",
       "nameFull": "SizeMod"
      }
     },
     "required": false
    }
   ]
  },
  "NumericInputProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "NumericInputProps",
    "nameFull": "NumericInputProps"
   },
   "typeValue": {
    "raw": "NumericInputProps",
    "print": [
     "type NumericInputProps = uuiNumericInputProps & NumericInputMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "align",
     "comment": [
      "Align text inside the component. Useful for tables (in cell-mode) - to align numbers in table column"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "NumericInputProps",
       "nameFull": "NumericInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disableArrows",
     "comment": [
      "Turn off up/down (increase/decrease) buttons"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "NumericInputProps",
       "nameFull": "NumericInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disableLocaleFormatting",
     "comment": [
      "Turns off locale-based formatting, standard Number.toString() is used instead"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "NumericInputProps",
       "nameFull": "NumericInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "downIcon",
     "comment": [
      "Overrides the down/decrease icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "NumericInputProps",
       "nameFull": "NumericInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "formatOptions",
     "comment": [
      "Number formatting options. See #{link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat}"
     ],
     "typeValue": {
      "raw": "undefined | Intl.NumberFormatOptions"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "NumericInputProps",
       "nameFull": "NumericInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "formatValue",
     "comment": [
      "A function to convert current input value to displayed text.",
      " Overrides standard Intl-based formatting.",
      " If passed, only maximumFractionDigits considered from formatOptions when both properties provided.",
      " Note, that formatting is used when input is out of focus."
     ],
     "typeValue": {
      "raw": "undefined | (value: number) => string"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "NumericInputProps",
       "nameFull": "NumericInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML ID"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "NumericInputProps",
       "nameFull": "NumericInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS classes to put directly on the Input element"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "NumericInputProps",
       "nameFull": "NumericInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "max",
     "comment": [
      "Maximum value (default is Number.MAX_SAFE_INTEGER)"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "NumericInputProps",
       "nameFull": "NumericInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "min",
     "comment": [
      "Minimum value (default is 0)"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "NumericInputProps",
       "nameFull": "NumericInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'inline' | 'form' | 'cell'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "IHasEditMode",
       "nameFull": "IHasEditMode"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "SizeMod",
       "nameFull": "SizeMod"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "step",
     "comment": [
      "Increase/decrease step (for icons and )"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "NumericInputProps",
       "nameFull": "NumericInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "upIcon",
     "comment": [
      "Overrides the up/increase icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "NumericInputProps",
       "nameFull": "NumericInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "PanelMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "PanelMods",
    "nameFull": "PanelMods"
   },
   "typeValue": {
    "raw": "PanelMods",
    "print": [
     "interface PanelMods {",
     "    shadow?: boolean;",
     "    margin?: '24';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "margin",
     "typeValue": {
      "raw": "undefined | '24'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "shadow",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    }
   ]
  },
  "PickerInputProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "PickerInputProps",
    "nameFull": "PickerInputProps"
   },
   "typeValue": {
    "raw": "PickerInputProps",
    "print": [
     "type PickerInputProps = SizeMod & IHasEditMode & {};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'inline' | 'form' | 'cell'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "IHasEditMode",
       "nameFull": "IHasEditMode"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "SizeMod",
       "nameFull": "SizeMod"
      }
     },
     "required": false
    }
   ]
  },
  "PickerItemProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "PickerItemProps",
    "nameFull": "PickerItemProps<TItem, TId>"
   },
   "typeValue": {
    "raw": "PickerItemProps<TItem, TId>",
    "print": [
     "interface PickerItemProps<TItem, TId> extends DataRowProps<TItem, TId>, SizeMod {",
     "    avatarUrl?: string;",
     "    icon?: Icon;",
     "    title?: string;",
     "    subtitle?: string;",
     "    dataSourceState?: DataSourceState;",
     "    /**",
     "     * Enables highlighting of the items' text with search-matching results.",
     "     * @default true",
     "     * */",
     "    highlightSearchMatches?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignItems",
     "comment": [
      "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
     ],
     "typeValue": {
      "raw": "undefined | 'top' | 'center' | 'bottom' | 'stretch'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FlexRowProps",
       "nameFull": "FlexRowProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "avatarUrl",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "checkbox",
     "comment": [
      "If row needs a checkbox, this field should be specified and it props can be configured here"
     ],
     "typeValue": {
      "raw": "undefined | { isVisible: boolean; } & ICanBeInvalid"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "comment": [
      "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "typeValue": {
      "raw": "undefined | number | '6' | '12' | '18' | '36' | '24'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FlexRowProps",
       "nameFull": "FlexRowProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dataSourceState",
     "typeValue": {
      "raw": "undefined | DataSourceState<Record<string, any>, any>"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "depth",
     "comment": [
      "Depth of the row in tree, 0 for the top-level"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dnd",
     "comment": [
      "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
     ],
     "typeValue": {
      "raw": "undefined | IDndActor<any, any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "highlightSearchMatches",
     "comment": [
      "Enables highlighting of the items' text with search-matching results.",
      " @default true"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "ID of the TItem rows displays"
     ],
     "typeValue": {
      "raw": "TId"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "indent",
     "comment": [
      "Indent of the item, to show hierarchy.",
      "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
      "  if all children of node has no children, all nodes would get the same indent as parent."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "index",
     "comment": [
      "Index of the row, from the top of the list. This doesn't account any hierarchy."
     ],
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isCheckable",
     "comment": [
      "True if row has checkbox and can be checkable"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isChecked",
     "comment": [
      "True if row is checked with checkbox"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenChecked",
     "comment": [
      "True if some of row's children are checked.",
      " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenSelected",
     "comment": [
      "True if any of row's children is selected."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFocused",
     "comment": [
      "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFoldable",
     "comment": [
      "True if row be folded or unfolded (usually because it contains children)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFolded",
     "comment": [
      "True if row is currently folded"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLastChild",
     "comment": [
      "True if row is the last child of his parent"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLoading",
     "comment": [
      "True if row is in loading state. 'value' is empty in this case"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isPinned",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isSelectable",
     "comment": [
      "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isSelected",
     "comment": [
      "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isUnknown",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "undefined | null | string | number"
     },
     "from": {
      "typeName": {
       "name": "Attributes",
       "nameFull": "Attributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Can be specified to make row act as a link (plain or SPA)"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onCheck",
     "comment": [
      "Handles row checkbox change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onFocus",
     "comment": [
      "Handles row focusing."
     ],
     "typeValue": {
      "raw": "undefined | (focusedIndex: number) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onFold",
     "comment": [
      "Handles row folding change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onSelect",
     "comment": [
      "Handles row selection.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "parentId",
     "comment": [
      "ID of the parent TItem"
     ],
     "typeValue": {
      "raw": "undefined | TId"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "path",
     "comment": [
      "Hierarchical path from the root node to the item (excluding the item itself)"
     ],
     "typeValue": {
      "raw": "undefined | DataRowPathItem<TId, TItem>[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "pin",
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "comment": [
      "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "typeValue": {
      "raw": "undefined | number | '6' | '12' | '18' | '36' | '24'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FlexRowProps",
       "nameFull": "FlexRowProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowKey",
     "comment": [
      "Key to be used as component's key when rendering. Usually, it's stringified ID"
     ],
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "SizeMod",
       "nameFull": "SizeMod"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "subtitle",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "title",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "PickerListItemProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "PickerListItemProps",
    "nameFull": "PickerListItemProps<TItem, TId>"
   },
   "typeValue": {
    "raw": "PickerListItemProps<TItem, TId>",
    "print": [
     "interface PickerListItemProps<TItem, TId> extends DataRowProps<TItem, TId> {",
     "    getName(item: TItem): string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignItems",
     "comment": [
      "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
     ],
     "typeValue": {
      "raw": "undefined | 'top' | 'center' | 'bottom' | 'stretch'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FlexRowProps",
       "nameFull": "FlexRowProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "checkbox",
     "comment": [
      "If row needs a checkbox, this field should be specified and it props can be configured here"
     ],
     "typeValue": {
      "raw": "undefined | { isVisible: boolean; } & ICanBeInvalid"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "comment": [
      "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "typeValue": {
      "raw": "undefined | number | '6' | '12' | '18' | '36' | '24'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FlexRowProps",
       "nameFull": "FlexRowProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "depth",
     "comment": [
      "Depth of the row in tree, 0 for the top-level"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dnd",
     "comment": [
      "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
     ],
     "typeValue": {
      "raw": "undefined | IDndActor<any, any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getName",
     "typeValue": {
      "raw": "(item: TItem) => string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "ID of the TItem rows displays"
     ],
     "typeValue": {
      "raw": "TId"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "indent",
     "comment": [
      "Indent of the item, to show hierarchy.",
      "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
      "  if all children of node has no children, all nodes would get the same indent as parent."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "index",
     "comment": [
      "Index of the row, from the top of the list. This doesn't account any hierarchy."
     ],
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isCheckable",
     "comment": [
      "True if row has checkbox and can be checkable"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isChecked",
     "comment": [
      "True if row is checked with checkbox"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenChecked",
     "comment": [
      "True if some of row's children are checked.",
      " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenSelected",
     "comment": [
      "True if any of row's children is selected."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFocused",
     "comment": [
      "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFoldable",
     "comment": [
      "True if row be folded or unfolded (usually because it contains children)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFolded",
     "comment": [
      "True if row is currently folded"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLastChild",
     "comment": [
      "True if row is the last child of his parent"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLoading",
     "comment": [
      "True if row is in loading state. 'value' is empty in this case"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isPinned",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isSelectable",
     "comment": [
      "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isSelected",
     "comment": [
      "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isUnknown",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "undefined | null | string | number"
     },
     "from": {
      "typeName": {
       "name": "Attributes",
       "nameFull": "Attributes"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Can be specified to make row act as a link (plain or SPA)"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onCheck",
     "comment": [
      "Handles row checkbox change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onFocus",
     "comment": [
      "Handles row focusing."
     ],
     "typeValue": {
      "raw": "undefined | (focusedIndex: number) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onFold",
     "comment": [
      "Handles row folding change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onSelect",
     "comment": [
      "Handles row selection.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "parentId",
     "comment": [
      "ID of the parent TItem"
     ],
     "typeValue": {
      "raw": "undefined | TId"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "path",
     "comment": [
      "Hierarchical path from the root node to the item (excluding the item itself)"
     ],
     "typeValue": {
      "raw": "undefined | DataRowPathItem<TId, TItem>[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "pin",
     "typeValue": {
      "raw": "undefined | (rowProps: DataRowProps<TItem, TId>) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowOptions",
       "nameFull": "DataRowOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "comment": [
      "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "typeValue": {
      "raw": "undefined | number | '6' | '12' | '18' | '36' | '24'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "FlexRowProps",
       "nameFull": "FlexRowProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowKey",
     "comment": [
      "Key to be used as component's key when rendering. Usually, it's stringified ID"
     ],
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DataRowProps",
       "nameFull": "DataRowProps<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "PickerListProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "PickerListProps",
    "nameFull": "PickerListProps<TItem, TId>"
   },
   "typeValue": {
    "raw": "IHasEditMode | IHasEditMode | IHasEditMode | IHasEditMode",
    "print": [
     "type PickerListProps<TItem, TId> = SizeMod & IHasPlaceholder & PickerModalOptions<TItem, TId> & {",
     "    renderModalToggler?(props: IClickable & IHasCaption & IDisableable, selection: DataRowProps<TItem, TId>[]): React.ReactNode;",
     "    noOptionsMessage?: React.ReactNode;",
     "} & PickerListBaseProps<TItem, TId> & IHasEditMode;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'implicit' | 'explicit'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dataSource",
     "comment": [
      "Provides items to the Picker"
     ],
     "typeValue": {
      "raw": "IDataSource<TItem, TId, any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "defaultIds",
     "comment": [
      "Ids of items to show first.",
      " If not specified, top props.maxDefaultItems will be shown according to the DataSource sorting settings (default is 10)"
     ],
     "typeValue": {
      "raw": "undefined | TId[]"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerListBaseProps",
       "nameFull": "PickerListBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disallowClickOutside",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerModalOptions",
       "nameFull": "PickerModalOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "emptyValue",
     "comment": [
      "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
     ],
     "typeValue": {
      "raw": "undefined | null | []"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "entityName",
     "comment": [
      "Name of the entity being selected. Affects wording like \"Please select [entity]\""
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "entityPluralName",
     "comment": [
      "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "comment": [
      "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getName",
     "comment": [
      "Gets entity display name. Default it item.name."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getRowOptions",
     "comment": [
      "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "comment": [
      "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => string[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "You can return true for all, or some items to fold them."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxDefaultItems",
     "comment": [
      "Number of default items to show initially, when nothing is selected.",
      " Default it 10 items"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerListBaseProps",
       "nameFull": "PickerListBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxTotalItems",
     "comment": [
      "Maximum total number of items to show, including selected"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerListBaseProps",
       "nameFull": "PickerListBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'inline' | 'form' | 'cell'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "IHasEditMode",
       "nameFull": "IHasEditMode"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "noOptionsMessage",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderFilter",
     "typeValue": {
      "raw": "undefined | (editableFilter: IEditable<any>) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerModalOptions",
       "nameFull": "PickerModalOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderFooter",
     "typeValue": {
      "raw": "undefined | (props: IModal<any>>) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerModalOptions",
       "nameFull": "PickerModalOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderModalToggler",
     "typeValue": {
      "raw": "undefined | (props: DataRowProps<TItem, TId>[]) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderNotFound",
     "comment": [
      "Overrides the default 'no records found' banner.",
      " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
     ],
     "typeValue": {
      "raw": "undefined | (props: { search: string; onClose: () => void; }) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderRow",
     "comment": [
      "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
     ],
     "typeValue": {
      "raw": "undefined | (props: DataSourceState<Record<string, any>, any>) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "comment": [
      "'single' - only one item is selected. 'multi' - multiple items are selected"
     ],
     "typeValue": {
      "raw": "'single'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "SinglePickerProps",
       "nameFull": "SinglePickerProps<TId, TItem>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "settingsKey",
     "comment": [
      "If provided, top picks will be automatically adjusted based on last user selection, and stored as user setting under provided key"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerListBaseProps",
       "nameFull": "PickerListBaseProps<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "SizeMod",
       "nameFull": "SizeMod"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "comment": [
      "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, sorting: SortingOption<any>) => any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "comment": [
      "Defines sorting to pass to the DataSource"
     ],
     "typeValue": {
      "raw": "undefined | SortingOption<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "valueType",
     "comment": [
      "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
     ],
     "typeValue": {
      "raw": "undefined | 'id'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "SinglePickerProps",
       "nameFull": "SinglePickerProps<TId, TItem>"
      }
     },
     "required": false
    }
   ]
  },
  "PickerModalProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "PickerModalProps",
    "nameFull": "PickerModalProps<TItem, TId>"
   },
   "typeValue": {
    "raw": "PickerModalOptions<TItem, TId> | PickerModalOptions<TItem, TId> | PickerModalOptions<TItem, TId> | PickerModalOptions<TItem, TId>",
    "print": [
     "type PickerModalProps<TItem, TId> = PickerBaseOptions<TItem, TId> & IHasCaption & (PickerModalScalarProps<TId, TItem> | PickerModalArrayProps<TId, TItem>) & PickerModalOptions<TItem, TId>;"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "abort",
     "typeValue": {
      "raw": "(result?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "typeValue": {
      "raw": "undefined | false | true | 'implicit' | 'explicit'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dataSource",
     "comment": [
      "Provides items to the Picker"
     ],
     "typeValue": {
      "raw": "IDataSource<TItem, TId, any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "disallowClickOutside",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerModalOptions",
       "nameFull": "PickerModalOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "emptyValue",
     "comment": [
      "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
     ],
     "typeValue": {
      "raw": "undefined | null | []"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "entityName",
     "comment": [
      "Name of the entity being selected. Affects wording like \"Please select [entity]\""
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "entityPluralName",
     "comment": [
      "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "comment": [
      "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getName",
     "comment": [
      "Gets entity display name. Default it item.name."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getRowOptions",
     "comment": [
      "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "comment": [
      "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => string[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "initialValue",
     "typeValue": {
      "raw": "TId"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerModalScalarProps",
       "nameFull": "PickerModalScalarProps<TId, TItem>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "typeValue": {
      "raw": "false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "You can return true for all, or some items to fold them."
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderFilter",
     "typeValue": {
      "raw": "undefined | (editableFilter: IEditable<any>) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerModalOptions",
       "nameFull": "PickerModalOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderFooter",
     "typeValue": {
      "raw": "undefined | (props: IModal<any>>) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerModalOptions",
       "nameFull": "PickerModalOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderNotFound",
     "comment": [
      "Overrides the default 'no records found' banner.",
      " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
     ],
     "typeValue": {
      "raw": "undefined | (props: { search: string; onClose: () => void; }) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderRow",
     "comment": [
      "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
     ],
     "typeValue": {
      "raw": "undefined | (props: DataSourceState<Record<string, any>, any>) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "typeValue": {
      "raw": "'single'"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerModalScalarProps",
       "nameFull": "PickerModalScalarProps<TId, TItem>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "comment": [
      "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
     ],
     "typeValue": {
      "raw": "undefined | (item: TItem, sorting: SortingOption<any>) => any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "comment": [
      "Defines sorting to pass to the DataSource"
     ],
     "typeValue": {
      "raw": "undefined | SortingOption<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "PickerBaseOptions",
       "nameFull": "PickerBaseOptions<TItem, TId>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "success",
     "typeValue": {
      "raw": "(result: TResult) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "valueType",
     "typeValue": {
      "raw": "'id'"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "PickerModalScalarProps",
       "nameFull": "PickerModalScalarProps<TId, TItem>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "zIndex",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IModal",
       "nameFull": "IModal<TResult>"
      }
     },
     "required": true
    }
   ]
  },
  "pickerPart": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "pickerPart",
    "nameFull": "pickerPart"
   },
   "typeValue": {
    "raw": "'from' | 'to'",
    "print": [
     "type pickerPart = 'from' | 'to';"
    ]
   }
  },
  "PickerTogglerMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "PickerTogglerMods",
    "nameFull": "PickerTogglerMods"
   },
   "typeValue": {
    "raw": "PickerTogglerMods",
    "print": [
     "interface PickerTogglerMods extends types.IHasEditMode {",
     "    size?: '24' | '30' | '36' | '42' | '48';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'inline' | 'form' | 'cell'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "IHasEditMode",
       "nameFull": "IHasEditMode"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42'"
     },
     "required": false
    }
   ]
  },
  "PresetsPanelProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "PresetsPanelProps",
    "nameFull": "PresetsPanelProps"
   },
   "typeValue": {
    "raw": "PresetsPanelProps",
    "print": [
     "interface PresetsPanelProps extends IPresetsApi, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
     "    tableState: DataTableState;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "activePresetId",
     "comment": [
      "ID of selected preset"
     ],
     "typeValue": {
      "raw": "null | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPresetsApi",
       "nameFull": "IPresetsApi<TFilter, TViewState>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "choosePreset",
     "comment": [
      "Function that selects given preset"
     ],
     "typeValue": {
      "raw": "(preset: ITablePreset<TFilter, TViewState>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPresetsApi",
       "nameFull": "IPresetsApi<TFilter, TViewState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "createNewPreset",
     "comment": [
      "Function that gives preset name and create new preset with this name and current table state"
     ],
     "typeValue": {
      "raw": "(name: string) => Promise<number>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPresetsApi",
       "nameFull": "IPresetsApi<TFilter, TViewState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "deletePreset",
     "comment": [
      "Function that deletes given preset"
     ],
     "typeValue": {
      "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPresetsApi",
       "nameFull": "IPresetsApi<TFilter, TViewState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "duplicatePreset",
     "comment": [
      "Function that gives the preset and creat their duplicate"
     ],
     "typeValue": {
      "raw": "(preset: ITablePreset<TFilter, TViewState>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPresetsApi",
       "nameFull": "IPresetsApi<TFilter, TViewState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "getPresetLink",
     "comment": [
      "Function that gives preset and return URL link on given preset"
     ],
     "typeValue": {
      "raw": "(preset: ITablePreset<TFilter, TViewState>) => string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPresetsApi",
       "nameFull": "IPresetsApi<TFilter, TViewState>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "hasPresetChanged",
     "comment": [
      "Function that gives preset and return if this preset changed or not"
     ],
     "typeValue": {
      "raw": "(preset: ITablePreset<TFilter, TViewState>) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPresetsApi",
       "nameFull": "IPresetsApi<TFilter, TViewState>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "comment": [
      "Array of presets"
     ],
     "typeValue": {
      "raw": "ITablePreset<TFilter, TViewState>[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPresetsApi",
       "nameFull": "IPresetsApi<TFilter, TViewState>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tableState",
     "typeValue": {
      "raw": "DataTableState<any, any>"
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "updatePreset",
     "comment": [
      "Function that updates given preset"
     ],
     "typeValue": {
      "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IPresetsApi",
       "nameFull": "IPresetsApi<TFilter, TViewState>"
      }
     },
     "required": true
    }
   ]
  },
  "ProgressBarMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ProgressBarMods",
    "nameFull": "ProgressBarMods"
   },
   "typeValue": {
    "raw": "ProgressBarMods",
    "print": [
     "interface ProgressBarMods {",
     "    size?: '12' | '18' | '24';",
     "    striped?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '12' | '18' | '24'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "striped",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    }
   ]
  },
  "RadioInputMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RadioInputMods",
    "nameFull": "RadioInputMods"
   },
   "typeValue": {
    "raw": "RadioInputMods",
    "print": [
     "interface RadioInputMods {",
     "    size?: '12' | '18';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '12' | '18'"
     },
     "required": false
    }
   ]
  },
  "RadioInputProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "RadioInputProps",
    "nameFull": "RadioInputProps"
   },
   "typeValue": {
    "raw": "RadioInputProps",
    "print": [
     "type RadioInputProps = RadioInputMods & UuiRadioInputProps;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "RadioInputProps",
       "nameFull": "RadioInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "RadioInputProps",
       "nameFull": "RadioInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasLabel",
       "nameFull": "IHasLabel"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderLabel",
     "typeValue": {
      "raw": "undefined | () => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "RadioInputProps",
       "nameFull": "RadioInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '12' | '18'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RadioInputMods",
       "nameFull": "RadioInputMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "RadioInputProps",
       "nameFull": "RadioInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "RangeDatePickerBodyProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RangeDatePickerBodyProps",
    "nameFull": "RangeDatePickerBodyProps<T>"
   },
   "typeValue": {
    "raw": "RangeDatePickerBodyProps<T>",
    "print": [
     "interface RangeDatePickerBodyProps<T> extends DatePickerBodyBaseOptions, IEditable<PickerBodyValue<T>> {",
     "    focusPart: InputType;",
     "    renderFooter?(): React.ReactNode;",
     "    isHoliday?: (day: Dayjs) => boolean;",
     "    renderHeader?: (props: IEditable<PickerBodyValue<string>>) => React.ReactNode;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "MethodSignature",
     "name": "changeIsOpen",
     "typeValue": {
      "raw": "undefined | (newValue: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DatePickerBodyBaseOptions",
       "nameFull": "DatePickerBodyBaseOptions"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DatePickerBodyBaseOptions",
       "nameFull": "DatePickerBodyBaseOptions"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "focusPart",
     "typeValue": {
      "raw": "'from' | 'to'"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "typeValue": {
      "raw": "undefined | RangeDatePickerPresets"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DatePickerBodyBaseOptions",
       "nameFull": "DatePickerBodyBaseOptions"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "DatePickerBodyBaseOptions",
       "nameFull": "DatePickerBodyBaseOptions"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderFooter",
     "typeValue": {
      "raw": "undefined | () => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderHeader",
     "typeValue": {
      "raw": "undefined | (props: PickerBodyValue<string>>) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "RangeDatePickerProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RangeDatePickerProps",
    "nameFull": "RangeDatePickerProps"
   },
   "typeValue": {
    "raw": "RangeDatePickerProps",
    "print": [
     "interface RangeDatePickerProps extends BaseRangeDatePickerProps, SizeMod {",
     "    getPlaceholder?(type: InputType): string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bodyCx",
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "disableClear",
     "comment": [
      "Disables clearing component (with the cross icon)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "comment": [
      "Filter selectable days. Days, for which this callback returns false - will be disabled"
     ],
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "format",
     "comment": [
      "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "getPlaceholder",
     "typeValue": {
      "raw": "undefined | (type: InputType) => string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "Styles for input and body components in RangeDatePicker"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "comment": [
      "If this function returns true, the day will be highlighted as holiday"
     ],
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<HTMLInputElement, Element>, inputType: 'from' | 'to') => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<HTMLInputElement, Element>, inputType: 'from' | 'to') => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onOpenChange",
     "comment": [
      "Called when component is opened/closed"
     ],
     "typeValue": {
      "raw": "undefined | (isOpen: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'auto' | 'top' | 'bottom' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "comment": [
      "Range presets (like 'this week', 'this month', etc.) to display at the right of the Picker's body.",
      " UUI provides defaults in the 'rangeDatePickerPresets' exported variable - you can use it as is, or build on top of it (e.g. add your presets)"
     ],
     "typeValue": {
      "raw": "undefined | RangeDatePickerPresets"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "rawProps as HTML attributes"
     ],
     "typeValue": {
      "raw": "undefined | { from?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; to?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "comment": [
      "Overrides rendering of the single day. For example, to highlight certain days"
     ],
     "typeValue": {
      "raw": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderFooter",
     "comment": [
      "Allows to add a custom footer to the Picker's dropdown body"
     ],
     "typeValue": {
      "raw": "undefined | (value: RangeDatePickerValue) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderTarget",
     "comment": [
      "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach RangeDatePicker to other components, e.g. Buttons"
     ],
     "typeValue": {
      "raw": "undefined | (props: IDropdownToggler) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "BaseRangeDatePickerProps",
       "nameFull": "BaseRangeDatePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "SizeMod",
       "nameFull": "SizeMod"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "RangeDatePickerValue": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RangeDatePickerValue",
    "nameFull": "RangeDatePickerValue"
   },
   "typeValue": {
    "raw": "RangeDatePickerValue",
    "print": [
     "interface RangeDatePickerValue {",
     "    from: string | null;",
     "    to: string | null;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "from",
     "typeValue": {
      "raw": "null | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "to",
     "typeValue": {
      "raw": "null | string"
     },
     "required": false
    }
   ]
  },
  "RichTextViewMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RichTextViewMods",
    "nameFull": "RichTextViewMods"
   },
   "typeValue": {
    "raw": "RichTextViewMods",
    "print": [
     "interface RichTextViewMods {",
     "    size?: '12' | '14' | '16';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '12' | '14' | '16'"
     },
     "required": false
    }
   ]
  },
  "RowMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RowMods",
    "nameFull": "RowMods"
   },
   "typeValue": {
    "raw": "RowMods",
    "print": [
     "interface RowMods extends RowSizeMod {",
     "    borderBottom?: boolean;",
     "    columnGap?: number | '6' | '12' | '18' | '24' | '36';",
     "    margin?: '12' | '24';",
     "    padding?: '6' | '12' | '18' | '24';",
     "    rowGap?: number | '6' | '12' | '18' | '24' | '36';",
     "    spacing?: '6' | '12' | '18';",
     "    topShadow?: boolean;",
     "    vPadding?: '12' | '18' | '24' | '36' | '48';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "borderBottom",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "typeValue": {
      "raw": "undefined | number | '6' | '12' | '18' | '36' | '24'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "margin",
     "typeValue": {
      "raw": "undefined | '12' | '24'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "typeValue": {
      "raw": "undefined | '6' | '12' | '18' | '24'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "typeValue": {
      "raw": "undefined | number | '6' | '12' | '18' | '36' | '24'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | null | '36' | '48' | '24' | '30' | '42'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowSizeMod",
       "nameFull": "RowSizeMod"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "spacing",
     "typeValue": {
      "raw": "undefined | '6' | '12' | '18'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "topShadow",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "vPadding",
     "typeValue": {
      "raw": "undefined | '12' | '18' | '36' | '48' | '24'"
     },
     "required": false
    }
   ]
  },
  "RowSize": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "RowSize",
    "nameFull": "RowSize"
   },
   "typeValue": {
    "raw": "null | '36' | '48' | '24' | '30' | '42'",
    "print": [
     "type RowSize = null | '24' | '30' | '36' | '42' | '48';"
    ]
   }
  },
  "RowSizeMod": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RowSizeMod",
    "nameFull": "RowSizeMod"
   },
   "typeValue": {
    "raw": "RowSizeMod",
    "print": [
     "interface RowSizeMod {",
     "    size?: RowSize;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | null | '36' | '48' | '24' | '30' | '42'"
     },
     "required": false
    }
   ]
  },
  "SemanticColor": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "SemanticColor",
    "nameFull": "SemanticColor"
   },
   "typeValue": {
    "raw": "'info' | 'success' | 'warning' | 'error'",
    "print": [
     "type SemanticColor = 'info' | 'success' | 'warning' | 'error';"
    ]
   }
  },
  "SizeMod": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "SizeMod",
    "nameFull": "SizeMod"
   },
   "typeValue": {
    "raw": "SizeMod",
    "print": [
     "interface SizeMod {",
     "    size?: ControlSize;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "required": false
    }
   ]
  },
  "SpinnerProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "SpinnerProps",
    "nameFull": "SpinnerProps"
   },
   "typeValue": {
    "raw": "SpinnerProps",
    "print": [
     "type SpinnerProps = UuiSpinnerProps;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    }
   ]
  },
  "SwitchMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "SwitchMods",
    "nameFull": "SwitchMods"
   },
   "typeValue": {
    "raw": "SwitchMods",
    "print": [
     "interface SwitchMods {",
     "    size?: '12' | '18' | '24';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '12' | '18' | '24'"
     },
     "required": false
    }
   ]
  },
  "TabButtonMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TabButtonMods",
    "nameFull": "TabButtonMods"
   },
   "typeValue": {
    "raw": "TabButtonMods",
    "print": [
     "interface TabButtonMods {",
     "    size?: '36' | '48' | '60';",
     "    withNotify?: boolean;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '60'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "withNotify",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    }
   ]
  },
  "TabButtonProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "TabButtonProps",
    "nameFull": "TabButtonProps"
   },
   "typeValue": {
    "raw": "TabButtonProps",
    "print": [
     "type TabButtonProps = TabButtonMods & ButtonProps;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "typeValue": {
      "raw": "undefined | null | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBasicPickerToggler",
       "nameFull": "IBasicPickerToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '60'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TabButtonMods",
       "nameFull": "TabButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "withNotify",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TabButtonMods",
       "nameFull": "TabButtonMods"
      }
     },
     "required": false
    }
   ]
  },
  "TagMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TagMods",
    "nameFull": "TagMods"
   },
   "typeValue": {
    "raw": "TagMods",
    "print": [
     "interface TagMods {",
     "    size?: TagSize;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '18' | '36' | '48' | '24' | '30' | '42'"
     },
     "required": false
    }
   ]
  },
  "TagProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "TagProps",
    "nameFull": "TagProps"
   },
   "typeValue": {
    "raw": "TagProps",
    "print": [
     "type TagProps = ButtonProps & TagMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "typeValue": {
      "raw": "undefined | null | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBasicPickerToggler",
       "nameFull": "IBasicPickerToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '18' | '36' | '48' | '24' | '30' | '42'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TagMods",
       "nameFull": "TagMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    }
   ]
  },
  "TagSize": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "TagSize",
    "nameFull": "TagSize"
   },
   "typeValue": {
    "raw": "'18' | '36' | '48' | '24' | '30' | '42'",
    "print": [
     "type TagSize = '18' | '24' | '30' | '36' | '42' | '48';"
    ]
   }
  },
  "TextAreaMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TextAreaMods",
    "nameFull": "TextAreaMods"
   },
   "typeValue": {
    "raw": "TextAreaMods",
    "print": [
     "interface TextAreaMods extends types.IHasEditMode {",
     "    size?: types.ControlSize;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'inline' | 'form' | 'cell'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "IHasEditMode",
       "nameFull": "IHasEditMode"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "required": false
    }
   ]
  },
  "TextAreaProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "TextAreaProps",
    "nameFull": "TextAreaProps"
   },
   "typeValue": {
    "raw": "TextAreaProps",
    "print": [
     "type TextAreaProps = UuiTextAreaProps & TextAreaMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "comment": [
      "Automatically sets input focus to component, when its mounted"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextAreaProps",
       "nameFull": "TextAreaProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoSize",
     "comment": [
      "Enables auto-resizing height to fit text. Rows prop is ignored in this mode"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextAreaProps",
       "nameFull": "TextAreaProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML id attribute to put on the HTML Input element"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextAreaProps",
       "nameFull": "TextAreaProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class names to put to the HTML Input element"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextAreaProps",
       "nameFull": "TextAreaProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "comment": [
      "Maximum text length, in characters"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextAreaProps",
       "nameFull": "TextAreaProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'inline' | 'form' | 'cell'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "IHasEditMode",
       "nameFull": "IHasEditMode"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "comment": [
      "onKeyDown event handler to put on HTML Input"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextAreaProps",
       "nameFull": "TextAreaProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rows",
     "comment": [
      "Adjust height to fit specified number or text rows. HTML TextArea attribute."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextAreaProps",
       "nameFull": "TextAreaProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TextAreaMods",
       "nameFull": "TextAreaMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "TextInputMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TextInputMods",
    "nameFull": "TextInputMods"
   },
   "typeValue": {
    "raw": "TextInputMods",
    "print": [
     "interface TextInputMods extends IHasEditMode {",
     "    size?: ControlSize;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'inline' | 'form' | 'cell'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "IHasEditMode",
       "nameFull": "IHasEditMode"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "required": false
    }
   ]
  },
  "TextInputProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TextInputProps",
    "nameFull": "TextInputProps"
   },
   "typeValue": {
    "raw": "TextInputProps",
    "print": [
     "interface TextInputProps extends CoreTextInputProps, TextInputMods {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "acceptIcon",
     "comment": [
      "Overrides accept (check) icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoComplete",
     "comment": [
      "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "comment": [
      "Put focus on the element, when component is mounted"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cancelIcon",
     "comment": [
      "Overrides cancel (cross) icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Overrides dropdown (chevron) icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML ID attribute for input"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class(es) to put to the HTML Input element"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputMode",
     "comment": [
      "Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
     ],
     "typeValue": {
      "raw": "undefined | 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "comment": [
      "Maximum input length in characters"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'inline' | 'form' | 'cell'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "IHasEditMode",
       "nameFull": "IHasEditMode"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "comment": [
      "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onAccept",
     "comment": [
      "Enables accept (check) icon, and fires when the icon is clicked"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onCancel",
     "comment": [
      "Enables cancel (cross) icon, and fires when the icon is clicked"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "comment": [
      "keydown event handler to put on the HTML input element"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderInput",
     "comment": [
      "overrides rendering of HTML Input element"
     ],
     "typeValue": {
      "raw": "undefined | (props: IRenderInputProps) => JSX.Element"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TextInputMods",
       "nameFull": "TextInputMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "comment": [
      "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "TextMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TextMods",
    "nameFull": "TextMods"
   },
   "typeValue": {
    "raw": "TextMods",
    "print": [
     "interface TextMods extends TextSettings {",
     "    size?: types.TextSize | '42';",
     "    font?: types.FontStyle;",
     "    color?: 'info' | 'warning' | 'error' | 'success' | 'brand' | 'primary' | 'secondary' | 'disabled' | 'contrast' | 'white';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'info' | 'success' | 'warning' | 'error' | 'primary' | 'secondary' | 'contrast' | 'brand' | 'disabled' | 'white'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "font",
     "typeValue": {
      "raw": "undefined | 'primary' | 'regular' | 'semibold' | 'italic' | 'promo'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fontSize",
     "typeValue": {
      "raw": "undefined | '12' | '18' | '24' | '14' | '16' | '10'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TextSettings",
       "nameFull": "TextSettings"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "lineHeight",
     "typeValue": {
      "raw": "undefined | '12' | '18' | '24' | '30'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TextSettings",
       "nameFull": "TextSettings"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '18' | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "required": false
    }
   ]
  },
  "TextPlaceholderProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "TextPlaceholderProps",
    "nameFull": "TextPlaceholderProps"
   },
   "typeValue": {
    "raw": "TextPlaceholderProps",
    "print": [
     "type TextPlaceholderProps = PropsWithChildren<ITextPlaceholderProps>;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "typeName": {
       "name": "PropsWithChildren",
       "nameFull": "PropsWithChildren<P>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isNotAnimated",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "ITextPlaceholderProps",
       "nameFull": "ITextPlaceholderProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "wordsCount",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "ITextPlaceholderProps",
       "nameFull": "ITextPlaceholderProps"
      }
     },
     "required": false
    }
   ]
  },
  "TextProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "TextProps",
    "nameFull": "TextProps"
   },
   "typeValue": {
    "raw": "TextProps",
    "print": [
     "type TextProps = UuiTextProps & TextMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'info' | 'success' | 'warning' | 'error' | 'primary' | 'secondary' | 'contrast' | 'brand' | 'disabled' | 'white'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TextMods",
       "nameFull": "TextMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "font",
     "typeValue": {
      "raw": "undefined | 'primary' | 'regular' | 'semibold' | 'italic' | 'promo'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TextMods",
       "nameFull": "TextMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fontSize",
     "typeValue": {
      "raw": "undefined | '12' | '18' | '24' | '14' | '16' | '10'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TextSettings",
       "nameFull": "TextSettings"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "lineHeight",
     "typeValue": {
      "raw": "undefined | '12' | '18' | '24' | '30'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TextSettings",
       "nameFull": "TextSettings"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '18' | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TextMods",
       "nameFull": "TextMods"
      }
     },
     "required": false
    }
   ]
  },
  "TextSettings": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TextSettings",
    "nameFull": "TextSettings"
   },
   "typeValue": {
    "raw": "TextSettings",
    "print": [
     "interface TextSettings {",
     "    lineHeight?: '12' | '18' | '24' | '30';",
     "    fontSize?: '10' | '12' | '14' | '16' | '18' | '24';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "fontSize",
     "typeValue": {
      "raw": "undefined | '12' | '18' | '24' | '14' | '16' | '10'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "lineHeight",
     "typeValue": {
      "raw": "undefined | '12' | '18' | '24' | '30'"
     },
     "required": false
    }
   ]
  },
  "TextSize": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "TextSize",
    "nameFull": "TextSize"
   },
   "typeValue": {
    "raw": "'18' | '36' | '48' | '24' | '30' | 'none'",
    "print": [
     "type TextSize = 'none' | '18' | '24' | '30' | '36' | '48';"
    ]
   }
  },
  "TimePickerProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TimePickerProps",
    "nameFull": "TimePickerProps"
   },
   "typeValue": {
    "raw": "TimePickerProps",
    "print": [
     "interface TimePickerProps extends BaseTimePickerProps, SizeMod, IHasEditMode {",
     "    minutesStep?: number;",
     "    format?: 12 | 24;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bodyCx",
     "comment": [
      "CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "BaseTimePickerProps",
       "nameFull": "BaseTimePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "format",
     "typeValue": {
      "raw": "undefined | 12 | 24"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "BaseTimePickerProps",
       "nameFull": "BaseTimePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "BaseTimePickerProps",
       "nameFull": "BaseTimePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "minutesStep",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'inline' | 'form' | 'cell'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "IHasEditMode",
       "nameFull": "IHasEditMode"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "typeValue": {
      "raw": "undefined | { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "BaseTimePickerProps",
       "nameFull": "BaseTimePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderTarget",
     "typeValue": {
      "raw": "undefined | (props: IDropdownToggler) => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "BaseTimePickerProps",
       "nameFull": "BaseTimePickerProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "SizeMod",
       "nameFull": "SizeMod"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "TooltipMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TooltipMods",
    "nameFull": "TooltipMods"
   },
   "typeValue": {
    "raw": "TooltipMods",
    "print": [
     "interface TooltipMods {",
     "    /** Tooltip color */",
     "    color?: 'default' | 'contrast' | 'critical';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Tooltip color"
     ],
     "typeValue": {
      "raw": "undefined | 'default' | 'contrast' | 'critical'"
     },
     "required": false
    }
   ]
  },
  "TooltipProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "TooltipProps",
    "nameFull": "TooltipProps"
   },
   "typeValue": {
    "raw": "TooltipProps",
    "print": [
     "type TooltipProps = UuiTooltipProps & TooltipMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "boundaryElement",
     "typeValue": {
      "raw": "undefined | HTMLElement | HTMLElement[] | 'clippingParents'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "comment": [
      "React Node(s) to show tooltip for"
     ],
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeBodyOnTogglerHidden",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeDelay",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnMouseLeave",
     "typeValue": {
      "raw": "undefined | false | 'toggler' | 'boundary'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Tooltip color"
     ],
     "typeValue": {
      "raw": "undefined | 'default' | 'contrast' | 'critical'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TooltipMods",
       "nameFull": "TooltipMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "content",
     "comment": [
      "Content to show in the tooltip (ReactNode)"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxWidth",
     "comment": [
      "Max width of tooltip"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "modifiers",
     "typeValue": {
      "raw": "undefined | (Modifier<any, object>>)[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "offset",
     "comment": [
      "See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/}"
     ],
     "typeValue": {
      "raw": "undefined | OffsetsFunction | [number | null | undefined, number | null | undefined]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "openDelay",
     "comment": [
      "Should we close dropdown on click on the Toggler, if it's already open? Default is true."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'auto' | 'top' | 'bottom' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "portalTarget",
     "typeValue": {
      "raw": "undefined | HTMLElement"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderContent",
     "comment": [
      "Alternative to 'content' prop, you can pass a render function.",
      " The function will only be called when content is shown, this can save performance."
     ],
     "typeValue": {
      "raw": "undefined | () => any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "UuiMultiSwitchColor": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "UuiMultiSwitchColor",
    "nameFull": "UuiMultiSwitchColor"
   },
   "typeValue": {
    "raw": "'primary' | 'secondary'",
    "print": [
     "type UuiMultiSwitchColor = 'primary' | 'secondary';"
    ]
   }
  },
  "VerticalTabButtonProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "VerticalTabButtonProps",
    "nameFull": "VerticalTabButtonProps"
   },
   "typeValue": {
    "raw": "VerticalTabButtonProps",
    "print": [
     "type VerticalTabButtonProps = ButtonProps & TabButtonMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "typeValue": {
      "raw": "undefined | null | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBasicPickerToggler",
       "nameFull": "IBasicPickerToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '60'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TabButtonMods",
       "nameFull": "TabButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "withNotify",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TabButtonMods",
       "nameFull": "TabButtonMods"
      }
     },
     "required": false
    }
   ]
  }
 },
 "@epam/promo": {
  "AlertMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "AlertMods",
    "nameFull": "AlertMods"
   },
   "typeValue": {
    "raw": "AlertMods",
    "print": [
     "interface AlertMods {",
     "    color?: EpamPrimaryColor;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'blue' | 'green' | 'amber' | 'red'"
     },
     "required": false
    }
   ]
  },
  "AlertProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "AlertProps",
    "nameFull": "AlertProps"
   },
   "typeValue": {
    "raw": "AlertProps",
    "print": [
     "interface AlertProps extends Omit<uuiAlertProps, 'color'>, AlertMods {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "actions",
     "comment": [
      "List of actions to display in the alert. Each action has name and 'action' callback"
     ],
     "typeValue": {
      "raw": "undefined | notificationAction[]"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "AlertProps",
       "nameFull": "AlertProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'blue' | 'green' | 'amber' | 'red'"
     },
     "from": {
      "module": "@epam/promo",
      "typeName": {
       "name": "AlertMods",
       "nameFull": "AlertMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "An optional icon to show on the left of the alert"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "AlertProps",
       "nameFull": "AlertProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClose",
     "comment": [
      "When specified, a close icon is rendered. onClose callback will be called on clicking the close icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "AlertProps",
       "nameFull": "AlertProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "comment": [
      "Component size. If omitted, 48 size will be used."
     ],
     "typeValue": {
      "raw": "undefined | '36' | '48'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "AlertProps",
       "nameFull": "AlertProps"
      }
     },
     "required": false
    }
   ]
  },
  "BadgeMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "BadgeMods",
    "nameFull": "BadgeMods"
   },
   "typeValue": {
    "raw": "BadgeMods",
    "print": [
     "interface BadgeMods {",
     "    color?: EpamAdditionalColor | 'gray30';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'cyan' | 'orange' | 'purple' | 'violet' | 'gray30'"
     },
     "required": false
    }
   ]
  },
  "BadgeProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "BadgeProps",
    "nameFull": "BadgeProps"
   },
   "typeValue": {
    "raw": "BadgeProps",
    "print": [
     "type BadgeProps = Omit<UuiBadgeProps, 'color'> & BadgeMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'cyan' | 'orange' | 'purple' | 'violet' | 'gray30'"
     },
     "from": {
      "module": "@epam/promo",
      "typeName": {
       "name": "BadgeMods",
       "nameFull": "BadgeMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "typeValue": {
      "raw": "undefined | null | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fill",
     "typeValue": {
      "raw": "undefined | 'solid' | 'semitransparent' | 'transparent'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "BadgeMods",
       "nameFull": "BadgeMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBasicPickerToggler",
       "nameFull": "IBasicPickerToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '18' | '24' | '30' | '42'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "BadgeMods",
       "nameFull": "BadgeMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    }
   ]
  },
  "ButtonColor": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ButtonColor",
    "nameFull": "ButtonColor"
   },
   "typeValue": {
    "raw": "'blue' | 'green' | 'red' | 'gray50' | 'gray'",
    "print": [
     "type ButtonColor = 'blue' | 'green' | 'red' | 'gray50' | 'gray';"
    ]
   }
  },
  "ButtonMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ButtonMods",
    "nameFull": "ButtonMods"
   },
   "typeValue": {
    "raw": "ButtonMods",
    "print": [
     "interface ButtonMods {",
     "    fill?: FillStyle;",
     "    color?: ButtonColor;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'blue' | 'green' | 'red' | 'gray50' | 'gray'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fill",
     "typeValue": {
      "raw": "undefined | 'solid' | 'white' | 'light' | 'none'"
     },
     "required": false
    }
   ]
  },
  "ButtonProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ButtonProps",
    "nameFull": "ButtonProps"
   },
   "typeValue": {
    "raw": "ButtonProps",
    "print": [
     "type ButtonProps = Omit<UuiButtonProps, 'color'> & ButtonMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'blue' | 'green' | 'red' | 'gray50' | 'gray'"
     },
     "from": {
      "module": "@epam/promo",
      "typeName": {
       "name": "ButtonMods",
       "nameFull": "ButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "typeValue": {
      "raw": "undefined | null | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fill",
     "typeValue": {
      "raw": "undefined | 'solid' | 'white' | 'light' | 'none'"
     },
     "from": {
      "module": "@epam/promo",
      "typeName": {
       "name": "ButtonMods",
       "nameFull": "ButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'solid' | 'none' | 'outline' | 'ghost'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "ButtonMods",
       "nameFull": "ButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBasicPickerToggler",
       "nameFull": "IBasicPickerToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '18' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "ButtonMods",
       "nameFull": "ButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    }
   ]
  },
  "ColorMod": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ColorMod",
    "nameFull": "ColorMod"
   },
   "typeValue": {
    "raw": "ColorMod",
    "print": [
     "// Mod interfaces",
     "interface ColorMod {",
     "    /** Component's base color */",
     "    color?: EpamColor;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Component's base color"
     ],
     "typeValue": {
      "raw": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'cyan' | 'orange' | 'purple' | 'violet' | 'gray30' | 'gray50' | 'white' | 'gray5' | 'gray10' | 'gray20' | 'gray40' | 'gray60' | 'gray70' | 'gray80' | 'gray90'"
     },
     "required": false
    }
   ]
  },
  "ControlShape": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ControlShape",
    "nameFull": "ControlShape"
   },
   "typeValue": {
    "raw": "'square' | 'round'",
    "print": [
     "type ControlShape = 'square' | 'round';"
    ]
   }
  },
  "ControlSize": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ControlSize",
    "nameFull": "ControlSize"
   },
   "typeValue": {
    "raw": "'36' | '48' | '24' | '30' | '42' | 'none'",
    "print": [
     "type ControlSize = 'none' | '24' | '30' | '36' | '42' | '48';"
    ]
   }
  },
  "DropdownContainerMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DropdownContainerMods",
    "nameFull": "DropdownContainerMods"
   },
   "typeValue": {
    "raw": "DropdownContainerMods",
    "print": [
     "interface DropdownContainerMods {",
     "    color?: 'white' | 'gray70';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'white' | 'gray70'"
     },
     "required": false
    }
   ]
  },
  "EpamAdditionalColor": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "EpamAdditionalColor",
    "nameFull": "EpamAdditionalColor"
   },
   "typeValue": {
    "raw": "'blue' | 'green' | 'amber' | 'red' | 'cyan' | 'orange' | 'purple' | 'violet'",
    "print": [
     "type EpamAdditionalColor = EpamPrimaryColor | 'cyan' | 'orange' | 'purple' | 'violet';"
    ]
   }
  },
  "EpamColor": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "EpamColor",
    "nameFull": "EpamColor"
   },
   "typeValue": {
    "raw": "'blue' | 'green' | 'amber' | 'red' | 'cyan' | 'orange' | 'purple' | 'violet' | 'gray30' | 'gray50' | 'white' | 'gray5' | 'gray10' | 'gray20' | 'gray40' | 'gray60' | 'gray70' | 'gray80' | 'gray90'",
    "print": [
     "type EpamColor = EpamPrimaryColor | EpamGrayscaleColor | EpamAdditionalColor;"
    ]
   }
  },
  "EpamGrayscaleColor": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "EpamGrayscaleColor",
    "nameFull": "EpamGrayscaleColor"
   },
   "typeValue": {
    "raw": "'gray30' | 'gray50' | 'white' | 'gray5' | 'gray10' | 'gray20' | 'gray40' | 'gray60' | 'gray70' | 'gray80' | 'gray90'",
    "print": [
     "type EpamGrayscaleColor = 'white' | 'gray5' | 'gray10' | 'gray20' | 'gray30' | 'gray40' | 'gray50' | 'gray60' | 'gray70' | 'gray80' | 'gray90';"
    ]
   }
  },
  "EpamPrimaryColor": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "EpamPrimaryColor",
    "nameFull": "EpamPrimaryColor"
   },
   "typeValue": {
    "raw": "'blue' | 'green' | 'amber' | 'red'",
    "print": [
     "type EpamPrimaryColor = 'blue' | 'green' | 'amber' | 'red';"
    ]
   }
  },
  "ErrorHandlerProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ErrorHandlerProps",
    "nameFull": "ErrorHandlerProps"
   },
   "typeValue": {
    "raw": "ErrorHandlerProps",
    "print": [
     "interface ErrorHandlerProps extends IHasCX, IHasChildren {",
     "    getErrorInfo?: (uuiError: UuiError | Error | ApiCallInfo, defaultErrorInfo: UuiErrorInfo) => UuiErrorInfo;",
     "    onNotificationError?: (errors: ApiCallInfo) => void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getErrorInfo",
     "typeValue": {
      "raw": "undefined | (uuiError: UuiErrorInfo"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onNotificationError",
     "typeValue": {
      "raw": "undefined | (errors: ApiCallInfo) => void"
     },
     "required": false
    }
   ]
  },
  "FillStyle": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "FillStyle",
    "nameFull": "FillStyle"
   },
   "typeValue": {
    "raw": "'solid' | 'white' | 'light' | 'none'",
    "print": [
     "type FillStyle = 'solid' | 'white' | 'light' | 'none';"
    ]
   }
  },
  "FontMod": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "FontMod",
    "nameFull": "FontMod"
   },
   "typeValue": {
    "raw": "FontMod",
    "print": [
     "interface FontMod {",
     "    /** Font to use for text */",
     "    font?: FontStyle;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "font",
     "comment": [
      "Font to use for text"
     ],
     "typeValue": {
      "raw": "undefined | 'sans' | 'sans-semibold' | 'sans-italic' | 'museo-sans' | 'museo-slab'"
     },
     "required": false
    }
   ]
  },
  "FontStyle": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "FontStyle",
    "nameFull": "FontStyle"
   },
   "typeValue": {
    "raw": "'sans' | 'sans-semibold' | 'sans-italic' | 'museo-sans' | 'museo-slab'",
    "print": [
     "type FontStyle = 'sans' | 'sans-semibold' | 'sans-italic' | 'museo-sans' | 'museo-slab';"
    ]
   }
  },
  "IconButtonMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IconButtonMods",
    "nameFull": "IconButtonMods"
   },
   "typeValue": {
    "raw": "IconButtonMods",
    "print": [
     "interface IconButtonMods {",
     "    color?: IconColor;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'gray30' | 'gray50' | 'gray60'"
     },
     "required": false
    }
   ]
  },
  "IconButtonProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "IconButtonProps",
    "nameFull": "IconButtonProps"
   },
   "typeValue": {
    "raw": "IconButtonProps",
    "print": [
     "type IconButtonProps = Omit<UuiIconButtonProps, 'color'> & IconButtonMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'gray30' | 'gray50' | 'gray60'"
     },
     "from": {
      "module": "@epam/promo",
      "typeName": {
       "name": "IconButtonMods",
       "nameFull": "IconButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    }
   ]
  },
  "IconColor": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "IconColor",
    "nameFull": "IconColor"
   },
   "typeValue": {
    "raw": "'blue' | 'green' | 'amber' | 'red' | 'gray30' | 'gray50' | 'gray60'",
    "print": [
     "type IconColor = EpamPrimaryColor | 'gray30' | 'gray50' | 'gray60';"
    ]
   }
  },
  "IconContainerColors": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "IconContainerColors",
    "nameFull": "IconContainerColors"
   },
   "typeValue": {
    "raw": "'blue' | 'green' | 'amber' | 'red' | 'cyan' | 'orange' | 'purple' | 'violet' | 'gray30' | 'gray50' | 'white' | 'gray5' | 'gray10' | 'gray20' | 'gray40' | 'gray60' | 'gray70' | 'gray80' | 'gray90'",
    "print": [
     "type IconContainerColors = 'blue' | 'green' | 'amber' | 'red' | 'cyan' | 'orange' | 'purple' | 'violet' | 'white' | 'gray5' | 'gray10' | 'gray20' | 'gray30' | 'gray40' | 'gray50' | 'gray60' | 'gray70' | 'gray80' | 'gray90';"
    ]
   }
  },
  "IconContainerMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IconContainerMods",
    "nameFull": "IconContainerMods"
   },
   "typeValue": {
    "raw": "IconContainerMods",
    "print": [
     "interface IconContainerMods {",
     "    /** IconContainer color.",
     "     *  @deprecated Property color is deprecated and will be removed in future release. Please make icon color configuration by yourself, e.g. via cx or style prop.",
     "     * */",
     "    color?: IconContainerColors;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "IconContainer color.",
      "  @deprecated Property color is deprecated and will be removed in future release. Please make icon color configuration by yourself, e.g. via cx or style prop."
     ],
     "typeValue": {
      "raw": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'cyan' | 'orange' | 'purple' | 'violet' | 'gray30' | 'gray50' | 'white' | 'gray5' | 'gray10' | 'gray20' | 'gray40' | 'gray60' | 'gray70' | 'gray80' | 'gray90'"
     },
     "required": false
    }
   ]
  },
  "IHasEditMode": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IHasEditMode",
    "nameFull": "IHasEditMode"
   },
   "typeValue": {
    "raw": "IHasEditMode",
    "print": [
     "interface IHasEditMode {",
     "    /** Defines input mode: 'form' is default and usual look, 'cell' is for using components as table cells  */",
     "    mode?: 'form' | 'cell';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "comment": [
      "Defines input mode: 'form' is default and usual look, 'cell' is for using components as table cells"
     ],
     "typeValue": {
      "raw": "undefined | 'form' | 'cell'"
     },
     "required": false
    }
   ]
  },
  "LinkButtonMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "LinkButtonMods",
    "nameFull": "LinkButtonMods"
   },
   "typeValue": {
    "raw": "LinkButtonMods",
    "print": [
     "interface LinkButtonMods {",
     "    color?: 'blue' | 'green' | 'amber' | 'red' | 'gray60' | 'gray10';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'gray10' | 'gray60'"
     },
     "required": false
    }
   ]
  },
  "LinkButtonProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "LinkButtonProps",
    "nameFull": "LinkButtonProps"
   },
   "typeValue": {
    "raw": "LinkButtonProps",
    "print": [
     "type LinkButtonProps = Omit<UuiLinkButtonProps, 'color'> & LinkButtonMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'gray10' | 'gray60'"
     },
     "from": {
      "module": "@epam/promo",
      "typeName": {
       "name": "LinkButtonMods",
       "nameFull": "LinkButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "typeValue": {
      "raw": "undefined | null | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBasicPickerToggler",
       "nameFull": "IBasicPickerToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "LinkButtonMods",
       "nameFull": "LinkButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    }
   ]
  },
  "ModalWindowMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ModalWindowMods",
    "nameFull": "ModalWindowMods"
   },
   "typeValue": {
    "raw": "ModalWindowMods",
    "print": [
     "interface ModalWindowMods {",
     "    width?: '300' | '420' | '600' | '900' | number;",
     "    height?: '300' | '700' | 'auto' | number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "height",
     "typeValue": {
      "raw": "undefined | number | '300' | '700' | 'auto'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "typeValue": {
      "raw": "undefined | number | '300' | '420' | '600' | '900'"
     },
     "required": false
    }
   ]
  },
  "MultiSwitchColor": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "MultiSwitchColor",
    "nameFull": "MultiSwitchColor"
   },
   "typeValue": {
    "raw": "'blue' | 'gray50' | 'gray'",
    "print": [
     "type MultiSwitchColor = 'blue' | 'gray50' | 'gray';"
    ]
   }
  },
  "MultiSwitchMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "MultiSwitchMods",
    "nameFull": "MultiSwitchMods"
   },
   "typeValue": {
    "raw": "MultiSwitchMods",
    "print": [
     "interface MultiSwitchMods {",
     "    color?: MultiSwitchColor;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'blue' | 'gray50' | 'gray'"
     },
     "required": false
    }
   ]
  },
  "MultiSwitchProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "MultiSwitchProps",
    "nameFull": "MultiSwitchProps<TValue>"
   },
   "typeValue": {
    "raw": "MultiSwitchProps<TValue>",
    "print": [
     "type MultiSwitchProps<TValue> = Omit<UuiMultiSwitchProps<TValue>, 'color'> & MultiSwitchMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'blue' | 'gray50' | 'gray'"
     },
     "from": {
      "module": "@epam/promo",
      "typeName": {
       "name": "MultiSwitchMods",
       "nameFull": "MultiSwitchMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "typeValue": {
      "raw": "MultiSwitchItem<TValue>[]"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "MultiSwitchProps",
       "nameFull": "MultiSwitchProps<TValue>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "SizeMod",
       "nameFull": "SizeMod"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "NotificationCardMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "NotificationCardMods",
    "nameFull": "NotificationCardMods"
   },
   "typeValue": {
    "raw": "NotificationCardMods",
    "print": [
     "interface NotificationCardMods {",
     "    color?: EpamPrimaryColor | 'gray60';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'gray60'"
     },
     "required": false
    }
   ]
  },
  "NotificationCardProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "NotificationCardProps",
    "nameFull": "NotificationCardProps"
   },
   "typeValue": {
    "raw": "NotificationCardProps",
    "print": [
     "type NotificationCardProps = Omit<uuiNotificationCardProps, 'color'> & NotificationCardMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "actions",
     "typeValue": {
      "raw": "undefined | NotificationAction[]"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "DefaultNotificationProps",
       "nameFull": "DefaultNotificationProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "clearTimer",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'gray60'"
     },
     "from": {
      "module": "@epam/promo",
      "typeName": {
       "name": "NotificationCardMods",
       "nameFull": "NotificationCardMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "NotificationCardProps",
       "nameFull": "NotificationCardProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onSuccess",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "refreshTimer",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    }
   ]
  },
  "PanelMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "PanelMods",
    "nameFull": "PanelMods"
   },
   "typeValue": {
    "raw": "PanelMods",
    "print": [
     "interface PanelMods {",
     "    shadow?: boolean;",
     "    margin?: '24';",
     "    background?: 'white' | 'gray90';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "background",
     "typeValue": {
      "raw": "undefined | 'white' | 'gray90'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "margin",
     "typeValue": {
      "raw": "undefined | '24'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "shadow",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    }
   ]
  },
  "RatingMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RatingMods",
    "nameFull": "RatingMods"
   },
   "typeValue": {
    "raw": "RatingMods",
    "print": [
     "interface RatingMods {",
     "    size?: 18 | 24 | 30;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | 18 | 24 | 30"
     },
     "required": false
    }
   ]
  },
  "RichTextViewMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RichTextViewMods",
    "nameFull": "RichTextViewMods"
   },
   "typeValue": {
    "raw": "RichTextViewMods",
    "print": [
     "interface RichTextViewMods {",
     "    size?: '12' | '14' | '16';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '12' | '14' | '16'"
     },
     "required": false
    }
   ]
  },
  "RowMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RowMods",
    "nameFull": "RowMods"
   },
   "typeValue": {
    "raw": "RowMods",
    "print": [
     "interface RowMods extends uuiRowMods, types.RowSizeMod {",
     "    background?: 'white' | 'gray5' | 'none';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "background",
     "typeValue": {
      "raw": "undefined | 'white' | 'none' | 'gray5'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "borderBottom",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "typeValue": {
      "raw": "undefined | number | '36' | '18' | '24' | '12' | '6'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "margin",
     "typeValue": {
      "raw": "undefined | '24' | '12'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "typeValue": {
      "raw": "undefined | '18' | '24' | '12' | '6'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "typeValue": {
      "raw": "undefined | number | '36' | '18' | '24' | '12' | '6'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | null | '36' | '48' | '24' | '30' | '42'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowSizeMod",
       "nameFull": "RowSizeMod"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "spacing",
     "typeValue": {
      "raw": "undefined | '18' | '12' | '6'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "topShadow",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "vPadding",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '18' | '24' | '12'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    }
   ]
  },
  "RowSize": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "RowSize",
    "nameFull": "RowSize"
   },
   "typeValue": {
    "raw": "null | '36' | '48' | '24' | '30' | '42'",
    "print": [
     "type RowSize = null | '24' | '30' | '36' | '42' | '48';"
    ]
   }
  },
  "RowSizeMod": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RowSizeMod",
    "nameFull": "RowSizeMod"
   },
   "typeValue": {
    "raw": "RowSizeMod",
    "print": [
     "interface RowSizeMod {",
     "    size?: RowSize;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | null | '36' | '48' | '24' | '30' | '42'"
     },
     "required": false
    }
   ]
  },
  "ScrollBarsMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ScrollBarsMods",
    "nameFull": "ScrollBarsMods"
   },
   "typeValue": {
    "raw": "ScrollBarsMods",
    "print": [
     "interface ScrollBarsMods {",
     "    theme?: 'light' | 'dark';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "theme",
     "typeValue": {
      "raw": "undefined | 'light' | 'dark'"
     },
     "required": false
    }
   ]
  },
  "SizeMod": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "SizeMod",
    "nameFull": "SizeMod"
   },
   "typeValue": {
    "raw": "SizeMod",
    "print": [
     "interface SizeMod {",
     "    /** Component's size in px. This is 'logical' size, defined in how many pixels components occupies vertically. */",
     "    size?: ControlSize;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "comment": [
      "Component's size in px. This is 'logical' size, defined in how many pixels components occupies vertically."
     ],
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "required": false
    }
   ]
  },
  "SliderMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "SliderMods",
    "nameFull": "SliderMods"
   },
   "typeValue": {
    "raw": "SliderMods",
    "print": [
     "interface SliderMods {",
     "}"
    ]
   }
  },
  "TextInputProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TextInputProps",
    "nameFull": "TextInputProps"
   },
   "typeValue": {
    "raw": "TextInputProps",
    "print": [
     "interface TextInputProps extends CoreTextInputProps, TextInputMods {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "acceptIcon",
     "comment": [
      "Overrides accept (check) icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoComplete",
     "comment": [
      "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "comment": [
      "Put focus on the element, when component is mounted"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cancelIcon",
     "comment": [
      "Overrides cancel (cross) icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Overrides dropdown (chevron) icon"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML ID attribute for input"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class(es) to put to the HTML Input element"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputMode",
     "comment": [
      "Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
     ],
     "typeValue": {
      "raw": "undefined | 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "comment": [
      "Maximum input length in characters"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'form' | 'cell' | 'inline'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "IHasEditMode",
       "nameFull": "IHasEditMode"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "comment": [
      "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onAccept",
     "comment": [
      "Enables accept (check) icon, and fires when the icon is clicked"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onCancel",
     "comment": [
      "Enables cancel (cross) icon, and fires when the icon is clicked"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "typeValue": {
      "raw": "undefined | (e: React.FocusEvent<T, Element>) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanFocus",
       "nameFull": "ICanFocus<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "comment": [
      "keydown event handler to put on the HTML input element"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderInput",
     "comment": [
      "overrides rendering of HTML Input element"
     ],
     "typeValue": {
      "raw": "undefined | (props: IRenderInputProps) => JSX.Element"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "TextInputProps",
       "nameFull": "TextInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TextInputMods",
       "nameFull": "TextInputMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "comment": [
      "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TextInputCoreProps",
       "nameFull": "TextInputCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "TextMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TextMods",
    "nameFull": "TextMods"
   },
   "typeValue": {
    "raw": "TextMods",
    "print": [
     "interface TextMods {",
     "    color?: 'blue' | 'green' | 'amber' | 'red' | 'white' | 'gray5' | 'gray50' | 'gray60' | 'gray80' | 'gray90';",
     "    font?: types.FontStyle;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'gray50' | 'white' | 'gray5' | 'gray60' | 'gray80' | 'gray90'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "font",
     "typeValue": {
      "raw": "undefined | 'sans' | 'sans-semibold' | 'sans-italic' | 'museo-sans' | 'museo-slab'"
     },
     "required": false
    }
   ]
  },
  "TextProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "TextProps",
    "nameFull": "TextProps"
   },
   "typeValue": {
    "raw": "TextProps",
    "print": [
     "type TextProps = Omit<UuiTextProps, 'color' | 'font'> & TextMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'gray50' | 'white' | 'gray5' | 'gray60' | 'gray80' | 'gray90'"
     },
     "from": {
      "module": "@epam/promo",
      "typeName": {
       "name": "TextMods",
       "nameFull": "TextMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "font",
     "typeValue": {
      "raw": "undefined | 'sans' | 'sans-semibold' | 'sans-italic' | 'museo-sans' | 'museo-slab'"
     },
     "from": {
      "module": "@epam/promo",
      "typeName": {
       "name": "TextMods",
       "nameFull": "TextMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fontSize",
     "typeValue": {
      "raw": "undefined | '18' | '24' | '12' | '14' | '16' | '10'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TextSettings",
       "nameFull": "TextSettings"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "lineHeight",
     "typeValue": {
      "raw": "undefined | '18' | '24' | '30' | '12'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TextSettings",
       "nameFull": "TextSettings"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '18' | '24' | '30' | '42' | 'none'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TextMods",
       "nameFull": "TextMods"
      }
     },
     "required": false
    }
   ]
  },
  "TextSize": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "TextSize",
    "nameFull": "TextSize"
   },
   "typeValue": {
    "raw": "'36' | '48' | '18' | '24' | '30' | 'none'",
    "print": [
     "type TextSize = 'none' | '18' | '24' | '30' | '36' | '48';"
    ]
   }
  },
  "TooltipMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TooltipMods",
    "nameFull": "TooltipMods"
   },
   "typeValue": {
    "raw": "TooltipMods",
    "print": [
     "interface TooltipMods {",
     "    /** Tooltip color.",
     "     *  'gray90' is deprecated and will be removed in future release, use 'gray' instead.",
     "     * */",
     "    color?: 'white' | 'gray90' | 'gray' | 'red';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Tooltip color.",
      "  'gray90' is deprecated and will be removed in future release, use 'gray' instead."
     ],
     "typeValue": {
      "raw": "undefined | 'red' | 'gray' | 'white' | 'gray90'"
     },
     "required": false
    }
   ]
  },
  "TooltipProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "TooltipProps",
    "nameFull": "TooltipProps"
   },
   "typeValue": {
    "raw": "TooltipProps",
    "print": [
     "type TooltipProps = Omit<UuiTooltipProps, 'color'> & TooltipMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "boundaryElement",
     "typeValue": {
      "raw": "undefined | HTMLElement | HTMLElement[] | 'clippingParents'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "comment": [
      "React Node(s) to show tooltip for"
     ],
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeBodyOnTogglerHidden",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeDelay",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnMouseLeave",
     "typeValue": {
      "raw": "undefined | false | 'toggler' | 'boundary'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Tooltip color.",
      "  'gray90' is deprecated and will be removed in future release, use 'gray' instead."
     ],
     "typeValue": {
      "raw": "undefined | 'red' | 'gray' | 'white' | 'gray90'"
     },
     "from": {
      "module": "@epam/promo",
      "typeName": {
       "name": "TooltipMods",
       "nameFull": "TooltipMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "content",
     "comment": [
      "Content to show in the tooltip (ReactNode)"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxWidth",
     "comment": [
      "Max width of tooltip"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "modifiers",
     "typeValue": {
      "raw": "undefined | (Modifier<any, object>>)[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "offset",
     "comment": [
      "See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/}"
     ],
     "typeValue": {
      "raw": "undefined | OffsetsFunction | [number | null | undefined, number | null | undefined]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "openDelay",
     "comment": [
      "Should we close dropdown on click on the Toggler, if it's already open? Default is true."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "portalTarget",
     "typeValue": {
      "raw": "undefined | HTMLElement"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderContent",
     "comment": [
      "Alternative to 'content' prop, you can pass a render function.",
      " The function will only be called when content is shown, this can save performance."
     ],
     "typeValue": {
      "raw": "undefined | () => any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "VirtualListMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "VirtualListMods",
    "nameFull": "VirtualListMods"
   },
   "typeValue": {
    "raw": "VirtualListMods",
    "print": [
     "interface VirtualListMods {",
     "}"
    ]
   }
  }
 },
 "@epam/loveship": {
  "AlertMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "AlertMods",
    "nameFull": "AlertMods"
   },
   "typeValue": {
    "raw": "AlertMods",
    "print": [
     "interface AlertMods {",
     "    color?: EpamPrimaryColor;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'sky' | 'grass' | 'sun' | 'fire'"
     },
     "required": false
    }
   ]
  },
  "AlertProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "AlertProps",
    "nameFull": "AlertProps"
   },
   "typeValue": {
    "raw": "AlertProps",
    "print": [
     "interface AlertProps extends Omit<uuiAlertProps, 'color'>, AlertMods {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "actions",
     "comment": [
      "List of actions to display in the alert. Each action has name and 'action' callback"
     ],
     "typeValue": {
      "raw": "undefined | notificationAction[]"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "AlertProps",
       "nameFull": "AlertProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'sky' | 'grass' | 'sun' | 'fire'"
     },
     "from": {
      "module": "@epam/loveship",
      "typeName": {
       "name": "AlertMods",
       "nameFull": "AlertMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "An optional icon to show on the left of the alert"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "AlertProps",
       "nameFull": "AlertProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClose",
     "comment": [
      "When specified, a close icon is rendered. onClose callback will be called on clicking the close icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "AlertProps",
       "nameFull": "AlertProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "comment": [
      "Component size. If omitted, 48 size will be used."
     ],
     "typeValue": {
      "raw": "undefined | '36' | '48'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "AlertProps",
       "nameFull": "AlertProps"
      }
     },
     "required": false
    }
   ]
  },
  "BadgeMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "BadgeMods",
    "nameFull": "BadgeMods"
   },
   "typeValue": {
    "raw": "BadgeMods",
    "print": [
     "interface BadgeMods {",
     "    color?: EpamPrimaryColor | EpamAdditionalColor | 'white' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600';",
     "    shape?: types.ControlShape;",
     "    fill?: UuiBadgeMods['fill'] | 'white' | 'light' | 'none';",
     "    size?: UuiBadgeMods['size'] | '12';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'lavanda' | 'fuchsia' | 'white' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fill",
     "typeValue": {
      "raw": "undefined | 'white' | 'solid' | 'semitransparent' | 'transparent' | 'light' | 'none'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "shape",
     "typeValue": {
      "raw": "undefined | 'square' | 'round'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '18' | '24' | '30' | '42' | '12'"
     },
     "required": false
    }
   ]
  },
  "BadgeProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "BadgeProps",
    "nameFull": "BadgeProps"
   },
   "typeValue": {
    "raw": "BadgeProps",
    "print": [
     "type BadgeProps = Omit<UuiBadgeProps, 'color' | 'fill' | 'size'> & BadgeMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'lavanda' | 'fuchsia' | 'white' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600'"
     },
     "from": {
      "module": "@epam/loveship",
      "typeName": {
       "name": "BadgeMods",
       "nameFull": "BadgeMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "typeValue": {
      "raw": "undefined | null | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fill",
     "typeValue": {
      "raw": "undefined | 'white' | 'solid' | 'semitransparent' | 'transparent' | 'light' | 'none'"
     },
     "from": {
      "module": "@epam/loveship",
      "typeName": {
       "name": "BadgeMods",
       "nameFull": "BadgeMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBasicPickerToggler",
       "nameFull": "IBasicPickerToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "shape",
     "typeValue": {
      "raw": "undefined | 'square' | 'round'"
     },
     "from": {
      "module": "@epam/loveship",
      "typeName": {
       "name": "BadgeMods",
       "nameFull": "BadgeMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '18' | '24' | '30' | '42' | '12'"
     },
     "from": {
      "module": "@epam/loveship",
      "typeName": {
       "name": "BadgeMods",
       "nameFull": "BadgeMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    }
   ]
  },
  "ButtonColorType": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ButtonColorType",
    "nameFull": "ButtonColorType"
   },
   "typeValue": {
    "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night500' | 'night600' | 'gray'",
    "print": [
     "type ButtonColorType = EpamPrimaryColor | 'white' | 'night500' | 'night600' | 'gray';"
    ]
   }
  },
  "ButtonMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ButtonMods",
    "nameFull": "ButtonMods"
   },
   "typeValue": {
    "raw": "ButtonMods",
    "print": [
     "interface ButtonMods {",
     "    color?: ButtonColorType;",
     "    size?: ControlSize | '42' | '18';",
     "    shape?: ControlShape;",
     "    fill?: FillStyle;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night500' | 'night600' | 'gray'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fill",
     "typeValue": {
      "raw": "undefined | 'white' | 'solid' | 'light' | 'none'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "shape",
     "typeValue": {
      "raw": "undefined | 'square' | 'round'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | 'none' | '18' | '24' | '30' | '42'"
     },
     "required": false
    }
   ]
  },
  "ButtonProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ButtonProps",
    "nameFull": "ButtonProps"
   },
   "typeValue": {
    "raw": "ButtonProps",
    "print": [
     "type ButtonProps = Omit<UuiButtonProps, 'color'> & ButtonMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night500' | 'night600' | 'gray'"
     },
     "from": {
      "module": "@epam/loveship",
      "typeName": {
       "name": "ButtonMods",
       "nameFull": "ButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "typeValue": {
      "raw": "undefined | null | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fill",
     "typeValue": {
      "raw": "undefined | 'white' | 'solid' | 'light' | 'none'"
     },
     "from": {
      "module": "@epam/loveship",
      "typeName": {
       "name": "ButtonMods",
       "nameFull": "ButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'solid' | 'none' | 'outline' | 'ghost'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "ButtonMods",
       "nameFull": "ButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBasicPickerToggler",
       "nameFull": "IBasicPickerToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "shape",
     "typeValue": {
      "raw": "undefined | 'square' | 'round'"
     },
     "from": {
      "module": "@epam/loveship",
      "typeName": {
       "name": "ButtonMods",
       "nameFull": "ButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | 'none' | '18' | '24' | '30' | '42'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "ButtonMods",
       "nameFull": "ButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    }
   ]
  },
  "CheckboxMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "CheckboxMods",
    "nameFull": "CheckboxMods"
   },
   "typeValue": {
    "raw": "CheckboxMods",
    "print": [
     "interface CheckboxMods extends UuiCheckboxMods {",
     "    theme?: 'light' | 'dark';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'form' | 'cell'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "CheckboxMods",
       "nameFull": "CheckboxMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '18' | '12'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "CheckboxMods",
       "nameFull": "CheckboxMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "theme",
     "typeValue": {
      "raw": "undefined | 'light' | 'dark'"
     },
     "required": false
    }
   ]
  },
  "ColorMod": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ColorMod",
    "nameFull": "ColorMod"
   },
   "typeValue": {
    "raw": "ColorMod",
    "print": [
     "// Mod interfaces",
     "interface ColorMod {",
     "    /** Component color */",
     "    color?: EpamColor;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Component color"
     ],
     "typeValue": {
      "raw": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'lavanda' | 'fuchsia' | 'white' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600' | 'night50' | 'night100' | 'night700' | 'night800' | 'night900'"
     },
     "required": false
    }
   ]
  },
  "ControlShape": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ControlShape",
    "nameFull": "ControlShape"
   },
   "typeValue": {
    "raw": "'square' | 'round'",
    "print": [
     "type ControlShape = 'square' | 'round';"
    ]
   }
  },
  "ControlSize": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "ControlSize",
    "nameFull": "ControlSize"
   },
   "typeValue": {
    "raw": "'36' | '48' | 'none' | '24' | '30' | '42'",
    "print": [
     "type ControlSize = 'none' | '24' | '30' | '36' | '42' | '48';"
    ]
   }
  },
  "DropdownContainerMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "DropdownContainerMods",
    "nameFull": "DropdownContainerMods"
   },
   "typeValue": {
    "raw": "DropdownContainerMods",
    "print": [
     "interface DropdownContainerMods {",
     "    color?: 'white' | 'night700';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'white' | 'night700'"
     },
     "required": false
    }
   ]
  },
  "EditMode": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "EditMode",
    "nameFull": "EditMode"
   },
   "typeValue": {
    "raw": "EditMode",
    "print": [
     "interface EditMode {",
     "    // mode?: 'form' | 'inline' | 'cell' | 'none';",
     "    mode?: 'form' | 'cell';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'form' | 'cell'"
     },
     "required": false
    }
   ]
  },
  "EpamAdditionalColor": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "EpamAdditionalColor",
    "nameFull": "EpamAdditionalColor"
   },
   "typeValue": {
    "raw": "'cobalt' | 'lavanda' | 'fuchsia'",
    "print": [
     "type EpamAdditionalColor = 'cobalt' | 'lavanda' | 'fuchsia';"
    ]
   }
  },
  "EpamColor": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "EpamColor",
    "nameFull": "EpamColor"
   },
   "typeValue": {
    "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'lavanda' | 'fuchsia' | 'white' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600' | 'night50' | 'night100' | 'night700' | 'night800' | 'night900'",
    "print": [
     "type EpamColor = EpamPrimaryColor | EpamAdditionalColor | EpamGrayscaleColor;"
    ]
   }
  },
  "EpamGrayscaleColor": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "EpamGrayscaleColor",
    "nameFull": "EpamGrayscaleColor"
   },
   "typeValue": {
    "raw": "'white' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600' | 'night50' | 'night100' | 'night700' | 'night800' | 'night900'",
    "print": [
     "type EpamGrayscaleColor = 'white' | 'night50' | 'night100' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600' | 'night700' | 'night800' | 'night900';"
    ]
   }
  },
  "EpamPrimaryColor": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "EpamPrimaryColor",
    "nameFull": "EpamPrimaryColor"
   },
   "typeValue": {
    "raw": "'sky' | 'grass' | 'sun' | 'fire'",
    "print": [
     "type EpamPrimaryColor = 'sky' | 'grass' | 'sun' | 'fire';"
    ]
   }
  },
  "ErrorConfig": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ErrorConfig",
    "nameFull": "ErrorConfig"
   },
   "typeValue": {
    "raw": "ErrorConfig",
    "print": [
     "interface ErrorConfig {",
     "    getInfo?: (error: any, defaultErrorInfo: UuiErrorInfo) => UuiErrorInfo;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "getInfo",
     "typeValue": {
      "raw": "undefined | (error: any, defaultErrorInfo: UuiErrorInfo"
     },
     "required": false
    }
   ]
  },
  "ErrorPageProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ErrorPageProps",
    "nameFull": "ErrorPageProps"
   },
   "typeValue": {
    "raw": "ErrorPageProps",
    "print": [
     "interface ErrorPageProps extends IHasCX, IHasChildren {",
     "    errorPageConfig?: ErrorConfig;",
     "    theme?: Theme;",
     "    onNotificationError?: (errors: ApiCallInfo) => void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "errorPageConfig",
     "typeValue": {
      "raw": "undefined | ErrorConfig"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onNotificationError",
     "typeValue": {
      "raw": "undefined | (errors: ApiCallInfo) => void"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "theme",
     "typeValue": {
      "raw": "undefined | 'light' | 'dark'"
     },
     "required": false
    }
   ]
  },
  "FillStyle": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "FillStyle",
    "nameFull": "FillStyle"
   },
   "typeValue": {
    "raw": "'white' | 'solid' | 'light' | 'none'",
    "print": [
     "type FillStyle = 'solid' | 'white' | 'light' | 'none';"
    ]
   }
  },
  "FontMod": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "FontMod",
    "nameFull": "FontMod"
   },
   "typeValue": {
    "raw": "FontMod",
    "print": [
     "interface FontMod {",
     "    font?: FontStyle;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "font",
     "typeValue": {
      "raw": "undefined | 'sans' | 'sans-semibold' | 'sans-light'"
     },
     "required": false
    }
   ]
  },
  "FontStyle": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "FontStyle",
    "nameFull": "FontStyle"
   },
   "typeValue": {
    "raw": "'sans' | 'sans-semibold' | 'sans-light'",
    "print": [
     "type FontStyle = 'sans' | 'sans-semibold' | 'sans-light';"
    ]
   }
  },
  "IconButtonMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IconButtonMods",
    "nameFull": "IconButtonMods"
   },
   "typeValue": {
    "raw": "IconButtonMods",
    "print": [
     "interface IconButtonMods {",
     "    color?: EpamPrimaryColor | EpamAdditionalColor | 'white' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'lavanda' | 'fuchsia' | 'white' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600'"
     },
     "required": false
    }
   ]
  },
  "IconButtonProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "IconButtonProps",
    "nameFull": "IconButtonProps"
   },
   "typeValue": {
    "raw": "IconButtonProps",
    "print": [
     "type IconButtonProps = Omit<UuiIconButtonProps, 'color'> & IconButtonMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'lavanda' | 'fuchsia' | 'white' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600'"
     },
     "from": {
      "module": "@epam/loveship",
      "typeName": {
       "name": "IconButtonMods",
       "nameFull": "IconButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    }
   ]
  },
  "IconContainerMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IconContainerMods",
    "nameFull": "IconContainerMods"
   },
   "typeValue": {
    "raw": "IconContainerMods",
    "print": [
     "interface IconContainerMods {",
     "    /** IconContainer color.",
     "     *  @deprecated Property color is deprecated and will be removed in future release. Please make icon color configuration by yourself, e.g. via cx or style prop.",
     "     * */",
     "    color?: 'sky' | 'grass' | 'sun' | 'fire' | 'carbon' | 'cobalt' | 'lavanda' | 'fuchsia' | 'white' | 'night50' | 'night100' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600' | 'night700' | 'night800' | 'night900';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "IconContainer color.",
      "  @deprecated Property color is deprecated and will be removed in future release. Please make icon color configuration by yourself, e.g. via cx or style prop."
     ],
     "typeValue": {
      "raw": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'lavanda' | 'fuchsia' | 'white' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600' | 'night50' | 'night100' | 'night700' | 'night800' | 'night900' | 'carbon'"
     },
     "required": false
    }
   ]
  },
  "LinkButtonMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "LinkButtonMods",
    "nameFull": "LinkButtonMods"
   },
   "typeValue": {
    "raw": "LinkButtonMods",
    "print": [
     "interface LinkButtonMods {",
     "    color?: 'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'lavanda' | 'fuchsia' | 'white' | 'night50' | 'night100' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600' | 'night700' | 'night800' | 'night900';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'lavanda' | 'fuchsia' | 'white' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600' | 'night50' | 'night100' | 'night700' | 'night800' | 'night900'"
     },
     "required": false
    }
   ]
  },
  "LinkButtonProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "LinkButtonProps",
    "nameFull": "LinkButtonProps"
   },
   "typeValue": {
    "raw": "LinkButtonProps",
    "print": [
     "type LinkButtonProps = Omit<UuiLinkButtonProps, 'color'> & LinkButtonMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'lavanda' | 'fuchsia' | 'white' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600' | 'night50' | 'night100' | 'night700' | 'night800' | 'night900'"
     },
     "from": {
      "module": "@epam/loveship",
      "typeName": {
       "name": "LinkButtonMods",
       "nameFull": "LinkButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "typeValue": {
      "raw": "undefined | null | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBasicPickerToggler",
       "nameFull": "IBasicPickerToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | 'none' | '24' | '30' | '42'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "LinkButtonMods",
       "nameFull": "LinkButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    }
   ]
  },
  "MakeMeItemProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "MakeMeItemProps",
    "nameFull": "MakeMeItemProps"
   },
   "typeValue": {
    "raw": "MakeMeItemProps",
    "print": [
     "interface MakeMeItemProps {",
     "    api: LazyDataSourceApi<MakeMeUser, number | string, any>;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "api",
     "typeValue": {
      "raw": "MakeMeUser, string | number, any>"
     },
     "required": true
    }
   ]
  },
  "MakeMeUser": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "MakeMeUser",
    "nameFull": "MakeMeUser"
   },
   "typeValue": {
    "raw": "MakeMeUser",
    "print": [
     "interface MakeMeUser {",
     "    externalId: number | string;",
     "    name: string;",
     "    avatarUrl: string;",
     "    jobTitle?: string;",
     "    email?: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "avatarUrl",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "email",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "externalId",
     "typeValue": {
      "raw": "string | number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "jobTitle",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    }
   ]
  },
  "ModalWindowMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ModalWindowMods",
    "nameFull": "ModalWindowMods"
   },
   "typeValue": {
    "raw": "ModalWindowMods",
    "print": [
     "interface ModalWindowMods {",
     "    width?: '300' | '420' | '480' | '600' | '900' | number;",
     "    height?: '300' | '700' | 'auto' | number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "height",
     "typeValue": {
      "raw": "undefined | number | '300' | '700' | 'auto'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "typeValue": {
      "raw": "undefined | number | '300' | '420' | '480' | '600' | '900'"
     },
     "required": false
    }
   ]
  },
  "MultiSwitchColor": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "MultiSwitchColor",
    "nameFull": "MultiSwitchColor"
   },
   "typeValue": {
    "raw": "'sky' | 'night600' | 'gray'",
    "print": [
     "type MultiSwitchColor = 'sky' | 'night600' | 'gray';"
    ]
   }
  },
  "MultiSwitchMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "MultiSwitchMods",
    "nameFull": "MultiSwitchMods"
   },
   "typeValue": {
    "raw": "MultiSwitchMods",
    "print": [
     "interface MultiSwitchMods {",
     "    color?: MultiSwitchColor;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'sky' | 'night600' | 'gray'"
     },
     "required": false
    }
   ]
  },
  "MultiSwitchProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "MultiSwitchProps",
    "nameFull": "MultiSwitchProps<TValue>"
   },
   "typeValue": {
    "raw": "MultiSwitchProps<TValue>",
    "print": [
     "type MultiSwitchProps<TValue> = Omit<UuiMultiSwitchProps<TValue>, 'color'> & MultiSwitchMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'sky' | 'night600' | 'gray'"
     },
     "from": {
      "module": "@epam/loveship",
      "typeName": {
       "name": "MultiSwitchMods",
       "nameFull": "MultiSwitchMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "typeValue": {
      "raw": "MultiSwitchItem<TValue>[]"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "MultiSwitchProps",
       "nameFull": "MultiSwitchProps<TValue>"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | 'none' | '24' | '30' | '42'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "SizeMod",
       "nameFull": "SizeMod"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "NotificationCardMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "NotificationCardMods",
    "nameFull": "NotificationCardMods"
   },
   "typeValue": {
    "raw": "NotificationCardMods",
    "print": [
     "interface NotificationCardMods {",
     "    color: EpamPrimaryColor | 'night600';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'night600'"
     },
     "required": true
    }
   ]
  },
  "NotificationCardProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "NotificationCardProps",
    "nameFull": "NotificationCardProps"
   },
   "typeValue": {
    "raw": "NotificationCardProps",
    "print": [
     "type NotificationCardProps = Omit<uuiNotificationCardProps, 'color'> & NotificationCardMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "actions",
     "typeValue": {
      "raw": "undefined | NotificationAction[]"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "DefaultNotificationProps",
       "nameFull": "DefaultNotificationProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "clearTimer",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'night600'"
     },
     "from": {
      "module": "@epam/loveship",
      "typeName": {
       "name": "NotificationCardMods",
       "nameFull": "NotificationCardMods"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "NotificationCardProps",
       "nameFull": "NotificationCardProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onSuccess",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "refreshTimer",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    }
   ]
  },
  "PanelMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "PanelMods",
    "nameFull": "PanelMods"
   },
   "typeValue": {
    "raw": "PanelMods",
    "print": [
     "interface PanelMods {",
     "    shadow?: boolean;",
     "    margin?: '24';",
     "    background?: 'white' | 'night50';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "background",
     "typeValue": {
      "raw": "undefined | 'white' | 'night50'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "margin",
     "typeValue": {
      "raw": "undefined | '24'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "shadow",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    }
   ]
  },
  "RadioInputMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RadioInputMods",
    "nameFull": "RadioInputMods"
   },
   "typeValue": {
    "raw": "RadioInputMods",
    "print": [
     "interface RadioInputMods extends UuiRadioInputMods {",
     "    theme?: 'light' | 'dark';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '18' | '12'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RadioInputMods",
       "nameFull": "RadioInputMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "theme",
     "typeValue": {
      "raw": "undefined | 'light' | 'dark'"
     },
     "required": false
    }
   ]
  },
  "RadioInputProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RadioInputProps",
    "nameFull": "RadioInputProps"
   },
   "typeValue": {
    "raw": "RadioInputProps",
    "print": [
     "interface RadioInputProps extends RadioInputMods, UuiRadioInputProps {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableOnChange",
       "nameFull": "IAnalyticableOnChange<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "RadioInputProps",
       "nameFull": "RadioInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "RadioInputProps",
       "nameFull": "RadioInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasLabel",
       "nameFull": "IHasLabel"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderLabel",
     "typeValue": {
      "raw": "undefined | () => React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "RadioInputProps",
       "nameFull": "RadioInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '18' | '12'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RadioInputMods",
       "nameFull": "RadioInputMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "RadioInputProps",
       "nameFull": "RadioInputProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "theme",
     "typeValue": {
      "raw": "undefined | 'light' | 'dark'"
     },
     "from": {
      "module": "@epam/loveship",
      "typeName": {
       "name": "RadioInputMods",
       "nameFull": "RadioInputMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "RangeSliderMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RangeSliderMods",
    "nameFull": "RangeSliderMods"
   },
   "typeValue": {
    "raw": "RangeSliderMods",
    "print": [
     "interface RangeSliderMods extends types.ColorMod {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Component color"
     ],
     "typeValue": {
      "raw": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'cobalt' | 'lavanda' | 'fuchsia' | 'white' | 'night200' | 'night300' | 'night400' | 'night500' | 'night600' | 'night50' | 'night100' | 'night700' | 'night800' | 'night900'"
     },
     "from": {
      "module": "@epam/loveship",
      "typeName": {
       "name": "ColorMod",
       "nameFull": "ColorMod"
      }
     },
     "required": false
    }
   ]
  },
  "RatingMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RatingMods",
    "nameFull": "RatingMods"
   },
   "typeValue": {
    "raw": "RatingMods",
    "print": [
     "interface RatingMods {",
     "    size?: 18 | 24 | 30;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | 18 | 24 | 30"
     },
     "required": false
    }
   ]
  },
  "RichTextViewMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RichTextViewMods",
    "nameFull": "RichTextViewMods"
   },
   "typeValue": {
    "raw": "RichTextViewMods",
    "print": [
     "interface RichTextViewMods {",
     "    size?: '12' | '14' | '16';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '12' | '14' | '16'"
     },
     "required": false
    }
   ]
  },
  "RowMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RowMods",
    "nameFull": "RowMods"
   },
   "typeValue": {
    "raw": "RowMods",
    "print": [
     "interface RowMods extends Omit<uuiRowMods, 'spacing'>, types.RowSizeMod {",
     "    background?: 'white' | 'night50' | 'night100' | 'none';",
     "    spacing?: '6' | '12' | '18' | null;",
     "    type?: 'form' | 'panel';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "background",
     "typeValue": {
      "raw": "undefined | 'white' | 'none' | 'night50' | 'night100'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "borderBottom",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "typeValue": {
      "raw": "undefined | number | '36' | '18' | '24' | '12' | '6'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "margin",
     "typeValue": {
      "raw": "undefined | '24' | '12'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "typeValue": {
      "raw": "undefined | '18' | '24' | '12' | '6'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "typeValue": {
      "raw": "undefined | number | '36' | '18' | '24' | '12' | '6'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | null | '36' | '48' | '24' | '30' | '42'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowSizeMod",
       "nameFull": "RowSizeMod"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "spacing",
     "typeValue": {
      "raw": "undefined | null | '18' | '12' | '6'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "topShadow",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "typeValue": {
      "raw": "undefined | 'form' | 'panel'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "vPadding",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '18' | '24' | '12'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "RowMods",
       "nameFull": "RowMods"
      }
     },
     "required": false
    }
   ]
  },
  "RowSize": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "RowSize",
    "nameFull": "RowSize"
   },
   "typeValue": {
    "raw": "'36' | '48' | '24' | '30' | '42'",
    "print": [
     "type RowSize = '24' | '30' | '36' | '42' | '48';"
    ]
   }
  },
  "RowSizeMod": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "RowSizeMod",
    "nameFull": "RowSizeMod"
   },
   "typeValue": {
    "raw": "RowSizeMod",
    "print": [
     "interface RowSizeMod {",
     "    size?: RowSize;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '24' | '30' | '42'"
     },
     "required": false
    }
   ]
  },
  "ScrollBarsMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "ScrollBarsMods",
    "nameFull": "ScrollBarsMods"
   },
   "typeValue": {
    "raw": "ScrollBarsMods",
    "print": [
     "interface ScrollBarsMods {",
     "    theme?: 'light' | 'dark';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "theme",
     "typeValue": {
      "raw": "undefined | 'light' | 'dark'"
     },
     "required": false
    }
   ]
  },
  "SizeMod": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "SizeMod",
    "nameFull": "SizeMod"
   },
   "typeValue": {
    "raw": "SizeMod",
    "print": [
     "interface SizeMod {",
     "    size?: ControlSize;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | 'none' | '24' | '30' | '42'"
     },
     "required": false
    }
   ]
  },
  "SliderRatingProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "SliderRatingProps",
    "nameFull": "SliderRatingProps<TValue>"
   },
   "typeValue": {
    "raw": "SliderRatingProps<TValue>",
    "print": [
     "interface SliderRatingProps<TValue> extends IEditable<TValue>, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
     "    renderTooltip?: (value: TValue) => React.ReactNode;",
     "    from?: 1 | 2;",
     "    withoutNa?: boolean;",
     "    size?: '18' | '24';",
     "    getScaleIcon?: (value: number) => Icon;",
     "    getHandlerIcon?: (value: number) => Icon;",
     "    tooltipColor?: 'white' | 'fire' | 'gray';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "from",
     "typeValue": {
      "raw": "undefined | 1 | 2"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getHandlerIcon",
     "typeValue": {
      "raw": "undefined | (value: number) => Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "getScaleIcon",
     "typeValue": {
      "raw": "undefined | (value: number) => Icon"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderTooltip",
     "typeValue": {
      "raw": "undefined | (value: TValue) => React.ReactNode"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '18' | '24'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tooltipColor",
     "typeValue": {
      "raw": "undefined | 'fire' | 'white' | 'gray'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "withoutNa",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    }
   ]
  },
  "SnackbarCardProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "SnackbarCardProps",
    "nameFull": "SnackbarCardProps"
   },
   "typeValue": {
    "raw": "SnackbarCardProps",
    "print": [
     "interface SnackbarCardProps extends INotification, IHasChildren, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
     "    snackType: 'success' | 'warning' | 'info' | 'danger';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "clearTimer",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "typeValue": {
      "raw": "number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onSuccess",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "refreshTimer",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "INotification",
       "nameFull": "INotification"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "snackType",
     "typeValue": {
      "raw": "'success' | 'warning' | 'info' | 'danger'"
     },
     "required": true
    }
   ]
  },
  "TabButtonMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TabButtonMods",
    "nameFull": "TabButtonMods"
   },
   "typeValue": {
    "raw": "TabButtonMods",
    "print": [
     "interface TabButtonMods extends UuiTabButtonProps {",
     "    theme?: 'light' | 'dark';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCaption",
       "nameFull": "IHasCaption"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-components",
      "typeName": {
       "name": "ButtonProps",
       "nameFull": "ButtonProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "typeValue": {
      "raw": "undefined | null | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ButtonCoreProps",
       "nameFull": "ButtonCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "typeValue": {
      "raw": "undefined | Icon"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "typeValue": {
      "raw": "undefined | 'left' | 'right'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "typeValue": {
      "raw": "undefined | (event: Event) => boolean"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "typeValue": {
      "raw": "undefined | Link"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IBasicPickerToggler",
       "nameFull": "IBasicPickerToggler"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasIcon",
       "nameFull": "IHasIcon"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasPlaceholder",
       "nameFull": "IHasPlaceholder"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: any) => void | React.RefObject<any>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '60'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TabButtonMods",
       "nameFull": "TabButtonMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasTabIndex",
       "nameFull": "IHasTabIndex"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "typeValue": {
      "raw": "undefined | '_blank'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanRedirect",
       "nameFull": "ICanRedirect"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "theme",
     "typeValue": {
      "raw": "undefined | 'light' | 'dark'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "typeValue": {
      "raw": "undefined | (value: boolean) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDropdownToggler",
       "nameFull": "IDropdownToggler"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "withNotify",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TabButtonMods",
       "nameFull": "TabButtonMods"
      }
     },
     "required": false
    }
   ]
  },
  "TagMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TagMods",
    "nameFull": "TagMods"
   },
   "typeValue": {
    "raw": "TagMods",
    "print": [
     "interface TagMods extends UuiTagMods {",
     "    fill?: types.FillStyle;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "fill",
     "typeValue": {
      "raw": "undefined | 'white' | 'solid' | 'light' | 'none'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | '18' | '24' | '30' | '42'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TagMods",
       "nameFull": "TagMods"
      }
     },
     "required": false
    }
   ]
  },
  "TextInputMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TextInputMods",
    "nameFull": "TextInputMods"
   },
   "typeValue": {
    "raw": "TextInputMods",
    "print": [
     "interface TextInputMods extends types.IHasEditMode {",
     "    size?: types.ControlSize | '60';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "typeValue": {
      "raw": "undefined | 'form' | 'cell' | 'inline'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "IHasEditMode",
       "nameFull": "IHasEditMode"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | 'none' | '24' | '30' | '42' | '60'"
     },
     "required": false
    }
   ]
  },
  "TextMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TextMods",
    "nameFull": "TextMods"
   },
   "typeValue": {
    "raw": "TextMods",
    "print": [
     "interface TextMods {",
     "    color?: 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night50' | 'night300' | 'night400' | 'night500' | 'night600' | 'night700' | 'night800' | 'night900';",
     "    font?: types.FontStyle;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night300' | 'night400' | 'night500' | 'night600' | 'night50' | 'night700' | 'night800' | 'night900'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "font",
     "typeValue": {
      "raw": "undefined | 'sans' | 'sans-semibold' | 'sans-light'"
     },
     "required": false
    }
   ]
  },
  "TextProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "TextProps",
    "nameFull": "TextProps"
   },
   "typeValue": {
    "raw": "TextProps",
    "print": [
     "type TextProps = Omit<UuiTextProps, 'color' | 'font'> & TextMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasChildren",
       "nameFull": "IHasChildren"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "typeValue": {
      "raw": "undefined | null | { [key: string]: any; name: string; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IAnalyticableClick",
       "nameFull": "IAnalyticableClick"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night300' | 'night400' | 'night500' | 'night600' | 'night50' | 'night700' | 'night800' | 'night900'"
     },
     "from": {
      "module": "@epam/loveship",
      "typeName": {
       "name": "TextMods",
       "nameFull": "TextMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "font",
     "typeValue": {
      "raw": "undefined | 'sans' | 'sans-semibold' | 'sans-light'"
     },
     "from": {
      "module": "@epam/loveship",
      "typeName": {
       "name": "TextMods",
       "nameFull": "TextMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "fontSize",
     "typeValue": {
      "raw": "undefined | '18' | '24' | '12' | '14' | '16' | '10'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TextSettings",
       "nameFull": "TextSettings"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasForwardedRef",
       "nameFull": "IHasForwardedRef<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "lineHeight",
     "typeValue": {
      "raw": "undefined | '18' | '24' | '30' | '12'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TextSettings",
       "nameFull": "TextSettings"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "typeValue": {
      "raw": "undefined | (e?: any) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IClickable",
       "nameFull": "IClickable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "typeValue": {
      "raw": "undefined | '36' | '48' | 'none' | '18' | '24' | '30' | '42'"
     },
     "from": {
      "module": "@epam/uui",
      "typeName": {
       "name": "TextMods",
       "nameFull": "TextMods"
      }
     },
     "required": false
    }
   ]
  },
  "TextSize": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "TextSize",
    "nameFull": "TextSize"
   },
   "typeValue": {
    "raw": "'36' | '48' | 'none' | '18' | '24' | '30' | '42'",
    "print": [
     "type TextSize = 'none' | '18' | '24' | '30' | '36' | '42' | '48';"
    ]
   }
  },
  "TooltipMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TooltipMods",
    "nameFull": "TooltipMods"
   },
   "typeValue": {
    "raw": "TooltipMods",
    "print": [
     "interface TooltipMods {",
     "    /** Tooltip color.",
     "     *  'night900' is deprecated and will be removed in future release, use 'gray' instead.",
     "     * */",
     "    color?: 'white' | 'fire' | 'gray' | 'night900';",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Tooltip color.",
      "  'night900' is deprecated and will be removed in future release, use 'gray' instead."
     ],
     "typeValue": {
      "raw": "undefined | 'fire' | 'white' | 'gray' | 'night900'"
     },
     "required": false
    }
   ]
  },
  "TooltipProps": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "TooltipProps",
    "nameFull": "TooltipProps"
   },
   "typeValue": {
    "raw": "TooltipProps",
    "print": [
     "type TooltipProps = Omit<UuiTooltipProps, 'color'> & TooltipMods;"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "boundaryElement",
     "typeValue": {
      "raw": "undefined | HTMLElement | HTMLElement[] | 'clippingParents'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "comment": [
      "React Node(s) to show tooltip for"
     ],
     "typeValue": {
      "raw": "React.ReactNode"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeBodyOnTogglerHidden",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeDelay",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnMouseLeave",
     "typeValue": {
      "raw": "undefined | false | 'toggler' | 'boundary'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Tooltip color.",
      "  'night900' is deprecated and will be removed in future release, use 'gray' instead."
     ],
     "typeValue": {
      "raw": "undefined | 'fire' | 'white' | 'gray' | 'night900'"
     },
     "from": {
      "module": "@epam/loveship",
      "typeName": {
       "name": "TooltipMods",
       "nameFull": "TooltipMods"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "content",
     "comment": [
      "Content to show in the tooltip (ReactNode)"
     ],
     "typeValue": {
      "raw": "any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
     ],
     "typeValue": {
      "raw": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasCX",
       "nameFull": "IHasCX"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IDisableable",
       "nameFull": "IDisableable"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeReadonly",
       "nameFull": "ICanBeReadonly"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeRequired",
       "nameFull": "ICanBeRequired"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxWidth",
     "comment": [
      "Max width of tooltip"
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "modifiers",
     "typeValue": {
      "raw": "undefined | (Modifier<any, object>>)[]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "offset",
     "comment": [
      "See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/}"
     ],
     "typeValue": {
      "raw": "undefined | OffsetsFunction | [number | null | undefined, number | null | undefined]"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "typeValue": {
      "raw": "undefined | () => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "typeValue": {
      "raw": "(newValue: T) => void"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "openDelay",
     "comment": [
      "Should we close dropdown on click on the Toggler, if it's already open? Default is true."
     ],
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "typeValue": {
      "raw": "undefined | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "portalTarget",
     "typeValue": {
      "raw": "undefined | HTMLElement"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "DropdownProps",
       "nameFull": "DropdownProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "typeValue": {
      "raw": "undefined | T & Record<`data-${string}`, string>"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IHasRawProps",
       "nameFull": "IHasRawProps<T>"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderContent",
     "comment": [
      "Alternative to 'content' prop, you can pass a render function.",
      " The function will only be called when content is shown, this can save performance."
     ],
     "typeValue": {
      "raw": "undefined | () => any"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "TooltipCoreProps",
       "nameFull": "TooltipCoreProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "typeValue": {
      "raw": "undefined | { [key: string]: ICanBeInvalid; }"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "ICanBeInvalid",
       "nameFull": "ICanBeInvalid"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "typeValue": {
      "raw": "T"
     },
     "from": {
      "module": "@epam/uui-core",
      "typeName": {
       "name": "IEditable",
       "nameFull": "IEditable<T>"
      }
     },
     "required": true
    }
   ]
  },
  "VirtualListMods": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "VirtualListMods",
    "nameFull": "VirtualListMods"
   },
   "typeValue": {
    "raw": "VirtualListMods",
    "print": [
     "interface VirtualListMods {",
     "}"
    ]
   }
  }
 },
 "@epam/uui-editor": {
  "EditorValue": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "EditorValue",
    "nameFull": "EditorValue"
   },
   "typeValue": {
    "raw": "null | Value",
    "print": [
     "type EditorValue = Value | null;"
    ]
   }
  },
  "IImageElement": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "IImageElement",
    "nameFull": "IImageElement"
   },
   "typeValue": {
    "raw": "IImageElement",
    "print": [
     "interface IImageElement extends TElement, PlateProps, SlateProps {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "align",
     "typeValue": {
      "raw": "undefined | 'left' | 'center' | 'right'"
     },
     "from": {
      "module": "@epam/uui-editor",
      "typeName": {
       "name": "PlateProps",
       "nameFull": "PlateProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "TDescendant[]"
     },
     "from": {
      "typeName": {
       "name": "TElement",
       "nameFull": "TElement"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "data",
     "typeValue": {
      "raw": "{ imageSize: SlateImgAlign; } & Partial<File> | { imageSize: FileUploadResponse>"
     },
     "from": {
      "module": "@epam/uui-editor",
      "typeName": {
       "name": "SlateProps",
       "nameFull": "SlateProps"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "typeName": {
       "name": "TElement",
       "nameFull": "TElement"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "url",
     "typeValue": {
      "raw": "string"
     },
     "from": {
      "module": "@epam/uui-editor",
      "typeName": {
       "name": "PlateProps",
       "nameFull": "PlateProps"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "typeValue": {
      "raw": "undefined | number"
     },
     "from": {
      "module": "@epam/uui-editor",
      "typeName": {
       "name": "PlateProps",
       "nameFull": "PlateProps"
      }
     },
     "required": false
    }
   ]
  },
  "LinkElement": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "LinkElement",
    "nameFull": "LinkElement"
   },
   "typeValue": {
    "raw": "LinkElement",
    "print": [
     "interface LinkElement extends TElement {",
     "    href: string;",
     "    type: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "typeValue": {
      "raw": "TDescendant[]"
     },
     "from": {
      "typeName": {
       "name": "TElement",
       "nameFull": "TElement"
      }
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    }
   ]
  },
  "PlaceholderPluginParams": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "PlaceholderPluginParams",
    "nameFull": "PlaceholderPluginParams"
   },
   "typeValue": {
    "raw": "PlaceholderPluginParams",
    "print": [
     "interface PlaceholderPluginParams {",
     "    items: {",
     "        name: string;",
     "        [key: string]: any;",
     "    }[];",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "items",
     "typeValue": {
      "raw": "{ [key: string]: any; name: string; }[]"
     },
     "required": true
    }
   ]
  },
  "PlateImgAlign": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "PlateImgAlign",
    "nameFull": "PlateImgAlign"
   },
   "typeValue": {
    "raw": "'left' | 'center' | 'right'",
    "print": [
     "type PlateImgAlign = 'left' | 'center' | 'right';"
    ]
   }
  },
  "PlateProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "PlateProps",
    "nameFull": "PlateProps"
   },
   "typeValue": {
    "raw": "PlateProps",
    "print": [
     "interface PlateProps {",
     "    url: string;",
     "    align?: PlateImgAlign;",
     "    width?: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "align",
     "typeValue": {
      "raw": "undefined | 'left' | 'center' | 'right'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "url",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    }
   ]
  },
  "SlateImageSize": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "SlateImageSize",
    "nameFull": "SlateImageSize"
   },
   "typeValue": {
    "raw": "SlateImageSize",
    "print": [
     "type SlateImageSize = {",
     "    width: number;",
     "    height: number | string;",
     "};"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "height",
     "typeValue": {
      "raw": "string | number"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "typeValue": {
      "raw": "number"
     },
     "required": true
    }
   ]
  },
  "SlateImgAlign": {
   "kind": "TypeAliasDeclaration",
   "typeName": {
    "name": "SlateImgAlign",
    "nameFull": "SlateImgAlign"
   },
   "typeValue": {
    "raw": "'align-left' | 'align-right' | 'align-center'",
    "print": [
     "type SlateImgAlign = 'align-left' | 'align-right' | 'align-center';"
    ]
   }
  },
  "SlateProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "SlateProps",
    "nameFull": "SlateProps"
   },
   "typeValue": {
    "raw": "SlateProps",
    "print": [
     "interface SlateProps {",
     "    data: SlateImageData;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "data",
     "typeValue": {
      "raw": "{ imageSize: SlateImgAlign; } & Partial<File> | { imageSize: FileUploadResponse>"
     },
     "required": true
    }
   ]
  }
 },
 "@epam/uui-timeline": {
  "BaseTimelineCanvasComponentProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "BaseTimelineCanvasComponentProps",
    "nameFull": "BaseTimelineCanvasComponentProps"
   },
   "typeValue": {
    "raw": "BaseTimelineCanvasComponentProps",
    "print": [
     "interface BaseTimelineCanvasComponentProps {",
     "    className?: string;",
     "    timelineController: TimelineController;",
     "    renderOnTop?(ctx: CanvasRenderingContext2D, t: TimelineTransform): void;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "className",
     "typeValue": {
      "raw": "undefined | string"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderOnTop",
     "typeValue": {
      "raw": "undefined | (ctx: CanvasRenderingContext2D, t: TimelineTransform) => void"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "timelineController",
     "typeValue": {
      "raw": "TimelineController"
     },
     "required": true
    }
   ]
  },
  "Item": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "Item",
    "nameFull": "Item"
   },
   "typeValue": {
    "raw": "Item",
    "print": [
     "interface Item {",
     "    from: Date;",
     "    to: Date;",
     "    color: string;",
     "    fillType?: 'shaded' | 'solid';",
     "    opacity?: number;",
     "    height?: number;",
     "    priority?: number;",
     "    minPixPerDay?: number;",
     "    maxPxPerDay?: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "fillType",
     "typeValue": {
      "raw": "undefined | 'shaded' | 'solid'"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "from",
     "typeValue": {
      "raw": "Date"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "height",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxPxPerDay",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "minPixPerDay",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "opacity",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "to",
     "typeValue": {
      "raw": "Date"
     },
     "required": true
    }
   ]
  },
  "Stage": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "Stage",
    "nameFull": "Stage"
   },
   "typeValue": {
    "raw": "Stage",
    "print": [
     "interface Stage {",
     "    eventName: string;",
     "    name: string;",
     "    startDate: Date;",
     "    endDate: Date;",
     "    color: string;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "endDate",
     "typeValue": {
      "raw": "Date"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "eventName",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "typeValue": {
      "raw": "string"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "startDate",
     "typeValue": {
      "raw": "Date"
     },
     "required": true
    }
   ]
  },
  "TimelineControllerOptions": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TimelineControllerOptions",
    "nameFull": "TimelineControllerOptions"
   },
   "typeValue": {
    "raw": "TimelineControllerOptions",
    "print": [
     "interface TimelineControllerOptions {",
     "    isHoliday?: (date: Date) => boolean;",
     "    minWidth?: number;",
     "    minVisibleDate?: Date;",
     "    minScale?: number;",
     "    maxScale?: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "typeValue": {
      "raw": "undefined | (date: Date) => boolean"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "maxScale",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "minScale",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "minVisibleDate",
     "typeValue": {
      "raw": "undefined | Date"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "minWidth",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    }
   ]
  },
  "TimelineEventsBarProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TimelineEventsBarProps",
    "nameFull": "TimelineEventsBarProps"
   },
   "typeValue": {
    "raw": "TimelineEventsBarProps",
    "print": [
     "interface TimelineEventsBarProps {",
     "    timelineController: TimelineController;",
     "    stages: Stage[];",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "stages",
     "typeValue": {
      "raw": "Stage[]"
     },
     "required": true
    },
    {
     "kind": "PropertySignature",
     "name": "timelineController",
     "typeValue": {
      "raw": "TimelineController"
     },
     "required": true
    }
   ]
  },
  "TimelineGridProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TimelineGridProps",
    "nameFull": "TimelineGridProps"
   },
   "typeValue": {
    "raw": "TimelineGridProps",
    "print": [
     "interface TimelineGridProps extends BaseTimelineCanvasComponentProps {",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "className",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-timeline",
      "typeName": {
       "name": "BaseTimelineCanvasComponentProps",
       "nameFull": "BaseTimelineCanvasComponentProps"
      }
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderOnTop",
     "typeValue": {
      "raw": "undefined | (ctx: CanvasRenderingContext2D, t: TimelineTransform) => void"
     },
     "from": {
      "module": "@epam/uui-timeline",
      "typeName": {
       "name": "BaseTimelineCanvasComponentProps",
       "nameFull": "BaseTimelineCanvasComponentProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "timelineController",
     "typeValue": {
      "raw": "TimelineController"
     },
     "from": {
      "module": "@epam/uui-timeline",
      "typeName": {
       "name": "BaseTimelineCanvasComponentProps",
       "nameFull": "BaseTimelineCanvasComponentProps"
      }
     },
     "required": true
    }
   ]
  },
  "TimelineNavProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TimelineNavProps",
    "nameFull": "TimelineNavProps"
   },
   "typeValue": {
    "raw": "TimelineNavProps",
    "print": [
     "interface TimelineNavProps {",
     "    timelineController: TimelineController;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "timelineController",
     "typeValue": {
      "raw": "TimelineController"
     },
     "required": true
    }
   ]
  },
  "TimelineScaleProps": {
   "kind": "InterfaceDeclaration",
   "typeName": {
    "name": "TimelineScaleProps",
    "nameFull": "TimelineScaleProps"
   },
   "typeValue": {
    "raw": "TimelineScaleProps",
    "print": [
     "interface TimelineScaleProps extends BaseTimelineCanvasComponentProps {",
     "    isDraggable?: boolean;",
     "    isScaleChangeOnWheel?: boolean;",
     "    shiftPercent?: number;",
     "}"
    ]
   },
   "props": [
    {
     "kind": "PropertySignature",
     "name": "className",
     "typeValue": {
      "raw": "undefined | string"
     },
     "from": {
      "module": "@epam/uui-timeline",
      "typeName": {
       "name": "BaseTimelineCanvasComponentProps",
       "nameFull": "BaseTimelineCanvasComponentProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggable",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "isScaleChangeOnWheel",
     "typeValue": {
      "raw": "undefined | false | true"
     },
     "required": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderOnTop",
     "typeValue": {
      "raw": "undefined | (ctx: CanvasRenderingContext2D, t: TimelineTransform) => void"
     },
     "from": {
      "module": "@epam/uui-timeline",
      "typeName": {
       "name": "BaseTimelineCanvasComponentProps",
       "nameFull": "BaseTimelineCanvasComponentProps"
      }
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "shiftPercent",
     "typeValue": {
      "raw": "undefined | number"
     },
     "required": false
    },
    {
     "kind": "PropertySignature",
     "name": "timelineController",
     "typeValue": {
      "raw": "TimelineController"
     },
     "from": {
      "module": "@epam/uui-timeline",
      "typeName": {
       "name": "BaseTimelineCanvasComponentProps",
       "nameFull": "BaseTimelineCanvasComponentProps"
      }
     },
     "required": true
    }
   ]
  }
 }
}