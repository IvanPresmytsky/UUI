{
 "@epam/uui-core": {
  "ClassValue": {
   "kind": "TypeAliasDeclaration",
   "name": "ClassValue",
   "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
  },
  "Browser": {
   "kind": "EnumDeclaration",
   "name": "Browser",
   "value": "Browser.Firefox | Browser.Opera | Browser.IE | Browser.Edge | Browser.Chrome | Browser.Safari | Browser.Other"
  },
  "LazyLoadedMapLoadCallback": {
   "kind": "TypeAliasDeclaration",
   "name": "LazyLoadedMapLoadCallback",
   "value": "LazyLoadedMapLoadCallback<TKey, TValue>",
   "comment": [
    "An callback to pass to LazyLoadedMap constructor"
   ]
  },
  "LoadingStatus": {
   "kind": "TypeAliasDeclaration",
   "name": "LoadingStatus",
   "value": "typeof UNKNOWN | typeof LOADING | typeof PENDING | typeof LOADED | typeof FAILED"
  },
  "IEditableDebouncerOptions": {
   "kind": "InterfaceDeclaration",
   "name": "IEditableDebouncerOptions",
   "value": "IEditableDebouncerOptions",
   "comment": [
    "IEditableDebouncer component options."
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "debounceDelay",
     "comment": [
      "Debounce delay in ms"
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableDebounce",
     "comment": [
      "Pass true to disable debouncing"
     ],
     "value": "undefined | false | true",
     "optional": true
    }
   ]
  },
  "IEditableDebouncerProps": {
   "kind": "InterfaceDeclaration",
   "name": "IEditableDebouncerProps",
   "value": "IEditableDebouncerProps<T>",
   "comment": [
    "IEditableDebouncer component props."
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "debounceDelay",
     "comment": [
      "Debounce delay in ms"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditableDebouncerOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableDebounce",
     "comment": [
      "Pass true to disable debouncing"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditableDebouncerOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "render",
     "comment": [
      "Render wrapped component."
     ],
     "value": "(props: IEditable<T>) => React.ReactNode",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "BatchPromiseOptions": {
   "kind": "InterfaceDeclaration",
   "name": "BatchPromiseOptions",
   "value": "BatchPromiseOptions",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "throttleMs",
     "comment": [
      "Minimum time (in ms) to pass after the last call, before triggering the batch"
     ],
     "value": "undefined | number",
     "optional": true
    }
   ]
  },
  "TMouseCoords": {
   "kind": "TypeAliasDeclaration",
   "name": "TMouseCoords",
   "value": "TMouseCoords",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "buttons",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "mouseDownPageX",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "mouseDownPageY",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "mouseDx",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "mouseDxSmooth",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "mouseDy",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "mouseDySmooth",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "mousePageX",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "mousePageY",
     "value": "number",
     "optional": false
    }
   ]
  },
  "DragGhostProps": {
   "kind": "InterfaceDeclaration",
   "name": "DragGhostProps",
   "value": "DragGhostProps"
  },
  "DndActorProps": {
   "kind": "InterfaceDeclaration",
   "name": "DndActorProps",
   "value": "DndActorProps<TSrcData, TDstData>",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "canAcceptDrop",
     "value": "undefined | (params: DropPosition, boolean>> | null",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDndActor"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dstData",
     "value": "undefined | TDstData",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDndActor"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onDrop",
     "value": "undefined | (data: DropParams<TSrcData, TDstData>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDndActor"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "render",
     "value": "(props: DndActorRenderParams) => React.ReactNode",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "srcData",
     "value": "undefined | TSrcData",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDndActor"
     },
     "optional": true
    }
   ]
  },
  "ContextProviderProps": {
   "kind": "InterfaceDeclaration",
   "name": "ContextProviderProps",
   "value": "ContextProviderProps<TApi, TAppContext>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "apiDefinition",
     "value": "undefined | (processRequest: IProcessRequest) => TApi",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UuiServicesProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "apiPingPath",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ApiContextProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "apiReloginPath",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ApiContextProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "apiServerUrl",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ApiContextProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "gaCode",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "history",
     "value": "undefined | IHistory4",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "loadAppContext",
     "value": "undefined | (api: TApi) => Promise<TAppContext>",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onInitCompleted",
     "value": "(svc: CommonContexts<TApi, TAppContext>) => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "skinContext",
     "value": "undefined | ISkin",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UuiServicesProps"
     },
     "optional": true
    }
   ]
  },
  "FileUploadOptions": {
   "kind": "InterfaceDeclaration",
   "name": "FileUploadOptions",
   "value": "FileUploadOptions",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "getXHR",
     "value": "undefined | (xhr: XMLHttpRequest) => any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onProgress",
     "value": "undefined | (progress: number) => any",
     "optional": true
    }
   ]
  },
  "FileUploadResponse": {
   "kind": "InterfaceDeclaration",
   "name": "FileUploadResponse",
   "value": "FileUploadResponse",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "error",
     "value": "undefined | { isError: boolean; message?: string | undefined; }",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "extension",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "path",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "value": "undefined | 'attachment' | 'iframe' | 'image'",
     "optional": true
    }
   ]
  },
  "IProcessRequest": {
   "kind": "TypeAliasDeclaration",
   "name": "IProcessRequest",
   "value": "IProcessRequest"
  },
  "BlockTypes": {
   "kind": "TypeAliasDeclaration",
   "name": "BlockTypes",
   "value": "'attachment' | 'iframe' | 'image'"
  },
  "ApiContextProps": {
   "kind": "InterfaceDeclaration",
   "name": "ApiContextProps",
   "value": "ApiContextProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "apiPingPath",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "apiReloginPath",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "apiServerUrl",
     "value": "undefined | string",
     "optional": true
    }
   ]
  },
  "NotificationOperation": {
   "kind": "InterfaceDeclaration",
   "name": "NotificationOperation",
   "value": "NotificationOperation",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "component",
     "value": "React.ComponentType<any>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "config",
     "value": "NotificationParams",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "props",
     "value": "INotification",
     "optional": false
    }
   ]
  },
  "ModalComponentProps": {
   "kind": "InterfaceDeclaration",
   "name": "ModalComponentProps",
   "value": "ModalComponentProps<TParameters, TResult>",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "abort",
     "value": "(result?: any) => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "depth",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "parameters",
     "value": "undefined | TParameters",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "success",
     "value": "(result: TResult) => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "zIndex",
     "value": "number",
     "optional": false
    }
   ]
  },
  "ModalOperation": {
   "kind": "InterfaceDeclaration",
   "name": "ModalOperation",
   "value": "ModalOperation",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "component",
     "value": "undefined | React.ComponentClass<any, any> | React.FunctionComponent<any>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "props",
     "value": "ModalComponentProps<any, any>",
     "optional": false
    }
   ]
  },
  "SkinContextComponentProps": {
   "kind": "TypeAliasDeclaration",
   "name": "SkinContextComponentProps",
   "value": "SkinContextComponentProps<TProps, TSemanticProps>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "usageContext",
     "value": "undefined | string[]",
     "optional": true
    }
   ]
  },
  "ISkin": {
   "kind": "InterfaceDeclaration",
   "name": "ISkin",
   "value": "ISkin",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "Button",
     "value": "ISkinComponent<ButtonSemanticProps>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "Checkbox",
     "value": "ISkinComponent<CheckboxCoreProps, {}>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "DatePicker",
     "value": "ISkinComponent<DatePickerCoreProps, {}>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "FlexCell",
     "value": "ISkinComponent<FlexCellProps, {}>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "FlexRow",
     "value": "ISkinComponent<FlexRowProps, {}>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "IconButton",
     "value": "ISkinComponent<ButtonCoreProps, {}>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "LabeledInput",
     "value": "ISkinComponent<LabeledInputCoreProps, {}>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "ModalBlocker",
     "value": "ISkinComponent<ModalBlockerProps, {}>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "ModalFooter",
     "value": "ISkinComponent<ModalFooterCoreProps, {}>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "ModalHeader",
     "value": "ISkinComponent<ModalHeaderCoreProps, {}>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "ModalWindow",
     "value": "ISkinComponent<ModalWindowProps, {}>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "RangeDatePicker",
     "value": "ISkinComponent<RangeDatePickerCoreProps, {}>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "Spinner",
     "value": "ISkinComponent<SpinnerCoreProps, {}>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "TextInput",
     "value": "ISkinComponent<TextInputCoreProps, {}>",
     "optional": false
    }
   ]
  },
  "IHistory4": {
   "kind": "InterfaceDeclaration",
   "name": "IHistory4",
   "value": "IHistory4",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "block",
     "value": "(listener: (args: any) => any) => () => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "createHref",
     "value": "(link: Link) => string",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "listen",
     "value": "(listener: (location: Link) => void) => () => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "location",
     "value": "Link",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "push",
     "value": "(link: Link) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "replace",
     "value": "(link: Link) => void",
     "optional": false
    }
   ]
  },
  "IRouter6": {
   "kind": "TypeAliasDeclaration",
   "name": "IRouter6",
   "value": "IRouter6",
   "comment": [
    "From: react-router version 6.14.0",
    "",
    " The type definition of the IRouter6 is not complete (It's OK as long as we only use a subset of its API)",
    "",
    " NOTE: Complete definitions of the router is located in @remix-run/router:",
    " https://github.com/remix-run/react-router/blob/main/packages/router/router.ts#L57"
   ],
   "props": [
    {
     "kind": "MethodSignature",
     "name": "createHref",
     "value": "(location: Location | URL) => string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "deleteBlocker",
     "value": "(key: string) => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "getBlocker",
     "value": "(key: string, fn: BlockerFunction) => unknown",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "navigate",
     "value": "{ (to: To | null, opts?: RouterNavigateOptions | undefined): Promise<void>; (to: number): Promise<void>; }",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "state",
     "value": "RouterState",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "subscribe",
     "value": "(fn: (state: RouterState) => void) => () => void",
     "optional": false
    }
   ]
  },
  "IdAndName": {
   "kind": "InterfaceDeclaration",
   "name": "IdAndName",
   "value": "IdAndName",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "value": "string",
     "optional": false
    }
   ]
  },
  "Link": {
   "kind": "InterfaceDeclaration",
   "name": "Link",
   "value": "Link",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "hash",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "pathname",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "query",
     "value": "any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "state",
     "value": "any",
     "optional": true
    }
   ]
  },
  "LayoutLayer": {
   "kind": "InterfaceDeclaration",
   "name": "LayoutLayer",
   "value": "LayoutLayer",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "depth",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "zIndex",
     "value": "number",
     "optional": false
    }
   ]
  },
  "TimePickerValue": {
   "kind": "InterfaceDeclaration",
   "name": "TimePickerValue",
   "value": "TimePickerValue",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "hours",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "minutes",
     "value": "number",
     "optional": false
    }
   ]
  },
  "CX": {
   "kind": "TypeAliasDeclaration",
   "name": "CX",
   "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray"
  },
  "Icon": {
   "value": "Icon",
   "name": "Icon",
   "kind": "TypeAliasDeclaration"
  },
  "IMap": {
   "kind": "InterfaceDeclaration",
   "name": "IMap",
   "value": "IMap<TKey, TValue>",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "[Symbol.iterator]",
     "value": "() => IterableIterator<[TKey, TValue]>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "constructor",
     "value": "Function",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "delete",
     "value": "(key: TKey) => boolean",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "get",
     "value": "(key: TKey) => TValue",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "has",
     "value": "(key: TKey) => boolean",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "set",
     "value": "(key: TKey, value: TValue) => IMap<TKey, TValue>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "number",
     "optional": false
    }
   ]
  },
  "AnalyticsEvent": {
   "kind": "TypeAliasDeclaration",
   "name": "AnalyticsEvent",
   "value": "null | { [key: string]: any; name: string; }"
  },
  "ICanBeInvalid": {
   "kind": "InterfaceDeclaration",
   "name": "ICanBeInvalid",
   "value": "ICanBeInvalid",
   "comment": [
    "Component value can be invalid"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "optional": true
    }
   ]
  },
  "IEditable": {
   "kind": "InterfaceDeclaration",
   "name": "IEditable",
   "value": "IEditable<T>",
   "comment": [
    "Components has an editable value. Text Input is a basic example."
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "optional": false
    }
   ]
  },
  "IClickable": {
   "kind": "InterfaceDeclaration",
   "name": "IClickable",
   "value": "IClickable",
   "comment": [
    "Component supports click action"
   ],
   "props": [
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "optional": true
    }
   ]
  },
  "ICanRedirect": {
   "kind": "InterfaceDeclaration",
   "name": "ICanRedirect",
   "value": "ICanRedirect",
   "comment": [
    "Component acts as a link, and can redirect"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "optional": true
    }
   ]
  },
  "IDisableable": {
   "kind": "InterfaceDeclaration",
   "name": "IDisableable",
   "value": "IDisableable",
   "comment": [
    "Component can be disabled"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "optional": true
    }
   ]
  },
  "ICanBeReadonly": {
   "kind": "InterfaceDeclaration",
   "name": "ICanBeReadonly",
   "value": "ICanBeReadonly",
   "comment": [
    "Component can be not editable"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "optional": true
    }
   ]
  },
  "ICanBeRequired": {
   "kind": "InterfaceDeclaration",
   "name": "ICanBeRequired",
   "value": "ICanBeRequired",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "optional": true
    }
   ]
  },
  "ICanFocus": {
   "kind": "InterfaceDeclaration",
   "name": "ICanFocus",
   "value": "ICanFocus<T>",
   "comment": [
    "Component can be focused"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "optional": true
    }
   ]
  },
  "IHasCaption": {
   "kind": "InterfaceDeclaration",
   "name": "IHasCaption",
   "value": "IHasCaption",
   "comment": [
    "Component has a caption. E.g. Button"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "optional": true
    }
   ]
  },
  "IHasLabel": {
   "kind": "InterfaceDeclaration",
   "name": "IHasLabel",
   "value": "IHasLabel",
   "comment": [
    "Component has label. E.g. User Name"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "optional": true
    }
   ]
  },
  "IHasDirection": {
   "kind": "InterfaceDeclaration",
   "name": "IHasDirection",
   "value": "IHasDirection",
   "comment": [
    "Component has direction of child components."
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "direction",
     "value": "undefined | 'vertical' | 'horizontal'",
     "optional": true
    }
   ]
  },
  "IHasCX": {
   "kind": "InterfaceDeclaration",
   "name": "IHasCX",
   "value": "IHasCX",
   "comment": [
    "Component can accept cx variable, which is more convenient shortcut for 'classname' property",
    " It accepts string, arrays, object, recursively. All falsy values are thrown away. Examples:",
    " - 'red' => 'red'",
    " - ['red', 0, false, 'blue' ] => 'red blue'",
    " - { 'red': true, 'blue': false, ['green', 'white']} => 'red green white'"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "optional": true
    }
   ]
  },
  "IHasIcon": {
   "kind": "InterfaceDeclaration",
   "name": "IHasIcon",
   "value": "IHasIcon",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "optional": true
    }
   ]
  },
  "IHasChildren": {
   "kind": "InterfaceDeclaration",
   "name": "IHasChildren",
   "value": "IHasChildren",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "optional": true
    }
   ]
  },
  "IHasPlaceholder": {
   "kind": "InterfaceDeclaration",
   "name": "IHasPlaceholder",
   "value": "IHasPlaceholder",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "optional": true
    }
   ]
  },
  "IHasTabIndex": {
   "kind": "InterfaceDeclaration",
   "name": "IHasTabIndex",
   "value": "IHasTabIndex",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "optional": true
    }
   ]
  },
  "IAdaptiveItem": {
   "kind": "InterfaceDeclaration",
   "name": "IAdaptiveItem",
   "value": "IAdaptiveItem",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "collapseToMore",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "estimatedWidth",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "showInBurgerMenu",
     "value": "undefined | false | true",
     "optional": true
    }
   ]
  },
  "IModal": {
   "kind": "InterfaceDeclaration",
   "name": "IModal",
   "value": "IModal<TResult>",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "abort",
     "value": "(result?: any) => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "string",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "success",
     "value": "(result: TResult) => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "zIndex",
     "value": "number",
     "optional": false
    }
   ]
  },
  "INotification": {
   "kind": "InterfaceDeclaration",
   "name": "INotification",
   "value": "INotification",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "clearTimer",
     "value": "undefined | () => void",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "string",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClose",
     "value": "undefined | () => void",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onSuccess",
     "value": "undefined | () => void",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "refreshTimer",
     "value": "undefined | () => void",
     "optional": true
    }
   ]
  },
  "IHasRawProps": {
   "kind": "TypeAliasDeclaration",
   "name": "IHasRawProps",
   "value": "IHasRawProps<T>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "optional": true
    }
   ]
  },
  "IHasForwardedRef": {
   "kind": "InterfaceDeclaration",
   "name": "IHasForwardedRef",
   "value": "IHasForwardedRef<T>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "optional": true
    }
   ]
  },
  "FlexRowProps": {
   "kind": "TypeAliasDeclaration",
   "name": "FlexRowProps",
   "value": "FlexRowProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignItems",
     "comment": [
      "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
     ],
     "value": "undefined | 'top' | 'bottom' | 'center' | 'stretch'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "comment": [
      "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "value": "undefined | number | '6' | '12' | '18' | '24' | '36'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "undefined | null | string | number",
     "inheritedFrom": {
      "name": "Attributes"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "comment": [
      "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "value": "undefined | number | '6' | '12' | '18' | '24' | '36'",
     "optional": true
    }
   ]
  },
  "FlexCellProps": {
   "kind": "TypeAliasDeclaration",
   "name": "FlexCellProps",
   "value": "FlexCellProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignSelf",
     "comment": [
      "Flexbox align-self property. Aligns items vertically for horizontal flexbox. [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-align-self)"
     ],
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "grow",
     "comment": [
      "Flexbox flex-grow property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-grow)"
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "undefined | null | string | number",
     "inheritedFrom": {
      "name": "Attributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "minWidth",
     "comment": [
      "CSS min-width"
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "shrink",
     "comment": [
      "Flexbox shrink property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-shrink)"
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "comment": [
      "Standard style attribute. Styles are added to element style, overriding supplied flex styles"
     ],
     "value": "undefined | React.CSSProperties",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "textAlign",
     "comment": [
      "CSS text-align property"
     ],
     "value": "undefined | 'left' | 'right' | 'center'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "comment": [
      "CSS width. Set to 'auto' to make FlexCell resize to it's content"
     ],
     "value": "undefined | number | 'auto' | '100%'",
     "optional": true
    }
   ]
  },
  "VPanelProps": {
   "kind": "TypeAliasDeclaration",
   "name": "VPanelProps",
   "value": "VPanelProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "value": "undefined | React.CSSProperties",
     "optional": true
    }
   ]
  },
  "ICheckable": {
   "kind": "TypeAliasDeclaration",
   "name": "ICheckable",
   "value": "ICheckable",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "indeterminate",
     "comment": [
      "Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "IAnalyticableClick": {
   "kind": "InterfaceDeclaration",
   "name": "IAnalyticableClick",
   "value": "IAnalyticableClick",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "optional": true
    }
   ]
  },
  "IAnalyticableOnChange": {
   "kind": "InterfaceDeclaration",
   "name": "IAnalyticableOnChange",
   "value": "IAnalyticableOnChange<T>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "optional": true
    }
   ]
  },
  "DropPosition": {
   "kind": "TypeAliasDeclaration",
   "name": "DropPosition",
   "value": "'top' | 'bottom' | 'left' | 'right' | 'inside'"
  },
  "DropPositionOptions": {
   "value": "Partial<Record<DropPosition, boolean>>",
   "name": "DropPositionOptions",
   "kind": "TypeAliasDeclaration"
  },
  "AcceptDropParams": {
   "kind": "InterfaceDeclaration",
   "name": "AcceptDropParams",
   "value": "AcceptDropParams<TSrcData, TDstData>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "dstData",
     "value": "undefined | TDstData",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "offsetLeft",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "offsetTop",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "srcData",
     "value": "TSrcData",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "targetHeight",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "targetWidth",
     "value": "number",
     "optional": false
    }
   ]
  },
  "DropParams": {
   "kind": "InterfaceDeclaration",
   "name": "DropParams",
   "value": "DropParams<TSrcData, TDstData>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "dstData",
     "value": "undefined | TDstData",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "AcceptDropParams"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "offsetLeft",
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "AcceptDropParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "offsetTop",
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "AcceptDropParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "position",
     "value": "'top' | 'bottom' | 'left' | 'right' | 'inside'",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "srcData",
     "value": "TSrcData",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "AcceptDropParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "targetHeight",
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "AcceptDropParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "targetWidth",
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "AcceptDropParams"
     },
     "optional": false
    }
   ]
  },
  "DndActorRenderParams": {
   "kind": "InterfaceDeclaration",
   "name": "DndActorRenderParams",
   "value": "DndActorRenderParams",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "classNames",
     "comment": [
      "CSS class names to add to the element.",
      " Some of these markers are used by the DndActor internally, so they must be added even if no used by component itself to apply styles."
     ],
     "value": "string[]",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "dragData",
     "comment": [
      "Drag data associated with the element. Specified always, even if there is no DnD operation happening."
     ],
     "value": "any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "eventHandlers",
     "comment": [
      "Event handlers. Component is expected to pass these events to the top element it renders.",
      " As onClick event on the element will be overwritten, use DndActorProps.onClick to receive click events on the element"
     ],
     "value": "{ onTouchStart?(e: React.TouchEvent<Element>): void; onPointerDown?(e: React.PointerEvent<Element>): void; onPointerEnter?(e: React.PointerEvent<any>): void; onPointerMove?(e: React.PointerEvent<any>): void; onPointerLeave?(e: React.PointerEvent<any>): void; onPointerUp?(e: React.PointerEvent<any>): void; }",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDndInProgress",
     "comment": [
      "True if any drag and drop operation is in progress, even if the element not being dragged"
     ],
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggable",
     "comment": [
      "True, if the element can be dragged. Doesn't mean that DnD is active."
     ],
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggedOut",
     "comment": [
      "True, if the element is dragged out. True for placeholder left when it's element it dragged out. False for Drag Ghost."
     ],
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggedOver",
     "comment": [
      "True, if the element is being dragged over, even if drop is not accepted by the element (canAcceptDrop returned false)"
     ],
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDragGhost",
     "comment": [
      "True, if the element is rendered as Drag Ghost. All other flags are false for drag ghost."
     ],
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropAccepted",
     "comment": [
      "True, if the element is being dragged over, and drop on it is accepted - canAcceptDrop returned true"
     ],
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "position",
     "comment": [
      "Drop position. Chosen from accepted drop positions according to pointer coordinates"
     ],
     "value": "undefined | 'top' | 'bottom' | 'left' | 'right' | 'inside'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Ref to the DOM element to perform DnD actions"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "optional": true
    }
   ]
  },
  "IDndActor": {
   "kind": "InterfaceDeclaration",
   "name": "IDndActor",
   "value": "IDndActor<TSrcData, TDstData>",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "canAcceptDrop",
     "value": "undefined | (params: DropPosition, boolean>> | null",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dstData",
     "value": "undefined | TDstData",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onDrop",
     "value": "undefined | (data: DropParams<TSrcData, TDstData>) => void",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "srcData",
     "value": "undefined | TSrcData",
     "optional": true
    }
   ]
  },
  "DataTableState": {
   "kind": "InterfaceDeclaration",
   "name": "DataTableState",
   "value": "DataTableState<TFilter, TViewState>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "checked",
     "value": "undefined | TId[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceState"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "columnsConfig",
     "value": "undefined | ColumnsConfig",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "value": "undefined | TFilter",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceState"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "filtersConfig",
     "value": "undefined | FiltersConfig<any>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "focusedIndex",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceState"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "folded",
     "value": "undefined | Record<string, boolean>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceState"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "page",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceState"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "pageSize",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceState"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "presetId",
     "value": "undefined | null | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "scrollTo",
     "comment": [
      "Virtual list ensures that row with this Index is within the visible area, if not Virtual List .",
      " Virtual list updates this value on scroll to null when appear in the visible area.",
      " If this value is updated manually, Virtual List would scroll to the specified items.",
      " It would attempt to put scroll so this item will be at the top of the list."
     ],
     "value": "undefined | ScrollToConfig",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "VirtualListState"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceState"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectedId",
     "value": "undefined | TId",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceState"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "value": "undefined | SortingOption<any>[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceState"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "topIndex",
     "comment": [
      "Index of the topmost item, in rendered batch.",
      " Note - this item might not be visible, as Virtual List maintain some reserve of rows on top / at the bottom of the list"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "VirtualListRange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "viewState",
     "value": "undefined | TViewState",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "visibleCount",
     "comment": [
      "Number of currently rendered items.",
      " Virtual list updates this value automatically, if it too small.",
      " Note Virtual List renders more items, that actually visible,",
      " as it need maintain some reserve of rows on top / at the bottom of the list."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "VirtualListRange"
     },
     "optional": true
    }
   ]
  },
  "ICanBeFixed": {
   "kind": "TypeAliasDeclaration",
   "name": "ICanBeFixed",
   "value": "ICanBeFixed",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "fix",
     "comment": [
      "If specified, will make column fixed - it would not scroll horizontally"
     ],
     "value": "undefined | 'left' | 'right'",
     "optional": true
    }
   ]
  },
  "DataColumnProps": {
   "kind": "InterfaceDeclaration",
   "name": "DataColumnProps",
   "value": "DataColumnProps<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignSelf",
     "comment": [
      "Align cell content vertically"
     ],
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "canAcceptCopy",
     "value": "undefined | (from: DataTableSelectedCellData<TItem, TId, TFilter>) => boolean",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "canCopy",
     "value": "undefined | (cell: DataTableSelectedCellData<TItem, TId, TFilter>) => boolean",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Column caption. Can be a plain text, or any React Component"
     ],
     "value": "React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fix",
     "comment": [
      "If specified, will make column fixed - it would not scroll horizontally"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeFixed"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "grow",
     "comment": [
      "The flex grow for the column. Allows column to grow in width if there's spare horizontal space"
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "info",
     "comment": [
      "Info tooltip displayed in the table header"
     ],
     "value": "React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isAlwaysVisible",
     "comment": [
      "Disallows to hide column via ColumnsConfiguration"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFilterActive",
     "comment": [
      "Should return true, if current filter affects the column.",
      " Usually, this prop is filled automatically by the useTableState hook.",
      " If you use the useTableState hook, you don't need to specify it manually."
     ],
     "value": "undefined | (filter: TFilter, column: DataColumnProps<TItem, TId, TFilter>) => boolean",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isHiddenByDefault",
     "comment": [
      "Makes column hidden by default. User can turn it on later, via ColumnsConfiguration"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isSortable",
     "comment": [
      "Enables sorting arrows on the column.",
      " Sorting state is kept in DataSourceState.sorting"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "justifyContent",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "comment": [
      "Unique key to identify the column. Used to reference columns, e.g. in ColumnsConfig.",
      " Also, used as React key for cells, header cells, and other components inside tables."
     ],
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "minWidth",
     "comment": [
      "Minimal width to which column can be resized manually"
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "render",
     "comment": [
      "Render the cell content. The item props is the value of the whole row (TItem)."
     ],
     "value": "undefined | (item: TItem, props: DataRowProps<TItem, TId>) => any",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderCell",
     "comment": [
      "Overrides rendering of the whole cell"
     ],
     "value": "undefined | (cellProps: RenderCellProps<TItem, TId>) => any",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderDropdown",
     "comment": [
      "Renders column header dropdown.",
      " Usually, this prop is filled automatically by the useTableState hook.",
      " If you use the useTableState hook, you don't need to specify it manually."
     ],
     "value": "undefined | () => React.ReactNode",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderFilter",
     "comment": [
      "Renders column filter.",
      " If you use useTableState hook, and you specify filter for the column, default filter will be rendered automatically.",
      " You can use this prop to render a custom filter component."
     ],
     "value": "undefined | (lens: IDropdownBodyProps) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "textAlign",
     "comment": [
      "Aligns cell content horizontally"
     ],
     "value": "undefined | 'left' | 'right' | 'center'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "comment": [
      "The width of the column. Usually, columns has exact this width.",
      " When all columns fit, and there's spare horizontal space, you can use 'grow' prop to use this space for certain columns.",
      " DataTable's columns can't shrink below width - table will add horizontal scrolling instead of shrinking columns"
     ],
     "value": "number",
     "optional": false
    }
   ]
  },
  "DataTableHeaderCellProps": {
   "kind": "InterfaceDeclaration",
   "name": "DataTableHeaderCellProps",
   "value": "DataTableHeaderCellProps<TItem, TId>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "allowColumnsReordering",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableColumnsConfigOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "allowColumnsResizing",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableColumnsConfigOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "column",
     "value": "DataColumnProps<TItem, TId, any>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFilterActive",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFirstColumn",
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLastColumn",
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "string",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onDrop",
     "value": "undefined | (params: DataColumnProps<TItem, TId, any>>) => void",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onSort",
     "value": "(dir: SortDirection) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderFilter",
     "value": "undefined | (dropdownProps: IDropdownBodyProps) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "value": "undefined | ICheckable",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "sortDirection",
     "value": "undefined | 'asc' | 'desc'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "DataTableHeaderRowProps": {
   "kind": "InterfaceDeclaration",
   "name": "DataTableHeaderRowProps",
   "value": "DataTableHeaderRowProps<TItem, TId>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "allowColumnsReordering",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableColumnsConfigOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "allowColumnsResizing",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableColumnsConfigOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "columns",
     "value": "DataColumnProps<TItem, TId, any>[]",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onConfigButtonClick",
     "value": "undefined | (params: DataTableConfigModalParams) => any",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderCell",
     "value": "undefined | (props: DataTableHeaderCellProps<TItem, TId>) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderConfigButton",
     "value": "undefined | () => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "value": "undefined | ICheckable",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "DataTableColumnsConfigOptions": {
   "kind": "InterfaceDeclaration",
   "name": "DataTableColumnsConfigOptions",
   "value": "DataTableColumnsConfigOptions",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "allowColumnsReordering",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "allowColumnsResizing",
     "value": "undefined | false | true",
     "optional": true
    }
   ]
  },
  "DataTableRowProps": {
   "kind": "InterfaceDeclaration",
   "name": "DataTableRowProps",
   "value": "DataTableRowProps<TItem, TId>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignItems",
     "comment": [
      "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
     ],
     "value": "undefined | 'top' | 'bottom' | 'center' | 'stretch'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FlexRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "checkbox",
     "comment": [
      "If row needs a checkbox, this field should be specified and it props can be configured here"
     ],
     "value": "undefined | { isVisible: boolean; } & ICanBeInvalid",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "comment": [
      "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "value": "undefined | number | '6' | '12' | '18' | '24' | '36'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FlexRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "columns",
     "value": "undefined | DataColumnProps<TItem, TId, any>[]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "depth",
     "comment": [
      "Depth of the row in tree, 0 for the top-level"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dnd",
     "comment": [
      "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
     ],
     "value": "undefined | IDndActor<any, any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "ID of the TItem rows displays"
     ],
     "value": "TId",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "indent",
     "comment": [
      "Indent of the item, to show hierarchy.",
      "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
      "  if all children of node has no children, all nodes would get the same indent as parent."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "index",
     "comment": [
      "Index of the row, from the top of the list. This doesn't account any hierarchy."
     ],
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isCheckable",
     "comment": [
      "True if row has checkbox and can be checkable"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isChecked",
     "comment": [
      "True if row is checked with checkbox"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenChecked",
     "comment": [
      "True if some of row's children are checked.",
      " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenSelected",
     "comment": [
      "True if any of row's children is selected."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFocused",
     "comment": [
      "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFoldable",
     "comment": [
      "True if row be folded or unfolded (usually because it contains children)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFolded",
     "comment": [
      "True if row is currently folded"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLastChild",
     "comment": [
      "True if row is the last child of his parent"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLoading",
     "comment": [
      "True if row is in loading state. 'value' is empty in this case"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isPinned",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isSelectable",
     "comment": [
      "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isSelected",
     "comment": [
      "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isUnknown",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "undefined | null | string | number",
     "inheritedFrom": {
      "name": "Attributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Can be specified to make row act as a link (plain or SPA)"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onCheck",
     "comment": [
      "Handles row checkbox change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onFocus",
     "comment": [
      "Handles row focusing."
     ],
     "value": "undefined | (focusedIndex: number) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onFold",
     "comment": [
      "Handles row folding change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onSelect",
     "comment": [
      "Handles row selection.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "parentId",
     "comment": [
      "ID of the parent TItem"
     ],
     "value": "undefined | TId",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "path",
     "comment": [
      "Hierarchical path from the root node to the item (excluding the item itself)"
     ],
     "value": "undefined | DataRowPathItem<TId, TItem>[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "pin",
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderCell",
     "value": "undefined | (props: DataTableCellProps<TItem, TId, any>) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderDropMarkers",
     "value": "undefined | (props: DndActorRenderParams) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "comment": [
      "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "value": "undefined | number | '6' | '12' | '18' | '24' | '36'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FlexRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowKey",
     "comment": [
      "Key to be used as component's key when rendering. Usually, it's stringified ID"
     ],
     "value": "string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "RenderEditorProps": {
   "kind": "InterfaceDeclaration",
   "name": "RenderEditorProps",
   "value": "RenderEditorProps<TItem, TId, TCellValue>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "'cell'",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowProps",
     "value": "DataRowProps<TItem, TId>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "DataTableCellOptions": {
   "kind": "InterfaceDeclaration",
   "name": "DataTableCellOptions",
   "value": "DataTableCellOptions<TItem, TId>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "column",
     "comment": [
      "DataColumnProps object for the column the cell is at"
     ],
     "value": "DataColumnProps<TItem, TId, any>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "index",
     "comment": [
      "Column index in table"
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFirstColumn",
     "comment": [
      "True if the cell is in the first column"
     ],
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLastColumn",
     "comment": [
      "True if the cell is in the last column"
     ],
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "comment": [
      "Key to use as component's key"
     ],
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowProps",
     "comment": [
      "DataTableRowsProps object for the table row the cell is at"
     ],
     "value": "DataTableRowProps<TItem, TId>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "HTML tabIndex attribute to set on the cell"
     ],
     "value": "undefined | number",
     "optional": true
    }
   ]
  },
  "DataTableCellProps": {
   "kind": "InterfaceDeclaration",
   "name": "DataTableCellProps",
   "value": "DataTableCellProps<TItem, TId, TCellValue>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "addons",
     "comment": [
      "Add-on controls to put before the cell content (folding arrow, checkbox, etc.)"
     ],
     "value": "React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "column",
     "comment": [
      "DataColumnProps object for the column the cell is at"
     ],
     "value": "DataColumnProps<TItem, TId, any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableCellOptions"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "index",
     "comment": [
      "Column index in table"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableCellOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFirstColumn",
     "comment": [
      "True if the cell is in the first column"
     ],
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableCellOptions"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLastColumn",
     "comment": [
      "True if the cell is in the last column"
     ],
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableCellOptions"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "comment": [
      "Key to use as component's key"
     ],
     "value": "string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableCellOptions"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderEditor",
     "comment": [
      "If passed, the cell is rendered as editable - receives focus, show validation errors.",
      " All necessary props for the editor are passed as argument:",
      " - props implements IEditable and can be passed directly to suitable component (like TextInput)",
      " - ICanFocus props are passed as well. Component should implement it so cell focus highlight works properly",
      " - mode='cell' prop is passed to render UUI components in 'cell' mode",
      " - rowProps is passed so you depend on additional info about the row itself"
     ],
     "value": "undefined | (props: RenderEditorProps<TItem, TId, TCellValue>) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderPlaceholder",
     "comment": [
      "Overrides default loading placeholder ('skeleton') rendering"
     ],
     "value": "undefined | (cellProps: DataTableCellProps<TItem, TId, TCellValue>) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderTooltip",
     "comment": [
      "Overrides default tooltip, used to show validation message if the cell is invalid"
     ],
     "value": "undefined | (props: TooltipCoreProps) => React.ReactElement<any, string | React.JSXElementConstructor<any>>",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderUnknown",
     "value": "undefined | (cellProps: DataTableCellProps<TItem, TId, TCellValue>) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowProps",
     "comment": [
      "DataTableRowsProps object for the table row the cell is at"
     ],
     "value": "DataTableRowProps<TItem, TId>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableCellOptions"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "HTML tabIndex attribute to set on the cell"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableCellOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "RenderCellProps": {
   "kind": "InterfaceDeclaration",
   "name": "RenderCellProps",
   "value": "RenderCellProps<TItem, TId>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "column",
     "comment": [
      "DataColumnProps object for the column the cell is at"
     ],
     "value": "DataColumnProps<TItem, TId, any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableCellOptions"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "index",
     "comment": [
      "Column index in table"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableCellOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFirstColumn",
     "comment": [
      "True if the cell is in the first column"
     ],
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableCellOptions"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLastColumn",
     "comment": [
      "True if the cell is in the last column"
     ],
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableCellOptions"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "comment": [
      "Key to use as component's key"
     ],
     "value": "string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableCellOptions"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowLens",
     "comment": [
      "Lens instance, wrapping IEditable on the row, to help binding to row's value.",
      " E.g. <TextInput { ...rowLens.prop('name').toProps() } />"
     ],
     "value": "ILens<TItem>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowProps",
     "comment": [
      "DataTableRowsProps object for the table row the cell is at"
     ],
     "value": "DataTableRowProps<TItem, TId>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableCellOptions"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "HTML tabIndex attribute to set on the cell"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableCellOptions"
     },
     "optional": true
    }
   ]
  },
  "ColumnsConfig": {
   "kind": "TypeAliasDeclaration",
   "name": "ColumnsConfig",
   "value": "ColumnsConfig"
  },
  "IColumnConfig": {
   "kind": "TypeAliasDeclaration",
   "name": "IColumnConfig",
   "value": "IColumnConfig",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "fix",
     "comment": [
      "If specified, will make column fixed - it would not scroll horizontally"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeFixed"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isVisible",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "order",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "value": "undefined | number",
     "optional": true
    }
   ]
  },
  "FiltersConfig": {
   "kind": "TypeAliasDeclaration",
   "name": "FiltersConfig",
   "value": "FiltersConfig<TFilter>"
  },
  "IFilterConfig": {
   "kind": "TypeAliasDeclaration",
   "name": "IFilterConfig",
   "value": "IFilterConfig",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isVisible",
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "order",
     "value": "undefined | string",
     "optional": true
    }
   ]
  },
  "DataTableConfigModalParams": {
   "kind": "TypeAliasDeclaration",
   "name": "DataTableConfigModalParams",
   "value": "DataTableConfigModalParams",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "columns",
     "value": "DataColumnProps<any, any, any>[]",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "IFilterPredicate": {
   "kind": "TypeAliasDeclaration",
   "name": "IFilterPredicate",
   "value": "IFilterPredicate",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isDefault",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "predicate",
     "value": "'in' | 'nin' | 'isNull' | 'gt' | 'gte' | 'lt' | 'lte' | 'inRange' | 'notInRange' | 'eq' | 'neq' | 'not'",
     "optional": false
    }
   ]
  },
  "PickerFilterConfig": {
   "kind": "TypeAliasDeclaration",
   "name": "PickerFilterConfig",
   "value": "PickerFilterConfig<TFilter>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "columnKey",
     "value": "string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FilterConfigBase"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "dataSource",
     "value": "IDataSource<any, any, any>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "field",
     "value": "keyof TFilter",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FilterConfigBase"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "getName",
     "value": "undefined | (item: any) => string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isAlwaysVisible",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FilterConfigBase"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxCount",
     "comment": [
      "Count of words to show in the Filter toggler. By default, 2 item will be shown."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FilterConfigBase"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "predicates",
     "value": "undefined | IFilterPredicate[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FilterConfigBase"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderRow",
     "value": "undefined | (props: DataRowProps<any, any>) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "showSearch",
     "comment": [
      "Pass false to hide search in picker body.",
      " If omitted, true value will be used."
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "title",
     "value": "string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FilterConfigBase"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "value": "'singlePicker' | 'multiPicker'",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "valueType",
     "value": "undefined | 'id'",
     "optional": true
    }
   ]
  },
  "TableFiltersConfig": {
   "kind": "TypeAliasDeclaration",
   "name": "TableFiltersConfig",
   "value": "PickerFilterConfig<TFilter> | DatePickerFilterConfig<TFilter> | NumericFilterConfig<TFilter> | RangeDatePickerFilterConfig<TFilter> | CustomFilterConfig<TFilter>"
  },
  "ITablePreset": {
   "kind": "InterfaceDeclaration",
   "name": "ITablePreset",
   "value": "ITablePreset<TFilter, TViewState>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "columnsConfig",
     "value": "undefined | ColumnsConfig",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "value": "undefined | TFilter",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "filtersConfig",
     "value": "undefined | FiltersConfig<any>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "null | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "order",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "value": "undefined | SortingOption<any>[]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "viewState",
     "value": "undefined | TViewState",
     "optional": true
    }
   ]
  },
  "IPresetsApi": {
   "kind": "InterfaceDeclaration",
   "name": "IPresetsApi",
   "value": "IPresetsApi<TFilter, TViewState>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "activePresetId",
     "comment": [
      "ID of selected preset"
     ],
     "value": "null | number",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "choosePreset",
     "comment": [
      "Function that selects given preset"
     ],
     "value": "(preset: ITablePreset<TFilter, TViewState>) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "createNewPreset",
     "comment": [
      "Function that gives preset name and create new preset with this name and current table state"
     ],
     "value": "(name: string) => Promise<number>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "deletePreset",
     "comment": [
      "Function that deletes given preset"
     ],
     "value": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "duplicatePreset",
     "comment": [
      "Function that gives the preset and creat their duplicate"
     ],
     "value": "(preset: ITablePreset<TFilter, TViewState>) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getPresetLink",
     "comment": [
      "Function that gives preset and return URL link on given preset"
     ],
     "value": "(preset: ITablePreset<TFilter, TViewState>) => string",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "hasPresetChanged",
     "comment": [
      "Function that gives preset and return if this preset changed or not"
     ],
     "value": "(preset: ITablePreset<TFilter, TViewState>) => boolean",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "comment": [
      "Array of presets"
     ],
     "value": "ITablePreset<TFilter, TViewState>[]",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "updatePreset",
     "comment": [
      "Function that updates given preset"
     ],
     "value": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>",
     "optional": false
    }
   ]
  },
  "ITableState": {
   "kind": "InterfaceDeclaration",
   "name": "ITableState",
   "value": "ITableState<TFilter, TViewState>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "activePresetId",
     "comment": [
      "ID of selected preset"
     ],
     "value": "null | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPresetsApi"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "choosePreset",
     "comment": [
      "Function that selects given preset"
     ],
     "value": "(preset: ITablePreset<TFilter, TViewState>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPresetsApi"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "createNewPreset",
     "comment": [
      "Function that gives preset name and create new preset with this name and current table state"
     ],
     "value": "(name: string) => Promise<number>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPresetsApi"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "deletePreset",
     "comment": [
      "Function that deletes given preset"
     ],
     "value": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPresetsApi"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "duplicatePreset",
     "comment": [
      "Function that gives the preset and creat their duplicate"
     ],
     "value": "(preset: ITablePreset<TFilter, TViewState>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPresetsApi"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getPresetLink",
     "comment": [
      "Function that gives preset and return URL link on given preset"
     ],
     "value": "(preset: ITablePreset<TFilter, TViewState>) => string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPresetsApi"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "hasPresetChanged",
     "comment": [
      "Function that gives preset and return if this preset changed or not"
     ],
     "value": "(preset: ITablePreset<TFilter, TViewState>) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPresetsApi"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "comment": [
      "Array of presets"
     ],
     "value": "ITablePreset<TFilter, TViewState>[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPresetsApi"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "setColumnsConfig",
     "comment": [
      "Function that updates columns config value"
     ],
     "value": "(columnsConfig: ColumnsConfig) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "setFilter",
     "comment": [
      "Function that updates filter value"
     ],
     "value": "(filter: TFilter) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "setFiltersConfig",
     "comment": [
      "Function that updates filters config value"
     ],
     "value": "(filtersConfig: FiltersConfig<any>) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "setTableState",
     "comment": [
      "Function that updates table state value"
     ],
     "value": "(newState: DataTableState<TFilter, TViewState>) => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "tableState",
     "comment": [
      "Table state value"
     ],
     "value": "DataTableState<TFilter, TViewState>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "updatePreset",
     "comment": [
      "Function that updates given preset"
     ],
     "value": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPresetsApi"
     },
     "optional": false
    }
   ]
  },
  "DataTableSelectedCellData": {
   "kind": "InterfaceDeclaration",
   "name": "DataTableSelectedCellData",
   "value": "DataTableSelectedCellData<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "column",
     "value": "DataColumnProps<TItem, TId, TFilter>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "row",
     "value": "DataRowProps<TItem, TId>",
     "optional": false
    }
   ]
  },
  "IBaseContext": {
   "kind": "InterfaceDeclaration",
   "name": "IBaseContext",
   "value": "IBaseContext<TState>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "destroyContext",
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "subscribe",
     "value": "(handler: (state: TState) => void) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "unsubscribe",
     "value": "(handler: (state: TState) => void) => void",
     "optional": false
    }
   ]
  },
  "NotificationParams": {
   "kind": "InterfaceDeclaration",
   "name": "NotificationParams",
   "value": "NotificationParams",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "duration",
     "value": "undefined | number | 'forever'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "position",
     "value": "undefined | 'bot-left' | 'bot-right' | 'top-left' | 'top-right' | 'top-center' | 'bot-center'",
     "optional": true
    }
   ]
  },
  "INotificationContext": {
   "kind": "InterfaceDeclaration",
   "name": "INotificationContext",
   "value": "INotificationContext",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "clearAll",
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "destroyContext",
     "value": "() => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBaseContext"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getNotifications",
     "value": "() => NotificationOperation[]",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "remove",
     "value": "(id: number) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "show",
     "value": "(render: (props: NotificationParams | undefined) => Promise<void>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "subscribe",
     "value": "(handler: (state: TState) => void) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBaseContext"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "unsubscribe",
     "value": "(handler: (state: TState) => void) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBaseContext"
     },
     "optional": false
    }
   ]
  },
  "ILayoutContext": {
   "kind": "InterfaceDeclaration",
   "name": "ILayoutContext",
   "value": "ILayoutContext",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "getLayer",
     "value": "() => LayoutLayer",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getPortalRoot",
     "value": "() => HTMLElement",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getPortalRootId",
     "value": "() => string",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "releaseLayer",
     "value": "(layer: LayoutLayer) => void",
     "optional": false
    }
   ]
  },
  "ILockContext": {
   "kind": "InterfaceDeclaration",
   "name": "ILockContext",
   "value": "ILockContext",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "acquire",
     "value": "(tryRelease: () => Promise<any>) => Promise<object>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "getCurrentLock",
     "value": "() => Lock | null",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "release",
     "value": "(lock: object) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "withLock",
     "value": "(action: () => Promise<any>) => Promise<object>",
     "optional": false
    }
   ]
  },
  "IRouterContext": {
   "kind": "InterfaceDeclaration",
   "name": "IRouterContext",
   "value": "IRouterContext",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "block",
     "value": "(callback: (link: Link) => void) => () => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "createHref",
     "value": "(link: Link) => string",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getCurrentLink",
     "value": "() => Link",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "isActive",
     "value": "(link: Link) => boolean",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "listen",
     "value": "(listener: (link: Link) => void) => () => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "redirect",
     "value": "(link?: string | Link | undefined) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "transfer",
     "value": "(link: Link) => void",
     "optional": false
    }
   ]
  },
  "IModalContext": {
   "kind": "InterfaceDeclaration",
   "name": "IModalContext",
   "value": "IModalContext",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "closeAll",
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "destroyContext",
     "value": "() => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBaseContext"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getOperations",
     "value": "() => ModalOperation[]",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "isModalOperationActive",
     "value": "() => boolean",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "show",
     "value": "<TResult, TParameters = {}>(render: (props: IModal<TResult>) => React.ReactNode, parameters?: TParameters | undefined) => Promise<TResult>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "subscribe",
     "value": "(handler: (state: TState) => void) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBaseContext"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "unsubscribe",
     "value": "(handler: (state: TState) => void) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBaseContext"
     },
     "optional": false
    }
   ]
  },
  "DndContextState": {
   "kind": "InterfaceDeclaration",
   "name": "DndContextState",
   "value": "DndContextState",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "ghostOffsetX",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ghostOffsetY",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ghostWidth",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDragging",
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderGhost",
     "value": "undefined | () => React.ReactNode",
     "optional": true
    }
   ]
  },
  "IDndContext": {
   "kind": "InterfaceDeclaration",
   "name": "IDndContext",
   "value": "IDndContext",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "destroyContext",
     "value": "() => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBaseContext"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "dragData",
     "value": "any",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "endDrag",
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "getMouseCoords",
     "value": "() => TMouseCoords",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDragging",
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "startDrag",
     "value": "(node: Node, data: any, renderGhost: () => React.ReactNode) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "subscribe",
     "value": "(handler: (state: TState) => void) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBaseContext"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "unsubscribe",
     "value": "(handler: (state: TState) => void) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBaseContext"
     },
     "optional": false
    }
   ]
  },
  "IUserSettingsContext": {
   "kind": "InterfaceDeclaration",
   "name": "IUserSettingsContext",
   "value": "IUserSettingsContext",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "get",
     "value": "<TValue>(key: any, initial?: TValue | undefined) => TValue",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "set",
     "value": "<TValue>(key: any, value: TValue) => void",
     "optional": false
    }
   ]
  },
  "UuiErrorInfo": {
   "kind": "InterfaceDeclaration",
   "name": "UuiErrorInfo",
   "value": "UuiErrorInfo",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "imageUrl",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "mobileImageUrl",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "status",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "subtitle",
     "value": "React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "title",
     "value": "React.ReactNode",
     "optional": true
    }
   ]
  },
  "IErrorContext": {
   "kind": "InterfaceDeclaration",
   "name": "IErrorContext",
   "value": "IErrorContext",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "currentError",
     "value": "undefined | Error",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "destroyContext",
     "value": "() => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBaseContext"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "discardError",
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onError",
     "value": "(callback: Function) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "recover",
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "reportError",
     "value": "(error: Error) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "subscribe",
     "value": "(handler: (state: TState) => void) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBaseContext"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "unsubscribe",
     "value": "(handler: (state: TState) => void) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBaseContext"
     },
     "optional": false
    }
   ]
  },
  "ApiStatus": {
   "kind": "TypeAliasDeclaration",
   "name": "ApiStatus",
   "value": "'idle' | 'running' | 'error' | 'recovery'"
  },
  "ApiRecoveryReason": {
   "kind": "TypeAliasDeclaration",
   "name": "ApiRecoveryReason",
   "value": "null | 'auth-lost' | 'connection-lost' | 'server-overload' | 'maintenance'"
  },
  "ApiCallInfo": {
   "kind": "InterfaceDeclaration",
   "name": "ApiCallInfo",
   "value": "ApiCallInfo",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "attemptsCount",
     "value": "number",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "dismissError",
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "errorStatus",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "finishedAt",
     "value": "undefined | Date",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "httpStatus",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "method",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "options",
     "value": "undefined | ApiCallOptions",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "requestData",
     "value": "{}",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "responseData",
     "value": "undefined | { errorMessage?: string | undefined; }",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "startedAt",
     "value": "undefined | Date",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "status",
     "value": "'running' | 'error' | 'scheduled'",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "url",
     "value": "string",
     "optional": false
    }
   ]
  },
  "ApiCallOptions": {
   "kind": "InterfaceDeclaration",
   "name": "ApiCallOptions",
   "value": "ApiCallOptions",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "errorHandling",
     "value": "undefined | 'manual' | 'page' | 'notification'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fetchOptions",
     "value": "undefined | RequestInit",
     "optional": true
    }
   ]
  },
  "IApiContext": {
   "kind": "InterfaceDeclaration",
   "name": "IApiContext",
   "value": "IApiContext",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "destroyContext",
     "value": "() => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBaseContext"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getActiveCalls",
     "value": "(status?: ApiCallStatus | undefined) => ApiCallInfo[]",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "processRequest",
     "value": "(url: string, method: string, data?: any, options?: ApiCallOptions | undefined) => Promise<any>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "recoveryReason",
     "value": "null | 'auth-lost' | 'connection-lost' | 'server-overload' | 'maintenance'",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "reset",
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "status",
     "value": "'idle' | 'running' | 'error' | 'recovery'",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "subscribe",
     "value": "(handler: (state: TState) => void) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBaseContext"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "unsubscribe",
     "value": "(handler: (state: TState) => void) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBaseContext"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "uploadFile",
     "value": "(url: string, file: File, options: FileUploadResponse>",
     "optional": false
    }
   ]
  },
  "IAnalyticsContext": {
   "kind": "InterfaceDeclaration",
   "name": "IAnalyticsContext",
   "value": "IAnalyticsContext",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "addListener",
     "value": "(listener: IAnalyticsListener) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "sendEvent",
     "value": "(event?: AnalyticsEvent | undefined) => void",
     "optional": false
    }
   ]
  },
  "IAnalyticsListener": {
   "kind": "InterfaceDeclaration",
   "name": "IAnalyticsListener",
   "value": "IAnalyticsListener",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "sendEvent",
     "value": "(event: AnalyticsEvent, 'name'>, eventType?: 'event' | 'pageView' | 'apiTiming' | undefined) => void",
     "optional": false
    }
   ]
  },
  "UuiContexts": {
   "kind": "InterfaceDeclaration",
   "name": "UuiContexts",
   "value": "UuiContexts",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "uuiAnalytics",
     "value": "IAnalyticsContext",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiApi",
     "value": "IApiContext",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiDnD",
     "value": "IDndContext",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiErrors",
     "value": "IErrorContext",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiLayout",
     "value": "ILayoutContext",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiLocks",
     "value": "ILockContext",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiModals",
     "value": "IModalContext",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiNotifications",
     "value": "INotificationContext",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiRouter",
     "value": "IRouterContext",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiSkin",
     "value": "SkinContext",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiUserSettings",
     "value": "IUserSettingsContext",
     "optional": false
    }
   ]
  },
  "ApiExtensions": {
   "kind": "InterfaceDeclaration",
   "name": "ApiExtensions",
   "value": "ApiExtensions<TApi>",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "withOptions",
     "value": "(options: ApiCallOptions) => TApi",
     "optional": false
    }
   ]
  },
  "CommonContexts": {
   "kind": "InterfaceDeclaration",
   "name": "CommonContexts",
   "value": "CommonContexts<TApi, TAppContext>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "api",
     "value": "TApi & ApiExtensions<TApi>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "history",
     "value": "undefined | IHistory4",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "uuiAnalytics",
     "value": "IAnalyticsContext",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UuiContexts"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiApi",
     "value": "IApiContext",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UuiContexts"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiApp",
     "value": "TAppContext",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiDnD",
     "value": "IDndContext",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UuiContexts"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiErrors",
     "value": "IErrorContext",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UuiContexts"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiLayout",
     "value": "ILayoutContext",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UuiContexts"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiLocks",
     "value": "ILockContext",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UuiContexts"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiModals",
     "value": "IModalContext",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UuiContexts"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiNotifications",
     "value": "INotificationContext",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UuiContexts"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiRouter",
     "value": "IRouterContext",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UuiContexts"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiSkin",
     "value": "SkinContext",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UuiContexts"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "uuiUserSettings",
     "value": "IUserSettingsContext",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UuiContexts"
     },
     "optional": false
    }
   ]
  },
  "SortDirection": {
   "kind": "TypeAliasDeclaration",
   "name": "SortDirection",
   "value": "'asc' | 'desc'"
  },
  "SortingOption": {
   "kind": "InterfaceDeclaration",
   "name": "SortingOption",
   "value": "SortingOption<T>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "direction",
     "value": "undefined | 'asc' | 'desc'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "field",
     "value": "keyof T",
     "optional": false
    }
   ]
  },
  "DataQueryFilter": {
   "kind": "TypeAliasDeclaration",
   "name": "DataQueryFilter",
   "value": "DataQueryFilter<T>"
  },
  "DataQueryFilterCondition": {
   "kind": "TypeAliasDeclaration",
   "name": "DataQueryFilterCondition",
   "value": "TField | FilterPredicate<TField>"
  },
  "FilterPredicate": {
   "kind": "TypeAliasDeclaration",
   "name": "FilterPredicate",
   "value": "FilterPredicate<TField>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "eq",
     "value": "undefined | TField",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "gt",
     "value": "undefined | TField",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "gte",
     "value": "undefined | TField",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "in",
     "value": "undefined | TField[]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inRange",
     "value": "undefined | RangeValue",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isNull",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "lt",
     "value": "undefined | TField",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "lte",
     "value": "undefined | TField",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "neq",
     "value": "undefined | TField",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "nin",
     "value": "undefined | TField[]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "not",
     "value": "undefined | FilterPredicate<TField>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "notInRange",
     "value": "undefined | RangeValue",
     "optional": true
    }
   ]
  },
  "FilterPredicateName": {
   "kind": "TypeAliasDeclaration",
   "name": "FilterPredicateName",
   "value": "'in' | 'nin' | 'isNull' | 'gt' | 'gte' | 'lt' | 'lte' | 'inRange' | 'notInRange' | 'eq' | 'neq' | 'not'"
  },
  "DataQueryRange": {
   "kind": "InterfaceDeclaration",
   "name": "DataQueryRange",
   "value": "DataQueryRange",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "count",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "from",
     "value": "number",
     "optional": false
    }
   ]
  },
  "DataQuery": {
   "kind": "InterfaceDeclaration",
   "name": "DataQuery",
   "value": "DataQuery<T>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "filter",
     "value": "undefined | DataQueryFilter<T>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "range",
     "value": "undefined | DataQueryRange",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "value": "undefined | SortingOption<T>[]",
     "optional": true
    }
   ]
  },
  "Metadata": {
   "kind": "InterfaceDeclaration",
   "name": "Metadata",
   "value": "Metadata<T>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "all",
     "value": "undefined | Metadata<ElementType<T>>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxValue",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "minValue",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "props",
     "value": "undefined | { [P in keyof T]?: Metadata<T[P]> | undefined; }",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validators",
     "value": "undefined | CustomValidator<T>[]",
     "optional": true
    }
   ]
  },
  "ButtonBaseCoreProps": {
   "kind": "InterfaceDeclaration",
   "name": "ButtonBaseCoreProps",
   "value": "ButtonBaseCoreProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    }
   ]
  },
  "ButtonCoreProps": {
   "kind": "InterfaceDeclaration",
   "name": "ButtonCoreProps",
   "value": "ButtonCoreProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "value": "undefined | null | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "value": "undefined | 'left' | 'right'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "value": "undefined | 'left' | 'right'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBasicPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    }
   ]
  },
  "ButtonSemanticProps": {
   "kind": "InterfaceDeclaration",
   "name": "ButtonSemanticProps",
   "value": "ButtonSemanticProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "type",
     "value": "undefined | 'success' | 'cancel' | 'action'",
     "optional": true
    }
   ]
  },
  "CheckboxCoreProps": {
   "kind": "InterfaceDeclaration",
   "name": "CheckboxCoreProps",
   "value": "CheckboxCoreProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "indeterminate",
     "comment": [
      "Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICheckable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasLabel"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "TextInputCoreProps": {
   "kind": "InterfaceDeclaration",
   "name": "TextInputCoreProps",
   "value": "TextInputCoreProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "autoComplete",
     "comment": [
      "Standard <a href='https://www.w3schools.com/tags/att_input_autocomplete.asp'>autocomplete attribute</a>"
     ],
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "comment": [
      "Put focus on the element, when component is mounted"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML ID attribute for input"
     ],
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputMode",
     "comment": [
      "Standard <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode'>inputMode attribute</a>"
     ],
     "value": "undefined | 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "comment": [
      "Maximum input length in characters"
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "comment": [
      "Standard <a href='https://www.w3schools.com/tags/att_input_name.asp'>name attribute</a>"
     ],
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onAccept",
     "comment": [
      "Enables accept (check) icon, and fires when the icon is clicked"
     ],
     "value": "undefined | () => void",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onCancel",
     "comment": [
      "Enables cancel (cross) icon, and fires when the icon is clicked"
     ],
     "value": "undefined | () => void",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "comment": [
      "keydown event handler to put on the HTML input element"
     ],
     "value": "undefined | (e?: any) => void",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "comment": [
      "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
     ],
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "SpinnerCoreProps": {
   "kind": "InterfaceDeclaration",
   "name": "SpinnerCoreProps",
   "value": "SpinnerCoreProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    }
   ]
  },
  "ModalWindowProps": {
   "kind": "InterfaceDeclaration",
   "name": "ModalWindowProps",
   "value": "ModalWindowProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "value": "undefined | React.CSSProperties",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "VPanelProps"
     },
     "optional": true
    }
   ]
  },
  "ModalBlockerProps": {
   "kind": "InterfaceDeclaration",
   "name": "ModalBlockerProps",
   "value": "ModalBlockerProps",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "abort",
     "value": "(result?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IModal"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableCloseByEsc",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableFocusLock",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disallowClickOutside",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IModal"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IModal"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "success",
     "value": "(result: TResult) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IModal"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "zIndex",
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IModal"
     },
     "optional": false
    }
   ]
  },
  "ModalHeaderCoreProps": {
   "kind": "InterfaceDeclaration",
   "name": "ModalHeaderCoreProps",
   "value": "ModalHeaderCoreProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "value": "undefined | () => any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "title",
     "value": "React.ReactNode",
     "optional": true
    }
   ]
  },
  "ModalFooterCoreProps": {
   "kind": "InterfaceDeclaration",
   "name": "ModalFooterCoreProps",
   "value": "ModalFooterCoreProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "borderTop",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    }
   ]
  },
  "LabeledInputCoreProps": {
   "kind": "InterfaceDeclaration",
   "name": "LabeledInputCoreProps",
   "value": "LabeledInputCoreProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "htmlFor",
     "comment": [
      "HTML 'for' tag to bind the label to a component.",
      " Can be used when component can't be wrapped by the LabeledInput, e.g. when form is layed out as table with labels and inputs placed into different columns"
     ],
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "info",
     "comment": [
      "Info hint text to show in tooltip"
     ],
     "value": "React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOptional",
     "comment": [
      "Marks related field as optional"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasLabel"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "labelPosition",
     "comment": [
      "Position of the label, relative to the wrapped component (top of left)"
     ],
     "value": "undefined | 'top' | 'left'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    }
   ]
  },
  "BaseDatePickerProps": {
   "kind": "InterfaceDeclaration",
   "name": "BaseDatePickerProps",
   "value": "BaseDatePickerProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bodyCx",
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableClear",
     "comment": [
      "Disable clearing date value (e.g. via cross icon)"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "comment": [
      "Filter selectable days. Days, for which this callback returns false - will be disabled"
     ],
     "value": "undefined | (day: Dayjs) => boolean",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "format",
     "comment": [
      "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
     ],
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "value": "undefined | 'left' | 'right'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "Styles for input and body components in DatePicker"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "comment": [
      "If this function returns true, the day will be highlighted as holiday"
     ],
     "value": "undefined | (day: Dayjs) => boolean",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "value": "undefined | (e?: React.FocusEvent<HTMLInputElement, Element> | undefined) => void",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "value": "undefined | 'top' | 'bottom' | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Attributes for HTML Element"
     ],
     "value": "undefined | { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "comment": [
      "Overrides rendering of the single day. For example, to highlight certain days"
     ],
     "value": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderTarget",
     "comment": [
      "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach DatePicker to other components, e.g. Buttons"
     ],
     "value": "undefined | (props: IDropdownToggler) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "RangeDatePickerValue": {
   "kind": "InterfaceDeclaration",
   "name": "RangeDatePickerValue",
   "value": "RangeDatePickerValue",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "from",
     "value": "null | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "to",
     "value": "null | string",
     "optional": true
    }
   ]
  },
  "RangeDatePickerPresets": {
   "kind": "TypeAliasDeclaration",
   "name": "RangeDatePickerPresets",
   "value": "RangeDatePickerPresets"
  },
  "RangeDatePickerPresetValue": {
   "kind": "TypeAliasDeclaration",
   "name": "RangeDatePickerPresetValue",
   "value": "RangeDatePickerPresetValue",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "from",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "order",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "to",
     "value": "string",
     "optional": false
    }
   ]
  },
  "BaseRangeDatePickerProps": {
   "kind": "InterfaceDeclaration",
   "name": "BaseRangeDatePickerProps",
   "value": "BaseRangeDatePickerProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bodyCx",
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableClear",
     "comment": [
      "Disables clearing component (with the cross icon)"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "comment": [
      "Filter selectable days. Days, for which this callback returns false - will be disabled"
     ],
     "value": "undefined | (day: Dayjs) => boolean",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "format",
     "comment": [
      "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
     ],
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "Styles for input and body components in RangeDatePicker"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "comment": [
      "If this function returns true, the day will be highlighted as holiday"
     ],
     "value": "undefined | (day: Dayjs) => boolean",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<HTMLInputElement, Element>, inputType: 'from' | 'to') => void",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<HTMLInputElement, Element>, inputType: 'from' | 'to') => void",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onOpenChange",
     "comment": [
      "Called when component is opened/closed"
     ],
     "value": "undefined | (isOpen: boolean) => void",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "value": "undefined | 'top' | 'bottom' | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "comment": [
      "Range presets (like 'this week', 'this month', etc.) to display at the right of the Picker's body.",
      " UUI provides defaults in the 'rangeDatePickerPresets' exported variable - you can use it as is, or build on top of it (e.g. add your presets)"
     ],
     "value": "undefined | RangeDatePickerPresets",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "rawProps as HTML attributes"
     ],
     "value": "undefined | { from?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; to?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "comment": [
      "Overrides rendering of the single day. For example, to highlight certain days"
     ],
     "value": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderFooter",
     "comment": [
      "Allows to add a custom footer to the Picker's dropdown body"
     ],
     "value": "undefined | (value: RangeDatePickerValue) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderTarget",
     "comment": [
      "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach RangeDatePicker to other components, e.g. Buttons"
     ],
     "value": "undefined | (props: IDropdownToggler) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "DatePickerCoreProps": {
   "kind": "InterfaceDeclaration",
   "name": "DatePickerCoreProps",
   "value": "DatePickerCoreProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bodyCx",
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableClear",
     "comment": [
      "Disable clearing date value (e.g. via cross icon)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "comment": [
      "Filter selectable days. Days, for which this callback returns false - will be disabled"
     ],
     "value": "undefined | (day: Dayjs) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "format",
     "comment": [
      "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "Styles for input and body components in DatePicker"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "comment": [
      "If this function returns true, the day will be highlighted as holiday"
     ],
     "value": "undefined | (day: Dayjs) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "value": "undefined | (e?: React.FocusEvent<HTMLInputElement, Element> | undefined) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "value": "undefined | 'top' | 'bottom' | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Attributes for HTML Element"
     ],
     "value": "undefined | { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "comment": [
      "Overrides rendering of the single day. For example, to highlight certain days"
     ],
     "value": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderFooter",
     "comment": [
      "render prop to add a custom footer inside the DatePicker dropdown body"
     ],
     "value": "undefined | () => React.ReactNode",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderTarget",
     "comment": [
      "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach DatePicker to other components, e.g. Buttons"
     ],
     "value": "undefined | (props: IDropdownToggler) => React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "RangeDatePickerInputType": {
   "kind": "TypeAliasDeclaration",
   "name": "RangeDatePickerInputType",
   "value": "'from' | 'to'"
  },
  "RangeDatePickerCoreProps": {
   "kind": "InterfaceDeclaration",
   "name": "RangeDatePickerCoreProps",
   "value": "RangeDatePickerCoreProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bodyCx",
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableClear",
     "comment": [
      "Disables clearing component (with the cross icon)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "comment": [
      "Filter selectable days. Days, for which this callback returns false - will be disabled"
     ],
     "value": "undefined | (day: Dayjs) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "format",
     "comment": [
      "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getPlaceholder",
     "value": "undefined | (type: RangeDatePickerInputType) => string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "Styles for input and body components in RangeDatePicker"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "comment": [
      "If this function returns true, the day will be highlighted as holiday"
     ],
     "value": "undefined | (day: Dayjs) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<HTMLInputElement, Element>, inputType: 'from' | 'to') => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<HTMLInputElement, Element>, inputType: 'from' | 'to') => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onOpenChange",
     "comment": [
      "Called when component is opened/closed"
     ],
     "value": "undefined | (isOpen: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "value": "undefined | 'top' | 'bottom' | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "comment": [
      "Range presets (like 'this week', 'this month', etc.) to display at the right of the Picker's body.",
      " UUI provides defaults in the 'rangeDatePickerPresets' exported variable - you can use it as is, or build on top of it (e.g. add your presets)"
     ],
     "value": "undefined | RangeDatePickerPresets",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "value": "undefined | { from?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; to?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "comment": [
      "Overrides rendering of the single day. For example, to highlight certain days"
     ],
     "value": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderFooter",
     "comment": [
      "Allows to add a custom footer to the Picker's dropdown body"
     ],
     "value": "undefined | (value: RangeDatePickerValue) => React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderTarget",
     "comment": [
      "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach RangeDatePicker to other components, e.g. Buttons"
     ],
     "value": "undefined | (props: IDropdownToggler) => React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "TooltipCoreProps": {
   "kind": "InterfaceDeclaration",
   "name": "TooltipCoreProps",
   "value": "TooltipCoreProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "boundaryElement",
     "value": "undefined | HTMLElement | HTMLElement[] | 'clippingParents'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "comment": [
      "React Node(s) to show tooltip for"
     ],
     "value": "React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeBodyOnTogglerHidden",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeDelay",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnMouseLeave",
     "value": "undefined | false | 'toggler' | 'boundary'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "content",
     "comment": [
      "Content to show in the tooltip (ReactNode)"
     ],
     "value": "any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxWidth",
     "comment": [
      "Max width of tooltip"
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "modifiers",
     "value": "undefined | (Modifier<any, object>>)[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "offset",
     "comment": [
      "See <a href='https://popper.js.org/docs/v2/modifiers/offset/'>Popper docs</a>"
     ],
     "value": "undefined | OffsetsFunction | [number | null | undefined, number | null | undefined]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "openDelay",
     "comment": [
      "Should we close dropdown on click on the Toggler, if it's already open? Default is true."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "value": "undefined | 'top' | 'bottom' | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "portalTarget",
     "value": "undefined | HTMLElement",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderContent",
     "comment": [
      "Alternative to 'content' prop, you can pass a render function.",
      " The function will only be called when content is shown, this can save performance."
     ],
     "value": "undefined | () => any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "DropdownState": {
   "kind": "InterfaceDeclaration",
   "name": "DropdownState",
   "value": "DropdownState",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bodyBoundingRect",
     "value": "{ y: number | null; x: number | null; width: number | null; height: number | null; }",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "opened",
     "value": "false | true",
     "optional": false
    }
   ]
  },
  "DropdownBodyProps": {
   "kind": "InterfaceDeclaration",
   "name": "DropdownBodyProps",
   "value": "DropdownBodyProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "arrowProps",
     "value": "undefined | PopperArrowProps",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "value": "undefined | 'top' | 'bottom' | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "scheduleUpdate",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "togglerHeight",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "togglerWidth",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    }
   ]
  },
  "DropdownPlacement": {
   "value": "Placement",
   "name": "DropdownPlacement",
   "kind": "TypeAliasDeclaration"
  },
  "DropdownProps": {
   "kind": "InterfaceDeclaration",
   "name": "DropdownProps",
   "value": "DropdownProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "boundaryElement",
     "value": "undefined | HTMLElement | HTMLElement[] | 'clippingParents'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeBodyOnTogglerHidden",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeDelay",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnClickOutside",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnMouseLeave",
     "value": "undefined | false | 'toggler' | 'boundary'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnTargetClick",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isNotUnfoldable",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "modifiers",
     "value": "undefined | (Modifier<any, object>>)[]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "value": "undefined | () => void",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "openDelay",
     "comment": [
      "Should we close dropdown on click on the Toggler, if it's already open? Default is true."
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "openOnClick",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "openOnHover",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "value": "undefined | 'top' | 'bottom' | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "portalTarget",
     "value": "undefined | HTMLElement",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderBody",
     "value": "(props: DropdownBodyProps) => React.ReactNode",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderTarget",
     "value": "(props: IDropdownToggler) => React.ReactNode",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "zIndex",
     "value": "undefined | number",
     "optional": true
    }
   ]
  },
  "DataRowProps": {
   "kind": "TypeAliasDeclaration",
   "name": "DataRowProps",
   "value": "DataRowProps<TItem, TId>",
   "comment": [
    "DataRowProps is a base shape of props, passed to items in various lists or trees.",
    "",
    " Despite 'Row' in it's name, it doesn't directly connected to a table.",
    " We use DataRowProps as a base for DataTableRowProps and DataPickerRowProps.",
    " But it can also be used for any user-built list, tree, custom picker rows, or even a grid of cards.",
    "",
    " Array of DataRowProps describes a part of hierarchical list, while still being a flat array (not a tree of some kind).",
    " We use depth, indent, path, and other props to show row's place in the hierarchy.",
    " This is very handy to handle rendering, especially in virtual scrolling scenarios.",
    "",
    " DataSources primary job is to convert various data stores into arrays of DataRowProps."
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignItems",
     "comment": [
      "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
     ],
     "value": "undefined | 'top' | 'bottom' | 'center' | 'stretch'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FlexRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "checkbox",
     "comment": [
      "If row needs a checkbox, this field should be specified and it props can be configured here"
     ],
     "value": "undefined | { isVisible: boolean; } & ICanBeInvalid",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "comment": [
      "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "value": "undefined | number | '6' | '12' | '18' | '24' | '36'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FlexRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "depth",
     "comment": [
      "Depth of the row in tree, 0 for the top-level"
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dnd",
     "comment": [
      "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
     ],
     "value": "undefined | IDndActor<any, any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "ID of the TItem rows displays"
     ],
     "value": "TId",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "indent",
     "comment": [
      "Indent of the item, to show hierarchy.",
      "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
      "  if all children of node has no children, all nodes would get the same indent as parent."
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "index",
     "comment": [
      "Index of the row, from the top of the list. This doesn't account any hierarchy."
     ],
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isCheckable",
     "comment": [
      "True if row has checkbox and can be checkable"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isChecked",
     "comment": [
      "True if row is checked with checkbox"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenChecked",
     "comment": [
      "True if some of row's children are checked.",
      " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenSelected",
     "comment": [
      "True if any of row's children is selected."
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFocused",
     "comment": [
      "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFoldable",
     "comment": [
      "True if row be folded or unfolded (usually because it contains children)"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFolded",
     "comment": [
      "True if row is currently folded"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLastChild",
     "comment": [
      "True if row is the last child of his parent"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLoading",
     "comment": [
      "True if row is in loading state. 'value' is empty in this case"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isPinned",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isSelectable",
     "comment": [
      "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isSelected",
     "comment": [
      "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isUnknown",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "undefined | null | string | number",
     "inheritedFrom": {
      "name": "Attributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Can be specified to make row act as a link (plain or SPA)"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onCheck",
     "comment": [
      "Handles row checkbox change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => void",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onFocus",
     "comment": [
      "Handles row focusing."
     ],
     "value": "undefined | (focusedIndex: number) => void",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onFold",
     "comment": [
      "Handles row folding change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => void",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onSelect",
     "comment": [
      "Handles row selection.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => void",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "parentId",
     "comment": [
      "ID of the parent TItem"
     ],
     "value": "undefined | TId",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "path",
     "comment": [
      "Hierarchical path from the root node to the item (excluding the item itself)"
     ],
     "value": "undefined | DataRowPathItem<TId, TItem>[]",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "pin",
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "comment": [
      "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "value": "undefined | number | '6' | '12' | '18' | '24' | '36'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FlexRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowKey",
     "comment": [
      "Key to be used as component's key when rendering. Usually, it's stringified ID"
     ],
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "DataRowPathItem": {
   "kind": "InterfaceDeclaration",
   "name": "DataRowPathItem",
   "value": "DataRowPathItem<TId, TItem>",
   "comment": [
    "Holds parent info for data rows"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "TId",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLastChild",
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "value": "TItem",
     "optional": false
    }
   ]
  },
  "DataRowOptions": {
   "kind": "InterfaceDeclaration",
   "name": "DataRowOptions",
   "value": "DataRowOptions<TItem, TId>",
   "comment": [
    "A part of the DataRowProps, which can be configured for each data row via getRowOptions callback.",
    " Other props in DataRowProps are computed when generating rows."
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "checkbox",
     "comment": [
      "If row needs a checkbox, this field should be specified and it props can be configured here"
     ],
     "value": "undefined | { isVisible: boolean; } & ICanBeInvalid",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dnd",
     "comment": [
      "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
     ],
     "value": "undefined | IDndActor<any, any>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isSelectable",
     "comment": [
      "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Can be specified to make row act as a link (plain or SPA)"
     ],
     "value": "undefined | Link",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Row click handler"
     ],
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => void",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "pin",
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => boolean",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "VirtualListRange": {
   "kind": "InterfaceDeclaration",
   "name": "VirtualListRange",
   "value": "VirtualListRange",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "topIndex",
     "comment": [
      "Index of the topmost item, in rendered batch.",
      " Note - this item might not be visible, as Virtual List maintain some reserve of rows on top / at the bottom of the list"
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "visibleCount",
     "comment": [
      "Number of currently rendered items.",
      " Virtual list updates this value automatically, if it too small.",
      " Note Virtual List renders more items, that actually visible,",
      " as it need maintain some reserve of rows on top / at the bottom of the list."
     ],
     "value": "undefined | number",
     "optional": true
    }
   ]
  },
  "ScrollAlign": {
   "kind": "TypeAliasDeclaration",
   "name": "ScrollAlign",
   "value": "'top' | 'nearest'"
  },
  "ScrollToConfig": {
   "kind": "InterfaceDeclaration",
   "name": "ScrollToConfig",
   "value": "ScrollToConfig",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "align",
     "value": "undefined | 'top' | 'nearest'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "behavior",
     "value": "undefined | 'auto' | 'instant' | 'smooth'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "index",
     "value": "undefined | number",
     "optional": true
    }
   ]
  },
  "VirtualListState": {
   "kind": "InterfaceDeclaration",
   "name": "VirtualListState",
   "value": "VirtualListState",
   "comment": [
    "Holds state of a Virtual List - top visible item index, and estimated count of visible items"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "focusedIndex",
     "comment": [
      "Virtual List manually scroll to this Index when it appears not within the visible area.",
      " It would attempt to put scroll so this item will be in the middle of the list."
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "scrollTo",
     "comment": [
      "Virtual list ensures that row with this Index is within the visible area, if not Virtual List .",
      " Virtual list updates this value on scroll to null when appear in the visible area.",
      " If this value is updated manually, Virtual List would scroll to the specified items.",
      " It would attempt to put scroll so this item will be at the top of the list."
     ],
     "value": "undefined | ScrollToConfig",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "topIndex",
     "comment": [
      "Index of the topmost item, in rendered batch.",
      " Note - this item might not be visible, as Virtual List maintain some reserve of rows on top / at the bottom of the list"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "VirtualListRange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "visibleCount",
     "comment": [
      "Number of currently rendered items.",
      " Virtual list updates this value automatically, if it too small.",
      " Note Virtual List renders more items, that actually visible,",
      " as it need maintain some reserve of rows on top / at the bottom of the list."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "VirtualListRange"
     },
     "optional": true
    }
   ]
  },
  "IDataSource": {
   "kind": "InterfaceDeclaration",
   "name": "IDataSource",
   "value": "IDataSource<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "getById",
     "value": "(id: TId) => void | TItem",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "value": "(item: TItem) => TId",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getView",
     "value": "(value: IDataSourceView<TItem, TId, TFilter>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "setItem",
     "value": "(item: TItem) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "unsubscribeView",
     "value": "(onValueChange: (val: DataSourceState<any, TId>) => any) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "useView",
     "value": "(value: IDataSourceView<TItem, TId, TFilter>",
     "optional": false
    }
   ]
  },
  "DataSourceState": {
   "kind": "InterfaceDeclaration",
   "name": "DataSourceState",
   "value": "DataSourceState<TFilter, TId>",
   "comment": [
    "Holds state of a components displaying lists - like tables. Holds virtual list position, filter, search, selection, etc."
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "checked",
     "value": "undefined | TId[]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "value": "undefined | TFilter",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "focusedIndex",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "folded",
     "value": "undefined | Record<string, boolean>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "page",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "pageSize",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "scrollTo",
     "comment": [
      "Virtual list ensures that row with this Index is within the visible area, if not Virtual List .",
      " Virtual list updates this value on scroll to null when appear in the visible area.",
      " If this value is updated manually, Virtual List would scroll to the specified items.",
      " It would attempt to put scroll so this item will be at the top of the list."
     ],
     "value": "undefined | ScrollToConfig",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "VirtualListState"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectedId",
     "value": "undefined | TId",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "value": "undefined | SortingOption<any>[]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "topIndex",
     "comment": [
      "Index of the topmost item, in rendered batch.",
      " Note - this item might not be visible, as Virtual List maintain some reserve of rows on top / at the bottom of the list"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "VirtualListRange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "visibleCount",
     "comment": [
      "Number of currently rendered items.",
      " Virtual list updates this value automatically, if it too small.",
      " Note Virtual List renders more items, that actually visible,",
      " as it need maintain some reserve of rows on top / at the bottom of the list."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "VirtualListRange"
     },
     "optional": true
    }
   ]
  },
  "CascadeSelection": {
   "kind": "TypeAliasDeclaration",
   "name": "CascadeSelection",
   "value": "false | true | 'implicit' | 'explicit'"
  },
  "BaseListViewProps": {
   "kind": "InterfaceDeclaration",
   "name": "BaseListViewProps",
   "value": "BaseListViewProps<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "backgroundReload",
     "comment": [
      "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
      " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
      " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
      " It is required to add blockers/spinners to the components, built on your own.",
      " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "value": "undefined | false | true | 'implicit' | 'explicit'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "complexIds",
     "comment": [
      "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
      " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "comment": [
      "Should return unique ID of the TItem",
      " If omitted, we assume that every TItem has and unique id in its 'id' field.",
      " @param item An item to get ID of"
     ],
     "value": "undefined | (item: TItem) => TId",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getParentId",
     "comment": [
      "Should return ID of the Item's parent. Usually it's i => i.parentId.",
      " If specified, Data Source will build items hierarchy.",
      "",
      " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
      " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
      "   to highlight parents with selected children",
      " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
      "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
     ],
     "value": "undefined | (item: TItem) => TId | undefined",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getRowOptions",
     "comment": [
      "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
      " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
      " See DataRowOptions for more details.",
      " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "value": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "Can be specified to unfold all or some items at start.",
      " If not specified, all rows would be folded."
     ],
     "value": "undefined | (item: TItem) => boolean",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowOptions",
     "comment": [
      "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
      " See DataRowOptions for more details.",
      " If options depends on the item itself, use getRowOptions.",
      " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "value": "undefined | DataRowOptions<TItem, TId>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "comment": [
      "Enables or disables \"select all\" checkbox. Default is true."
     ],
     "value": "undefined | false | true",
     "optional": true
    }
   ]
  },
  "IDataSourceView": {
   "kind": "TypeAliasDeclaration",
   "name": "IDataSourceView",
   "value": "IDataSourceView<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "_forceUpdate",
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "destroy",
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getById",
     "value": "(id: TId, index: number) => DataRowProps<TItem, TId>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getListProps",
     "value": "() => DataSourceListProps",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getSelectedRows",
     "value": "(range?: DataRowProps<TItem, TId>[]",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getSelectedRowsCount",
     "value": "() => number",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getVisibleRows",
     "value": "() => DataRowProps<TItem, TId>[]",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "loadData",
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "reload",
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "value": "undefined | ICheckable",
     "optional": true
    }
   ]
  },
  "DataSourceListCounts": {
   "kind": "TypeAliasDeclaration",
   "name": "DataSourceListCounts",
   "value": "DataSourceListCounts",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "exactRowsCount",
     "comment": [
      "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "knownRowsCount",
     "comment": [
      "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
      " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
      " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowsCount",
     "comment": [
      "Count of rows, after applying filter, and folding on tree nodes.",
      " Obsolete! Please switch to exactRowsCount / knownRowsCount"
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "totalCount",
     "comment": [
      "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
     ],
     "value": "undefined | number",
     "optional": true
    }
   ]
  },
  "DataSourceListProps": {
   "kind": "InterfaceDeclaration",
   "name": "DataSourceListProps",
   "value": "DataSourceListProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "exactRowsCount",
     "comment": [
      "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListCounts"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReloading",
     "comment": [
      "Signals that data is reloading on search/sort/filter/reload."
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "knownRowsCount",
     "comment": [
      "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
      " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
      " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListCounts"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowsCount",
     "comment": [
      "Count of rows, after applying filter, and folding on tree nodes.",
      " Obsolete! Please switch to exactRowsCount / knownRowsCount"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListCounts"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "value": "undefined | ICheckable",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "totalCount",
     "comment": [
      "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListCounts"
     },
     "optional": true
    }
   ]
  },
  "LazyDataSourceApiRequestOptions": {
   "kind": "InterfaceDeclaration",
   "name": "LazyDataSourceApiRequestOptions",
   "value": "LazyDataSourceApiRequestOptions<TItem, TFilter>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "filter",
     "value": "undefined | TFilter",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "value": "undefined | SortingOption<any>[]",
     "optional": true
    }
   ]
  },
  "LazyDataSourceApiRequestRange": {
   "kind": "InterfaceDeclaration",
   "name": "LazyDataSourceApiRequestRange",
   "value": "LazyDataSourceApiRequestRange",
   "comment": [
    "The range (from/count) of required rows for LazyDataSourceApiRequest"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "count",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "from",
     "value": "number",
     "optional": false
    }
   ]
  },
  "LazyDataSourceApiRequest": {
   "kind": "InterfaceDeclaration",
   "name": "LazyDataSourceApiRequest",
   "value": "LazyDataSourceApiRequest<TItem, TId, TFilter>",
   "comment": [
    "Defines input arguments for Lazy Data Source APIs"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "filter",
     "value": "undefined | TFilter",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "LazyDataSourceApiRequestOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ids",
     "value": "undefined | TId[]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "page",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "pageSize",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "range",
     "value": "undefined | LazyDataSourceApiRequestRange",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "LazyDataSourceApiRequestOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "value": "undefined | SortingOption<any>[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "LazyDataSourceApiRequestOptions"
     },
     "optional": true
    }
   ]
  },
  "LazyDataSourceApiResponse": {
   "kind": "InterfaceDeclaration",
   "name": "LazyDataSourceApiResponse",
   "value": "LazyDataSourceApiResponse<TItem>",
   "comment": [
    "Defines Lazy Data Source APIs response shape"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "count",
     "comment": [
      "Total count of items which match current filter. If not specified, total count will be detected only when user scrolls to the end of the list."
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "from",
     "comment": [
      "API can set 'from' field if it wants to return more items than what was requested in request.range.",
      " This can be used to return all items at once (with from:0, count: totalCount), or align response to pages."
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "comment": [
      "List of items which was requested via API"
     ],
     "value": "TItem[]",
     "optional": false
    }
   ]
  },
  "LazyDataSourceApiRequestContext": {
   "kind": "InterfaceDeclaration",
   "name": "LazyDataSourceApiRequestContext",
   "value": "LazyDataSourceApiRequestContext<TItem, TId>",
   "comment": [
    "Defines the context of API request. E.g. parent if we require to retrieve sub-list of the tree"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "parent",
     "value": "undefined | null | TItem",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "parentId",
     "value": "undefined | null | TId",
     "optional": true
    }
   ]
  },
  "LazyDataSourceApi": {
   "kind": "TypeAliasDeclaration",
   "name": "LazyDataSourceApi",
   "value": "LazyDataSourceApi<TItem, TId, TFilter>",
   "comment": [
    "Defines API to retrieve data for DataSources"
   ]
  },
  "SinglePickerProps": {
   "kind": "TypeAliasDeclaration",
   "name": "SinglePickerProps",
   "value": "{ selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> | { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem>"
  },
  "ArrayPickerProps": {
   "kind": "TypeAliasDeclaration",
   "name": "ArrayPickerProps",
   "value": "{ selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> | { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]>"
  },
  "PickerBindingProps": {
   "kind": "TypeAliasDeclaration",
   "name": "PickerBindingProps",
   "value": "{ selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> | { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem> | { selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> | { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]>"
  },
  "PickerBindingValueType": {
   "kind": "TypeAliasDeclaration",
   "name": "PickerBindingValueType",
   "value": "'scalar' | 'array'"
  },
  "PickerBaseOptions": {
   "kind": "TypeAliasDeclaration",
   "name": "PickerBaseOptions",
   "value": "PickerBaseOptions<TItem, TId>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "value": "undefined | false | true | 'implicit' | 'explicit'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dataSource",
     "comment": [
      "Provides items to the Picker"
     ],
     "value": "IDataSource<TItem, TId, any>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "emptyValue",
     "comment": [
      "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
     ],
     "value": "undefined | null | []",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "entityName",
     "comment": [
      "Name of the entity being selected. Affects wording like \"Please select [entity]\""
     ],
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "entityPluralName",
     "comment": [
      "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
     ],
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "comment": [
      "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
     ],
     "value": "any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getName",
     "comment": [
      "Gets entity display name. Default it item.name."
     ],
     "value": "undefined | (item: TItem) => string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getRowOptions",
     "comment": [
      "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
     ],
     "value": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "comment": [
      "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
     ],
     "value": "undefined | (item: TItem) => string[]",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "You can return true for all, or some items to fold them."
     ],
     "value": "undefined | (item: TItem) => boolean",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderNotFound",
     "comment": [
      "Overrides the default 'no records found' banner.",
      " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
     ],
     "value": "undefined | (props: { search: string; onClose: () => void; }) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderRow",
     "comment": [
      "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
     ],
     "value": "undefined | (props: DataSourceState<Record<string, any>, any>) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "comment": [
      "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
     ],
     "value": "undefined | (item: TItem, sorting: SortingOption<any>) => any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "comment": [
      "Defines sorting to pass to the DataSource"
     ],
     "value": "undefined | SortingOption<any>",
     "optional": true
    }
   ]
  },
  "PickerFooterProps": {
   "kind": "TypeAliasDeclaration",
   "name": "PickerFooterProps",
   "value": "PickerFooterProps<TItem, TId>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "clearSelection",
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "disableClear",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "value": "'single' | 'multi'",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "showSelected",
     "value": "IEditable<boolean>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "view",
     "value": "IDataSourceView<TItem, TId, any>",
     "optional": false
    }
   ]
  },
  "PickerBaseProps": {
   "kind": "TypeAliasDeclaration",
   "name": "PickerBaseProps",
   "value": "IAnalyticableOnChange<any> | IAnalyticableOnChange<any> | IAnalyticableOnChange<any> | IAnalyticableOnChange<any>"
  },
  "IPickerToggler": {
   "kind": "InterfaceDeclaration",
   "name": "IPickerToggler",
   "value": "IPickerToggler<TItem, TId>",
   "comment": [
    "Component can be used as Toggler control for pickers.",
    " Only IDropdownToggler implementation is necessary for the picker to function.",
    " Other props can be implemented for full-featured picker togglers."
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disables component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBasicPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectedRowsCount",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selection",
     "value": "undefined | DataRowProps<TItem, TId>[]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "IBasicPickerToggler": {
   "kind": "InterfaceDeclaration",
   "name": "IBasicPickerToggler",
   "value": "IBasicPickerToggler",
   "comment": [
    "Component can be used as Toggler control for pickers.",
    " This interface is enough for basic pickers.",
    " Picker togglers with search or advanced selection display should implement IPickerToggler interface"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disables component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "value": "undefined | (e?: any) => void",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    }
   ]
  },
  "IDropdownToggler": {
   "kind": "InterfaceDeclaration",
   "name": "IDropdownToggler",
   "value": "IDropdownToggler",
   "comment": [
    "Component can be used as Toggler control for dropdown menus"
   ],
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disables component"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "optional": true
    }
   ]
  },
  "IDropdownBodyProps": {
   "kind": "InterfaceDeclaration",
   "name": "IDropdownBodyProps",
   "value": "IDropdownBodyProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "arrowProps",
     "value": "undefined | PopperArrowProps",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "value": "undefined | () => void",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "value": "undefined | 'top' | 'bottom' | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "scheduleUpdate",
     "value": "undefined | () => void",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "togglerHeight",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "togglerWidth",
     "value": "undefined | number",
     "optional": true
    }
   ]
  },
  "IFilterItemBodyProps": {
   "kind": "TypeAliasDeclaration",
   "name": "IFilterItemBodyProps",
   "value": "FilterConfigBase<TFilter> & { type: 'singlePicker' | 'multiPicker'; dataSource: IDropdownBodyProps & { selectedPredicate?: string | undefined; } | FilterConfigBase<TFilter> & { type: 'datePicker'; filter?(day: IDropdownBodyProps & { selectedPredicate?: string | undefined; } | FilterConfigBase<TFilter> & { type: 'numeric'; } & IDropdownBodyProps & { selectedPredicate?: string | undefined; } | FilterConfigBase<TFilter> & { type: 'rangeDatePicker'; format?: string | undefined; filter?(day: IDropdownBodyProps & { selectedPredicate?: string | undefined; } | FilterConfigBase<TFilter> & { type: 'custom'; render: (props: IDropdownBodyProps & { selectedPredicate?: string | undefined; }"
  },
  "StatefulProps": {
   "kind": "InterfaceDeclaration",
   "name": "StatefulProps",
   "value": "StatefulProps<T>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "initialState",
     "value": "Partial<T>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "render",
     "value": "(props: IEditable<T>) => React.ReactNode",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "storage",
     "value": "undefined | 'state' | 'query'",
     "optional": true
    }
   ]
  },
  "BaseArrayListViewProps": {
   "kind": "InterfaceDeclaration",
   "name": "BaseArrayListViewProps",
   "value": "BaseArrayListViewProps<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "backgroundReload",
     "comment": [
      "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
      " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
      " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
      " It is required to add blockers/spinners to the components, built on your own.",
      " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "value": "undefined | false | true | 'implicit' | 'explicit'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "complexIds",
     "comment": [
      "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
      " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getFilter",
     "value": "undefined | (filter: TFilter) => (item: TItem) => boolean",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "comment": [
      "Should return unique ID of the TItem",
      " If omitted, we assume that every TItem has and unique id in its 'id' field.",
      " @param item An item to get ID of"
     ],
     "value": "undefined | (item: TItem) => TId",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getParentId",
     "comment": [
      "Should return ID of the Item's parent. Usually it's i => i.parentId.",
      " If specified, Data Source will build items hierarchy.",
      "",
      " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
      " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
      "   to highlight parents with selected children",
      " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
      "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
     ],
     "value": "undefined | (item: TItem) => TId | undefined",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getRowOptions",
     "comment": [
      "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
      " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
      " See DataRowOptions for more details.",
      " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "value": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "value": "undefined | (item: TItem) => string[]",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "Can be specified to unfold all or some items at start.",
      " If not specified, all rows would be folded."
     ],
     "value": "undefined | (item: TItem) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowOptions",
     "comment": [
      "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
      " See DataRowOptions for more details.",
      " If options depends on the item itself, use getRowOptions.",
      " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "value": "undefined | DataRowOptions<TItem, TId>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "comment": [
      "Enables or disables \"select all\" checkbox. Default is true."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "value": "undefined | (item: TItem, sorting: SortingOption<any>) => any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "sortSearchByRelevance",
     "comment": [
      "Enables sorting of search results by relevance.",
      " - The highest priority has records, which have a full match with a search keyword.",
      " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
      " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
      " - And the lowest one - any other match of the search keyword.",
      "",
      " Example:",
      " - `search`: 'some'",
      " - `record string`: 'some word', `rank` = 4",
      " - `record string`: 'someone', `rank` = 3",
      " - `record string`: 'I know some guy', `rank` = 2",
      " - `record string`: 'awesome', `rank` = 1",
      "",
      " @default true"
     ],
     "value": "undefined | false | true",
     "optional": true
    }
   ]
  },
  "ArrayListViewProps": {
   "kind": "InterfaceDeclaration",
   "name": "ArrayListViewProps",
   "value": "ArrayListViewProps<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "backgroundReload",
     "comment": [
      "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
      " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
      " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
      " It is required to add blockers/spinners to the components, built on your own.",
      " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "value": "undefined | false | true | 'implicit' | 'explicit'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "complexIds",
     "comment": [
      "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
      " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getFilter",
     "value": "undefined | (filter: TFilter) => (item: TItem) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseArrayListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "comment": [
      "Should return unique ID of the TItem",
      " If omitted, we assume that every TItem has and unique id in its 'id' field.",
      " @param item An item to get ID of"
     ],
     "value": "undefined | (item: TItem) => TId",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getParentId",
     "comment": [
      "Should return ID of the Item's parent. Usually it's i => i.parentId.",
      " If specified, Data Source will build items hierarchy.",
      "",
      " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
      " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
      "   to highlight parents with selected children",
      " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
      "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
     ],
     "value": "undefined | (item: TItem) => TId | undefined",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getRowOptions",
     "comment": [
      "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
      " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
      " See DataRowOptions for more details.",
      " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "value": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "value": "undefined | (item: TItem) => string[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseArrayListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "Can be specified to unfold all or some items at start.",
      " If not specified, all rows would be folded."
     ],
     "value": "undefined | (item: TItem) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "value": "undefined | TItem[] | ITree<TItem, TId>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowOptions",
     "comment": [
      "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
      " See DataRowOptions for more details.",
      " If options depends on the item itself, use getRowOptions.",
      " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "value": "undefined | DataRowOptions<TItem, TId>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "comment": [
      "Enables or disables \"select all\" checkbox. Default is true."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "value": "undefined | (item: TItem, sorting: SortingOption<any>) => any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseArrayListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "sortSearchByRelevance",
     "comment": [
      "Enables sorting of search results by relevance.",
      " - The highest priority has records, which have a full match with a search keyword.",
      " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
      " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
      " - And the lowest one - any other match of the search keyword.",
      "",
      " Example:",
      " - `search`: 'some'",
      " - `record string`: 'some word', `rank` = 4",
      " - `record string`: 'someone', `rank` = 3",
      " - `record string`: 'I know some guy', `rank` = 2",
      " - `record string`: 'awesome', `rank` = 1",
      "",
      " @default true"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseArrayListViewProps"
     },
     "optional": true
    }
   ]
  },
  "SearchResultItem": {
   "kind": "TypeAliasDeclaration",
   "name": "SearchResultItem",
   "value": "SearchResultItem<TItem>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "parents",
     "value": "undefined | [TItem]",
     "optional": true
    }
   ]
  },
  "LazyListViewProps": {
   "kind": "InterfaceDeclaration",
   "name": "LazyListViewProps",
   "value": "LazyListViewProps<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "api",
     "comment": [
      "A function to retrieve the data, asynchronously.",
      " This function usually performs a REST API call.",
      " API is used to retrieve lists of items.",
      " It is expected to:",
      " - be able to handle paging (via from/count params)",
      " - be able to retrieve specific items by the list of their ids",
      " - be able to retrieve children by parents (when getChildCount is specified, and ctx.parentId is passed)"
     ],
     "value": "LazyDataSourceApi<TItem, TId, TFilter>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "backgroundReload",
     "comment": [
      "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
      " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
      " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
      " It is required to add blockers/spinners to the components, built on your own.",
      " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "value": "undefined | false | true | 'implicit' | 'explicit'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "complexIds",
     "comment": [
      "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
      " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fetchStrategy",
     "comment": [
      "Defines how to fetch children:",
      " sequential (default) - fetch children for each parent one-by-one. Makes minimal over-querying, at cost of some speed.",
      " parallel - fetch children for several parents simultaneously. Can make a lot of over-querying for deep trees.",
      "      Recommended for 2 level trees (grouping), as it makes no over-querying in this case, and is faster than sequential strategy."
     ],
     "value": "undefined | 'sequential' | 'parallel'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "comment": [
      "A filter to pass to API.",
      " Note, that the DataSourceState also has a filter fields. These two filters are merged before API calls.",
      " Use this prop if you need to apply some filter in any case.",
      " Prefer to use filter in the DataSourceState for end-user editable filters."
     ],
     "value": "undefined | TFilter",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "flattenSearchResults",
     "comment": [
      "Falls back to plain list from tree, if there's search.",
      " Default is true.",
      "",
      " If enabled, and search is active:",
      " - API will be called with parentId and parent undefined",
      " - getChildCount is ignored, all nodes are assumed to have no children",
      "",
      " See more here: https://github.com/epam/UUI/issues/8"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getChildCount",
     "comment": [
      "Should return number of children of the item.",
      " If it returns > 0, the item is assumed to have children and to be foldable.",
      " Usually, this value should be returned from API.",
      "",
      " If you can't get number of children via API, you can return a guess value (avg number of children for this type of entity).",
      " Note, that this can lead to more API calls, and increased load times in the 'parallel' fetch mode.",
      " @param item"
     ],
     "value": "undefined | (item: TItem) => number",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "comment": [
      "Should return unique ID of the TItem",
      " If omitted, we assume that every TItem has and unique id in its 'id' field.",
      " @param item An item to get ID of"
     ],
     "value": "undefined | (item: TItem) => TId",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getParentId",
     "comment": [
      "Should return ID of the Item's parent. Usually it's i => i.parentId.",
      " If specified, Data Source will build items hierarchy.",
      "",
      " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
      " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
      "   to highlight parents with selected children",
      " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
      "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
     ],
     "value": "undefined | (item: TItem) => TId | undefined",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getRowOptions",
     "comment": [
      "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
      " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
      " See DataRowOptions for more details.",
      " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "value": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "Can be specified to unfold all or some items at start.",
      " If not specified, all rows would be folded."
     ],
     "value": "undefined | (item: TItem) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "legacyLoadDataBehavior",
     "comment": [
      "This options is added for the purpose of supporting legacy behavior of fetching data",
      " on `getVisibleRows` and `getListProps`, not to break users' own implementation of dataSources.",
      " @default true"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowOptions",
     "comment": [
      "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
      " See DataRowOptions for more details.",
      " If options depends on the item itself, use getRowOptions.",
      " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "value": "undefined | DataRowOptions<TItem, TId>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "comment": [
      "Enables or disables \"select all\" checkbox. Default is true."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    }
   ]
  },
  "AsyncListViewProps": {
   "kind": "InterfaceDeclaration",
   "name": "AsyncListViewProps",
   "value": "AsyncListViewProps<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "api",
     "value": "() => Promise<TItem[]>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "backgroundReload",
     "comment": [
      "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
      " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
      " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
      " It is required to add blockers/spinners to the components, built on your own.",
      " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "value": "undefined | false | true | 'implicit' | 'explicit'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "complexIds",
     "comment": [
      "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
      " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getFilter",
     "value": "undefined | (filter: TFilter) => (item: TItem) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseArrayListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "comment": [
      "Should return unique ID of the TItem",
      " If omitted, we assume that every TItem has and unique id in its 'id' field.",
      " @param item An item to get ID of"
     ],
     "value": "undefined | (item: TItem) => TId",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getParentId",
     "comment": [
      "Should return ID of the Item's parent. Usually it's i => i.parentId.",
      " If specified, Data Source will build items hierarchy.",
      "",
      " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
      " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
      "   to highlight parents with selected children",
      " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
      "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
     ],
     "value": "undefined | (item: TItem) => TId | undefined",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getRowOptions",
     "comment": [
      "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
      " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
      " See DataRowOptions for more details.",
      " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "value": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "value": "undefined | (item: TItem) => string[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseArrayListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "Can be specified to unfold all or some items at start.",
      " If not specified, all rows would be folded."
     ],
     "value": "undefined | (item: TItem) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowOptions",
     "comment": [
      "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
      " See DataRowOptions for more details.",
      " If options depends on the item itself, use getRowOptions.",
      " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "value": "undefined | DataRowOptions<TItem, TId>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "comment": [
      "Enables or disables \"select all\" checkbox. Default is true."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "value": "undefined | (item: TItem, sorting: SortingOption<any>) => any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseArrayListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "sortSearchByRelevance",
     "comment": [
      "Enables sorting of search results by relevance.",
      " - The highest priority has records, which have a full match with a search keyword.",
      " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
      " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
      " - And the lowest one - any other match of the search keyword.",
      "",
      " Example:",
      " - `search`: 'some'",
      " - `record string`: 'some word', `rank` = 4",
      " - `record string`: 'someone', `rank` = 3",
      " - `record string`: 'I know some guy', `rank` = 2",
      " - `record string`: 'awesome', `rank` = 1",
      "",
      " @default true"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseArrayListViewProps"
     },
     "optional": true
    }
   ]
  },
  "ApplyFilterOptions": {
   "kind": "InterfaceDeclaration",
   "name": "ApplyFilterOptions",
   "value": "ApplyFilterOptions<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "filter",
     "value": "undefined | TFilter",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getFilter",
     "value": "undefined | (filter: TFilter) => (item: TItem) => boolean",
     "optional": true
    }
   ]
  },
  "ApplySearchOptions": {
   "kind": "InterfaceDeclaration",
   "name": "ApplySearchOptions",
   "value": "ApplySearchOptions<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "getSearchFields",
     "value": "undefined | (item: TItem) => string[]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "sortSearchByRelevance",
     "value": "undefined | false | true",
     "optional": true
    }
   ]
  },
  "ApplySortOptions": {
   "kind": "InterfaceDeclaration",
   "name": "ApplySortOptions",
   "value": "ApplySortOptions<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "value": "undefined | (item: TItem, sorting: SortingOption<any>) => any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "sorting",
     "value": "undefined | SortingOption<any>[]",
     "optional": true
    }
   ]
  },
  "TreeNodeInfo": {
   "kind": "InterfaceDeclaration",
   "name": "TreeNodeInfo",
   "value": "TreeNodeInfo",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "count",
     "value": "undefined | number",
     "optional": true
    }
   ]
  },
  "LoadTreeOptions": {
   "kind": "InterfaceDeclaration",
   "name": "LoadTreeOptions",
   "value": "LoadTreeOptions<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "api",
     "comment": [
      "A function to retrieve the data, asynchronously.",
      " This function usually performs a REST API call.",
      " API is used to retrieve lists of items.",
      " It is expected to:",
      " - be able to handle paging (via from/count params)",
      " - be able to retrieve specific items by the list of their ids",
      " - be able to retrieve children by parents (when getChildCount is specified, and ctx.parentId is passed)"
     ],
     "value": "LazyDataSourceApi<TItem, TId, TFilter>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "LazyListViewProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "fetchStrategy",
     "comment": [
      "Defines how to fetch children:",
      " sequential (default) - fetch children for each parent one-by-one. Makes minimal over-querying, at cost of some speed.",
      " parallel - fetch children for several parents simultaneously. Can make a lot of over-querying for deep trees.",
      "      Recommended for 2 level trees (grouping), as it makes no over-querying in this case, and is faster than sequential strategy."
     ],
     "value": "undefined | 'sequential' | 'parallel'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "LazyListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "comment": [
      "A filter to pass to API.",
      " Note, that the DataSourceState also has a filter fields. These two filters are merged before API calls.",
      " Use this prop if you need to apply some filter in any case.",
      " Prefer to use filter in the DataSourceState for end-user editable filters."
     ],
     "value": "undefined | TFilter",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "LazyListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "flattenSearchResults",
     "comment": [
      "Falls back to plain list from tree, if there's search.",
      " Default is true.",
      "",
      " If enabled, and search is active:",
      " - API will be called with parentId and parent undefined",
      " - getChildCount is ignored, all nodes are assumed to have no children",
      "",
      " See more here: https://github.com/epam/UUI/issues/8"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "LazyListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getChildCount",
     "comment": [
      "Should return number of children of the item.",
      " If it returns > 0, the item is assumed to have children and to be foldable.",
      " Usually, this value should be returned from API.",
      "",
      " If you can't get number of children via API, you can return a guess value (avg number of children for this type of entity).",
      " Note, that this can lead to more API calls, and increased load times in the 'parallel' fetch mode.",
      " @param item"
     ],
     "value": "undefined | (item: TItem) => number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "LazyListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFolded",
     "value": "undefined | (item: TItem) => boolean",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "loadAllChildren",
     "value": "undefined | (id: TId) => boolean",
     "optional": true
    }
   ]
  },
  "TreeParams": {
   "kind": "InterfaceDeclaration",
   "name": "TreeParams",
   "value": "TreeParams<TItem, TId>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "complexIds",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "value": "undefined | (item: TItem) => TId",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getParentId",
     "value": "undefined | (item: TItem) => TId | undefined",
     "optional": true
    }
   ]
  },
  "ItemsComparator": {
   "kind": "TypeAliasDeclaration",
   "name": "ItemsComparator",
   "value": "ItemsComparator<TItem>"
  },
  "ITree": {
   "kind": "InterfaceDeclaration",
   "name": "ITree",
   "value": "ITree<TItem, TId>",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "cascadeSelection",
     "value": "(currentSelection: TId[], selectedId: TId | undefined, isSelected: boolean, options?: { isSelectable?: ((item: TItem) => boolean) | undefined; cascade?: CascadeSelection | undefined; } | undefined) => TId[]",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "clearStructure",
     "value": "() => ITree<TItem, TId>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "computeSubtotals",
     "value": "<TSubtotals>(get: (item: TItem, hasChildren: boolean) => TSubtotals, add: (a: TSubtotals, b: TSubtotals) => TSubtotals) => CompositeKeysMap<TId | undefined, TSubtotals> | Map<TId | undefined, TSubtotals>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "value": "<TFilter>(options: ITree<TItem, TId>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "forEach",
     "value": "(action: (item: TItem, id: TId, parentId: TId, stop: () => void) => void, options?: { direction?: 'bottom-up' | 'top-down' | undefined; parentId?: TId | undefined; includeParent?: boolean | undefined; } | undefined) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getById",
     "value": "(id: TId) => TItem | typeof NOT_FOUND_RECORD",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getChildren",
     "value": "(item: TItem) => TItem[]",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getChildrenByParentId",
     "value": "(parentId: TId) => TItem[]",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getChildrenIdsByParentId",
     "value": "(parentId: TId) => TId[]",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getNodeInfo",
     "value": "(id: TId) => TreeNodeInfo",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getParentIdsRecursive",
     "value": "(id: TId) => TId[]",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getParents",
     "value": "(id: TId) => TItem[]",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getPathById",
     "value": "(id: TId) => DataRowPathItem<TId, TItem>[]",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getPathItem",
     "value": "(item: TItem) => DataRowPathItem<TId, TItem>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getRootIds",
     "value": "() => TId[]",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getRootItems",
     "value": "() => TItem[]",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getTotalRecursiveCount",
     "value": "() => number",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "isFlatList",
     "value": "() => boolean",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "load",
     "value": "<TFilter>(options: ITree<TItem, TId>>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "loadMissing",
     "value": "<TFilter>(options: ITree<TItem, TId>>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "loadMissingIdsAndParents",
     "value": "<TFilter>(options: ITree<TItem, TId>>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "patch",
     "value": "(items: TItem[], isDeletedProp?: keyof TItem | undefined, comparator?: ITree<TItem, TId>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "search",
     "value": "<TFilter>(options: ITree<TItem, TId>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "sort",
     "value": "<TFilter>(options: ITree<TItem, TId>",
     "optional": false
    }
   ]
  },
  "ArrayDataSourceProps": {
   "kind": "InterfaceDeclaration",
   "name": "ArrayDataSourceProps",
   "value": "ArrayDataSourceProps<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "backgroundReload",
     "comment": [
      "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
      " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
      " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
      " It is required to add blockers/spinners to the components, built on your own.",
      " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "value": "undefined | false | true | 'implicit' | 'explicit'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "complexIds",
     "comment": [
      "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
      " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getFilter",
     "value": "undefined | (filter: TFilter) => (item: TItem) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseArrayListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "comment": [
      "Should return unique ID of the TItem",
      " If omitted, we assume that every TItem has and unique id in its 'id' field.",
      " @param item An item to get ID of"
     ],
     "value": "undefined | (item: TItem) => TId",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getParentId",
     "comment": [
      "Should return ID of the Item's parent. Usually it's i => i.parentId.",
      " If specified, Data Source will build items hierarchy.",
      "",
      " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
      " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
      "   to highlight parents with selected children",
      " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
      "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
     ],
     "value": "undefined | (item: TItem) => TId | undefined",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getRowOptions",
     "comment": [
      "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
      " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
      " See DataRowOptions for more details.",
      " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "value": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "value": "undefined | (item: TItem) => string[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseArrayListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "Can be specified to unfold all or some items at start.",
      " If not specified, all rows would be folded."
     ],
     "value": "undefined | (item: TItem) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "value": "undefined | TItem[] | ITree<TItem, TId>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ArrayListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowOptions",
     "comment": [
      "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
      " See DataRowOptions for more details.",
      " If options depends on the item itself, use getRowOptions.",
      " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "value": "undefined | DataRowOptions<TItem, TId>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "comment": [
      "Enables or disables \"select all\" checkbox. Default is true."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "value": "undefined | (item: TItem, sorting: SortingOption<any>) => any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseArrayListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "sortSearchByRelevance",
     "comment": [
      "Enables sorting of search results by relevance.",
      " - The highest priority has records, which have a full match with a search keyword.",
      " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
      " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
      " - And the lowest one - any other match of the search keyword.",
      "",
      " Example:",
      " - `search`: 'some'",
      " - `record string`: 'some word', `rank` = 4",
      " - `record string`: 'someone', `rank` = 3",
      " - `record string`: 'I know some guy', `rank` = 2",
      " - `record string`: 'awesome', `rank` = 1",
      "",
      " @default true"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseArrayListViewProps"
     },
     "optional": true
    }
   ]
  },
  "LazyDataSourceProps": {
   "kind": "InterfaceDeclaration",
   "name": "LazyDataSourceProps",
   "value": "LazyDataSourceProps<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "api",
     "comment": [
      "A function to retrieve the data, asynchronously.",
      " This function usually performs a REST API call.",
      " API is used to retrieve lists of items.",
      " It is expected to:",
      " - be able to handle paging (via from/count params)",
      " - be able to retrieve specific items by the list of their ids",
      " - be able to retrieve children by parents (when getChildCount is specified, and ctx.parentId is passed)"
     ],
     "value": "LazyDataSourceApi<TItem, TId, TFilter>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "LazyListViewProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "backgroundReload",
     "comment": [
      "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
      " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
      " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
      " It is required to add blockers/spinners to the components, built on your own.",
      " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "value": "undefined | false | true | 'implicit' | 'explicit'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "complexIds",
     "comment": [
      "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
      " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fetchStrategy",
     "comment": [
      "Defines how to fetch children:",
      " sequential (default) - fetch children for each parent one-by-one. Makes minimal over-querying, at cost of some speed.",
      " parallel - fetch children for several parents simultaneously. Can make a lot of over-querying for deep trees.",
      "      Recommended for 2 level trees (grouping), as it makes no over-querying in this case, and is faster than sequential strategy."
     ],
     "value": "undefined | 'sequential' | 'parallel'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "LazyListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "filter",
     "comment": [
      "A filter to pass to API.",
      " Note, that the DataSourceState also has a filter fields. These two filters are merged before API calls.",
      " Use this prop if you need to apply some filter in any case.",
      " Prefer to use filter in the DataSourceState for end-user editable filters."
     ],
     "value": "undefined | TFilter",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "LazyListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "flattenSearchResults",
     "comment": [
      "Falls back to plain list from tree, if there's search.",
      " Default is true.",
      "",
      " If enabled, and search is active:",
      " - API will be called with parentId and parent undefined",
      " - getChildCount is ignored, all nodes are assumed to have no children",
      "",
      " See more here: https://github.com/epam/UUI/issues/8"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "LazyListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getChildCount",
     "comment": [
      "Should return number of children of the item.",
      " If it returns > 0, the item is assumed to have children and to be foldable.",
      " Usually, this value should be returned from API.",
      "",
      " If you can't get number of children via API, you can return a guess value (avg number of children for this type of entity).",
      " Note, that this can lead to more API calls, and increased load times in the 'parallel' fetch mode.",
      " @param item"
     ],
     "value": "undefined | (item: TItem) => number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "LazyListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "comment": [
      "Should return unique ID of the TItem",
      " If omitted, we assume that every TItem has and unique id in its 'id' field.",
      " @param item An item to get ID of"
     ],
     "value": "undefined | (item: TItem) => TId",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getParentId",
     "comment": [
      "Should return ID of the Item's parent. Usually it's i => i.parentId.",
      " If specified, Data Source will build items hierarchy.",
      "",
      " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
      " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
      "   to highlight parents with selected children",
      " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
      "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
     ],
     "value": "undefined | (item: TItem) => TId | undefined",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getRowOptions",
     "comment": [
      "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
      " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
      " See DataRowOptions for more details.",
      " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "value": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "Can be specified to unfold all or some items at start.",
      " If not specified, all rows would be folded."
     ],
     "value": "undefined | (item: TItem) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "legacyLoadDataBehavior",
     "comment": [
      "This options is added for the purpose of supporting legacy behavior of fetching data",
      " on `getVisibleRows` and `getListProps`, not to break users' own implementation of dataSources.",
      " @default true"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "LazyListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowOptions",
     "comment": [
      "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
      " See DataRowOptions for more details.",
      " If options depends on the item itself, use getRowOptions.",
      " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "value": "undefined | DataRowOptions<TItem, TId>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "comment": [
      "Enables or disables \"select all\" checkbox. Default is true."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    }
   ]
  },
  "AsyncDataSourceProps": {
   "kind": "InterfaceDeclaration",
   "name": "AsyncDataSourceProps",
   "value": "AsyncDataSourceProps<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "api",
     "value": "() => Promise<TItem[]>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "AsyncListViewProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "backgroundReload",
     "comment": [
      "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
      " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
      " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
      " It is required to add blockers/spinners to the components, built on your own.",
      " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cascadeSelection",
     "comment": [
      "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      " - false: All nodes are selected independently (default).",
      " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      " - 'implicit': Selecting a parent node means that all children are considered checked.",
      "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
     ],
     "value": "undefined | false | true | 'implicit' | 'explicit'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "complexIds",
     "comment": [
      "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
      " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getFilter",
     "value": "undefined | (filter: TFilter) => (item: TItem) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseArrayListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getId",
     "comment": [
      "Should return unique ID of the TItem",
      " If omitted, we assume that every TItem has and unique id in its 'id' field.",
      " @param item An item to get ID of"
     ],
     "value": "undefined | (item: TItem) => TId",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getParentId",
     "comment": [
      "Should return ID of the Item's parent. Usually it's i => i.parentId.",
      " If specified, Data Source will build items hierarchy.",
      "",
      " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
      " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
      "   to highlight parents with selected children",
      " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
      "   We need to load parents with a separate call (if backend doesn't pre-fetch them)"
     ],
     "value": "undefined | (item: TItem) => TId | undefined",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getRowOptions",
     "comment": [
      "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
      " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
      " See DataRowOptions for more details.",
      " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "value": "undefined | (item: TItem, index: number) => DataRowOptions<TItem, TId>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "value": "undefined | (item: TItem) => string[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseArrayListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "isFoldedByDefault",
     "comment": [
      "Can be specified to unfold all or some items at start.",
      " If not specified, all rows would be folded."
     ],
     "value": "undefined | (item: TItem) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowOptions",
     "comment": [
      "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
      " See DataRowOptions for more details.",
      " If options depends on the item itself, use getRowOptions.",
      " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
      " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      " @param item An item to get options for"
     ],
     "value": "undefined | DataRowOptions<TItem, TId>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "comment": [
      "Enables or disables \"select all\" checkbox. Default is true."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseListViewProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "sortBy",
     "value": "undefined | (item: TItem, sorting: SortingOption<any>) => any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseArrayListViewProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "sortSearchByRelevance",
     "comment": [
      "Enables sorting of search results by relevance.",
      " - The highest priority has records, which have a full match with a search keyword.",
      " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
      " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
      " - And the lowest one - any other match of the search keyword.",
      "",
      " Example:",
      " - `search`: 'some'",
      " - `record string`: 'some word', `rank` = 4",
      " - `record string`: 'someone', `rank` = 3",
      " - `record string`: 'I know some guy', `rank` = 2",
      " - `record string`: 'awesome', `rank` = 1",
      "",
      " @default true"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseArrayListViewProps"
     },
     "optional": true
    }
   ]
  },
  "ListApiSettings": {
   "kind": "InterfaceDeclaration",
   "name": "ListApiSettings",
   "value": "ListApiSettings<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "api",
     "comment": [
      "Lazy List API used to fetch items"
     ],
     "value": "LazyDataSourceApi<TItem, TId, TFilter>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "getId",
     "comment": [
      "Get ID from an item. Id is expected to be value-type, i.e. can be used as Map's key"
     ],
     "value": "(item: TItem) => TId",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "onUpdate",
     "comment": [
      "Will be called after new data is fetched into the list"
     ],
     "value": "undefined | () => void",
     "optional": true
    }
   ]
  },
  "ListApiResponse": {
   "kind": "InterfaceDeclaration",
   "name": "ListApiResponse",
   "value": "ListApiResponse<TItem>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "items",
     "comment": [
      "Items according to the request. For items that are not fetched yet, null will be returned."
     ],
     "value": "TItem[]",
     "optional": false
    }
   ]
  },
  "ArrayElement": {
   "kind": "TypeAliasDeclaration",
   "name": "ArrayElement",
   "value": "ArrayElement<ArrayType>"
  },
  "ILens": {
   "kind": "InterfaceDeclaration",
   "name": "ILens",
   "value": "ILens<TFocused>",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "default",
     "value": "(value: TFocused) => ILens<TFocused>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "get",
     "value": "() => TFocused",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "index",
     "value": "(index: number) => ArrayElement<TFocused>>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onChange",
     "value": "(fn: (oldValue: TFocused, newValue: TFocused) => TFocused) => ILens<TFocused>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "prop",
     "value": "<K extends keyof TFocused>(name: K) => ILens<NonNullable<TFocused[K]>>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "set",
     "value": "(value: TFocused) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "toProps",
     "value": "() => IEditable<TFocused>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "update",
     "value": "(fn: (current: TFocused) => TFocused) => void",
     "optional": false
    }
   ]
  },
  "FormSaveResponse": {
   "kind": "InterfaceDeclaration",
   "name": "FormSaveResponse",
   "value": "FormSaveResponse<T>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "form",
     "value": "undefined | T",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validation",
     "value": "undefined | ICanBeInvalid",
     "optional": true
    }
   ]
  },
  "FormProps": {
   "kind": "InterfaceDeclaration",
   "name": "FormProps",
   "value": "FormProps<T>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "beforeLeave",
     "comment": [
      "Called when form is unmounted, but user still have unsaved changes.",
      " Accepts a Promise<boolean> to be returned. If promise resolves to true - save procedure is performed.",
      " The common use-case is to show a modal with \"Save Changes?\" dialog",
      " Skins usually implement this as default behavior. To prevent it, you can pass null to this prop to override it."
     ],
     "value": "undefined | null | () => Promise<boolean>",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getMetadata",
     "comment": [
      "Returns form metadata - information used to validate the form.",
      " @param state Metadata can depend on state, and will be re-computed on updates"
     ],
     "value": "undefined | (state: T) => Metadata<T>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "loadUnsavedChanges",
     "comment": [
      "Used to restore unsaved user edits from the last session (usually to localstorage, via uuiUserSettings context)",
      " If unsaved changes are detected, this callback is called. If it is resolved - the form restores unsaved edits.",
      " The common use-case is to show a modal with \"You have unsaved changes, restore them?\" dialog",
      " Skins usually implement this as default behavior. To prevent it, you can pass null to this prop to override it."
     ],
     "value": "undefined | () => Promise<void>",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onError",
     "comment": [
      "Called when save fails"
     ],
     "value": "undefined | (error: any) => any",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onSave",
     "comment": [
      "Occurs when 'save' function is called on Form.",
      " Should save form data (usually with API call to server).",
      " Server can also reject form, and provide validation errors in response.",
      " @param state Form state to save"
     ],
     "value": "(state: T) => Promise<void | FormSaveResponse<T>>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onSuccess",
     "comment": [
      "Called after successful save.",
      " @param state Saved state",
      " @param isSavedBeforeLeave true, if save is triggered via leaving the page, and \"Save Changes?\" dialog"
     ],
     "value": "undefined | (state: T, isSavedBeforeLeave?: boolean | undefined) => any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderForm",
     "comment": [
      "Render the form body, provided by form state"
     ],
     "value": "(props: IFormApi<T>) => React.ReactNode",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "settingsKey",
     "comment": [
      "The key, under which form save unsaved state usually to localstorage, via uuiUserSettings context)"
     ],
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationOn",
     "comment": [
      "Controls when form validation occurs:",
      " save (default, recommended) - form is validated on save. If form is invalid - it will be revalidated on every change, until become valid",
      " change - form is validated on every user change. Only fields changes in current edit session are validated"
     ],
     "value": "undefined | 'change' | 'save'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "Current value of the form state"
     ],
     "value": "T",
     "optional": false
    }
   ]
  },
  "IFormApi": {
   "kind": "InterfaceDeclaration",
   "name": "IFormApi",
   "value": "IFormApi<T>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "canRedo",
     "comment": [
      "True if there are changes to redo"
     ],
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "canRevert",
     "comment": [
      "True if there are changes to revers"
     ],
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "canUndo",
     "comment": [
      "True if there are changes to undo"
     ],
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "close",
     "comment": [
      "Try to leave form and ask to save unsaved changes"
     ],
     "value": "() => Promise<any>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isChanged",
     "comment": [
      "True if form is changed since the initial state, or the last save"
     ],
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInProgress",
     "comment": [
      "True if save is in progress"
     ],
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "lens",
     "comment": [
      "Lens - a helper to split parts of the form state, validation, and setState callbacks, and pass this to components"
     ],
     "value": "ILens<T>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "redo",
     "comment": [
      "Redo last action"
     ],
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "replaceValue",
     "comment": [
      "Replaces form value. The signature is the same for setState in React.useState - either new value, or callback to update the value.",
      " The change is not threated as user input - it replaces last changed state, and doesn't create undo checkpoint."
     ],
     "value": "(s: React.SetStateAction<T>) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "revert",
     "comment": [
      "Reverts all changes up to the initial or last saved state"
     ],
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "save",
     "comment": [
      "Triggers save procedure - validation, calling props.onSave, and processing results"
     ],
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "setValue",
     "comment": [
      "Sets form value. The signature is the same for setState in React.useState - either new value, or callback to update the value.",
      " The change is threated as user input - sets isChanged and creates undo endpoint"
     ],
     "value": "(s: React.SetStateAction<T>) => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "undo",
     "comment": [
      "Undo to last checkpoint"
     ],
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "validate",
     "comment": [
      "Forces form to validate value.",
      " Validation is usually done automatically, according to validationOn prop.",
      " Use this method only in corner cases."
     ],
     "value": "() => ICanBeInvalid",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "FormState": {
   "kind": "InterfaceDeclaration",
   "name": "FormState",
   "value": "FormState<T>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "form",
     "value": "T",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "formHistory",
     "value": "T[]",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "historyIndex",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isChanged",
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInProgress",
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isInSaveMode",
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "lastSentForm",
     "value": "undefined | T",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "serverValidationState",
     "value": "ICanBeInvalid",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationState",
     "value": "ICanBeInvalid",
     "optional": false
    }
   ]
  },
  "UseFormProps": {
   "value": "UseFormProps<T>",
   "name": "UseFormProps",
   "kind": "TypeAliasDeclaration"
  },
  "ValidationMode": {
   "kind": "TypeAliasDeclaration",
   "name": "ValidationMode",
   "value": "'change' | 'save'"
  },
  "UuiRecoveryErrorInfo": {
   "kind": "TypeAliasDeclaration",
   "name": "UuiRecoveryErrorInfo",
   "value": "UuiRecoveryErrorInfo",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "subtitle",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "title",
     "value": "string",
     "optional": false
    }
   ]
  },
  "ApiCallErrorType": {
   "kind": "TypeAliasDeclaration",
   "name": "ApiCallErrorType",
   "value": "'permissionDenied' | 'notFound' | 'serverError' | 'serviceUnavailable' | 'default'"
  },
  "UseUuiErrorOptions": {
   "kind": "InterfaceDeclaration",
   "name": "UseUuiErrorOptions",
   "value": "UseUuiErrorOptions",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "errorConfig",
     "value": "undefined | Record<UuiErrorInfo>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "recoveryConfig",
     "value": "undefined | Record<UuiRecoveryErrorInfo>",
     "optional": true
    }
   ]
  },
  "UseUuiErrorProps": {
   "kind": "InterfaceDeclaration",
   "name": "UseUuiErrorProps",
   "value": "UseUuiErrorProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "getErrorInfo",
     "value": "(error: any, defaultErrorInfo: UuiErrorInfo",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "options",
     "value": "undefined | UseUuiErrorOptions",
     "optional": true
    }
   ]
  },
  "UuiServicesProps": {
   "kind": "InterfaceDeclaration",
   "name": "UuiServicesProps",
   "value": "UuiServicesProps<TApi>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "apiDefinition",
     "value": "undefined | (processRequest: IProcessRequest) => TApi",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "apiPingPath",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ApiContextProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "apiReloginPath",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ApiContextProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "apiServerUrl",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ApiContextProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "skinContext",
     "value": "undefined | ISkin",
     "optional": true
    }
   ]
  },
  "UseUuiServicesProps": {
   "kind": "InterfaceDeclaration",
   "name": "UseUuiServicesProps",
   "value": "UseUuiServicesProps<TApi, TAppContext>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "apiDefinition",
     "value": "undefined | (processRequest: IProcessRequest) => TApi",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UuiServicesProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "apiPingPath",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ApiContextProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "apiReloginPath",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ApiContextProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "apiServerUrl",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ApiContextProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "appContext",
     "value": "undefined | TAppContext",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "router",
     "value": "IRouterContext",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "skinContext",
     "value": "undefined | ISkin",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UuiServicesProps"
     },
     "optional": true
    }
   ]
  },
  "UseTableStateHookParams": {
   "kind": "InterfaceDeclaration",
   "name": "UseTableStateHookParams",
   "value": "UseTableStateHookParams<TFilter, TViewState>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "columns",
     "comment": [
      "Columns configuration, can be omitted if used without tables"
     ],
     "value": "undefined | DataColumnProps<any, any, any>[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UseTableStateHookBaseParams"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "filters",
     "comment": [
      "Filters configuration, can be omitted if you don't need filters"
     ],
     "value": "undefined | TableFiltersConfig<TFilter>[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UseTableStateHookBaseParams"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "initialPresets",
     "comment": [
      "Initial presets array"
     ],
     "value": "undefined | ITablePreset<TFilter, TViewState>[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UseTableStateHookBaseParams"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onPresetCreate",
     "comment": [
      "Called when preset was created. Should return the ID of new preset"
     ],
     "value": "undefined | (preset: ITablePreset<TFilter, TViewState>) => Promise<number>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UseTableStateHookBaseParams"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onPresetDelete",
     "comment": [
      "Called when preset was deleted"
     ],
     "value": "undefined | (preset: ITablePreset<TFilter, TViewState>) => Promise<void>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UseTableStateHookBaseParams"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onPresetUpdate",
     "comment": [
      "Called when preset was updated"
     ],
     "value": "undefined | (preset: ITablePreset<TFilter, TViewState>) => Promise<void>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UseTableStateHookBaseParams"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "IContextProviderSsrProps": {
   "kind": "InterfaceDeclaration",
   "name": "IContextProviderSsrProps",
   "value": "IContextProviderSsrProps<TApi, TAppContext>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "apiDefinition",
     "value": "undefined | (processRequest: IProcessRequest) => TApi",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UuiServicesProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "apiPingPath",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ApiContextProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "apiReloginPath",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ApiContextProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "apiServerUrl",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ApiContextProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "appContext",
     "value": "undefined | TAppContext",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UseUuiServicesProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "router",
     "value": "any",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "skinContext",
     "value": "undefined | ISkin",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "UuiServicesProps"
     },
     "optional": true
    }
   ]
  }
 },
 "@epam/uui-components": {
  "TextProps": {
   "kind": "TypeAliasDeclaration",
   "name": "TextProps",
   "value": "TextProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    }
   ]
  },
  "FlexSpacerProps": {
   "kind": "InterfaceDeclaration",
   "name": "FlexSpacerProps",
   "value": "FlexSpacerProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "collapseToMore",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "estimatedWidth",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "showInBurgerMenu",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    }
   ]
  },
  "AccordionProps": {
   "kind": "TypeAliasDeclaration",
   "name": "AccordionProps",
   "value": "GeneralAccordionProps | EditableAccordionProps"
  },
  "AccordionState": {
   "kind": "InterfaceDeclaration",
   "name": "AccordionState",
   "value": "AccordionState",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "opened",
     "value": "false | true",
     "optional": false
    }
   ]
  },
  "VirtualListRenderRowsParams": {
   "kind": "InterfaceDeclaration",
   "name": "VirtualListRenderRowsParams",
   "value": "VirtualListRenderRowsParams<List>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "estimatedHeight",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "listContainerRef",
     "value": "React.MutableRefObject<List>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "offsetY",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "scrollShadows",
     "value": "{ verticalTop: boolean; verticalBottom: boolean; horizontalLeft: boolean; horizontalRight: boolean; }",
     "optional": false
    }
   ]
  },
  "VirtualListProps": {
   "kind": "TypeAliasDeclaration",
   "name": "VirtualListProps",
   "value": "BaseVirtualListProps<ScrollContainer> & { rows?: React.ReactNode[] | undefined; renderRows: (config: VirtualListRenderRowsParams<List>) => React.ReactNode; } | BaseVirtualListProps<ScrollContainer> & { rows: React.ReactNode[]; renderRows?: ((config: VirtualListRenderRowsParams<List>) => React.ReactNode) | undefined; }"
  },
  "LabeledInputProps": {
   "kind": "InterfaceDeclaration",
   "name": "LabeledInputProps",
   "value": "LabeledInputProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "htmlFor",
     "comment": [
      "HTML 'for' tag to bind the label to a component.",
      " Can be used when component can't be wrapped by the LabeledInput, e.g. when form is layed out as table with labels and inputs placed into different columns"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "LabeledInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "info",
     "comment": [
      "Info hint text to show in tooltip"
     ],
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "LabeledInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "infoIcon",
     "comment": [
      "Overrides the default info icon"
     ],
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOptional",
     "comment": [
      "Marks related field as optional"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "LabeledInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasLabel"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "labelPosition",
     "comment": [
      "Position of the label, relative to the wrapped component (top of left)"
     ],
     "value": "undefined | 'top' | 'left'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "LabeledInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "Tooltip",
     "comment": [
      "Overrides the default Tooltip component to use for info tooltip"
     ],
     "value": "undefined | React.ComponentClass<TooltipProps, any> | React.FunctionComponent<TooltipProps>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    }
   ]
  },
  "ControlIconProps": {
   "kind": "InterfaceDeclaration",
   "name": "ControlIconProps",
   "value": "ControlIconProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "flipY",
     "comment": [
      "Flips the icon vertically"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon to display"
     ],
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Click handler"
     ],
     "value": "undefined | (e: React.SyntheticEvent<HTMLDivElement, Event>) => void",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rotate",
     "comment": [
      "Rotate the icon (cw stands for 'clock-wise', ccw stands for 'counter clock-wise))"
     ],
     "value": "undefined | '0' | '90cw' | '180' | '90ccw'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "comment": [
      "Icon size in pixels (both width and height, as icons are assumed to be square-shaped)"
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "comment": [
      "CSS style prop to put on the component"
     ],
     "value": "undefined | React.CSSProperties",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    }
   ]
  },
  "RadioGroupItem": {
   "kind": "InterfaceDeclaration",
   "name": "RadioGroupItem",
   "value": "RadioGroupItem<TValue>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "TValue",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderName",
     "value": "undefined | () => React.ReactNode",
     "optional": true
    }
   ]
  },
  "RadioGroupProps": {
   "kind": "InterfaceDeclaration",
   "name": "RadioGroupProps",
   "value": "RadioGroupProps<TValue>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "direction",
     "value": "undefined | 'vertical' | 'horizontal'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasDirection"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "value": "RadioGroupItem<TValue>[]",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "RadioInput",
     "value": "undefined | React.ComponentClass<RadioInputProps, any> | React.FunctionComponent<RadioInputProps>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "radioInputProps",
     "value": "undefined | RadioInputProps & { key: React.Key; }",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "CheckboxGroupProps": {
   "kind": "InterfaceDeclaration",
   "name": "CheckboxGroupProps",
   "value": "CheckboxGroupProps<TValue>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "CheckboxInput",
     "comment": [
      "Overrides the component to render a single checkbox"
     ],
     "value": "undefined | React.ComponentClass<CheckboxProps, any> | React.FunctionComponent<CheckboxProps>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "direction",
     "value": "undefined | 'vertical' | 'horizontal'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasDirection"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "comment": [
      "Each item defines: name: string, id: TValue (which item to put into array when item is checked), renderName() - an alternative to passing name"
     ],
     "value": "CheckboxGroupItem<TValue>[]",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "ControlGroupProps": {
   "kind": "InterfaceDeclaration",
   "name": "ControlGroupProps",
   "value": "ControlGroupProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    }
   ]
  },
  "TreeListItem": {
   "kind": "InterfaceDeclaration",
   "name": "TreeListItem",
   "value": "TreeListItem",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "data",
     "value": "undefined | TreeListItem",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "parentId",
     "value": "undefined | string",
     "optional": true
    }
   ]
  },
  "TreeProps": {
   "kind": "InterfaceDeclaration",
   "name": "TreeProps",
   "value": "TreeProps<TItem>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getSearchFields",
     "value": "undefined | (item: TItem) => string[]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "value": "TreeListItem[]",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "renderRow",
     "value": "(row: DataRowProps<TItem, string>) => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "BlockerProps": {
   "kind": "InterfaceDeclaration",
   "name": "BlockerProps",
   "value": "BlockerProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "hideSpinner",
     "comment": [
      "Disables spinner animation display"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isEnabled",
     "comment": [
      "Turns the blocker on or off"
     ],
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderSpinner",
     "comment": [
      "Replaces default spinner"
     ],
     "value": "undefined | (props: any) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "spacerHeight",
     "comment": [
      "Sets the minimal height in px, for cases when blocked content is empty"
     ],
     "value": "undefined | number",
     "optional": true
    }
   ]
  },
  "ScrollbarProps": {
   "kind": "InterfaceDeclaration",
   "name": "ScrollbarProps",
   "value": "ScrollbarProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "'aria-activedescendant'",
     "comment": [
      "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-atomic'",
     "comment": [
      "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-autocomplete'",
     "comment": [
      "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be",
      " presented if they are made."
     ],
     "value": "undefined | 'list' | 'none' | 'inline' | 'both'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-busy'",
     "comment": [
      "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-checked'",
     "comment": [
      "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.",
      " @see aria-pressed @see aria-selected."
     ],
     "value": "undefined | false | true | 'true' | 'false' | 'mixed'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-colcount'",
     "comment": [
      "Defines the total number of columns in a table, grid, or treegrid.",
      " @see aria-colindex."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-colindex'",
     "comment": [
      "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.",
      " @see aria-colcount @see aria-colspan."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-colspan'",
     "comment": [
      "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.",
      " @see aria-colindex @see aria-rowspan."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-controls'",
     "comment": [
      "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
      " @see aria-owns."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-current'",
     "comment": [
      "Indicates the element that represents the current item within a container or set of related elements."
     ],
     "value": "undefined | false | true | 'step' | 'true' | 'false' | 'page' | 'location' | 'date' | 'time'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-describedby'",
     "comment": [
      "Identifies the element (or elements) that describes the object.",
      " @see aria-labelledby"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-details'",
     "comment": [
      "Identifies the element that provides a detailed, extended description for the object.",
      " @see aria-describedby."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-disabled'",
     "comment": [
      "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.",
      " @see aria-hidden @see aria-readonly."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-dropeffect'",
     "comment": [
      "Indicates what functions can be performed when a dragged object is released on the drop target.",
      " @deprecated in ARIA 1.1"
     ],
     "value": "undefined | 'link' | 'none' | 'copy' | 'execute' | 'move' | 'popup'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-errormessage'",
     "comment": [
      "Identifies the element that provides an error message for the object.",
      " @see aria-invalid @see aria-describedby."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-expanded'",
     "comment": [
      "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-flowto'",
     "comment": [
      "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,",
      " allows assistive technology to override the general default of reading in document source order."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-grabbed'",
     "comment": [
      "Indicates an element's \"grabbed\" state in a drag-and-drop operation.",
      " @deprecated in ARIA 1.1"
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-haspopup'",
     "comment": [
      "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
     ],
     "value": "undefined | false | true | 'true' | 'false' | 'dialog' | 'grid' | 'listbox' | 'menu' | 'tree'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-hidden'",
     "comment": [
      "Indicates whether the element is exposed to an accessibility API.",
      " @see aria-disabled."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-invalid'",
     "comment": [
      "Indicates the entered value does not conform to the format expected by the application.",
      " @see aria-errormessage."
     ],
     "value": "undefined | false | true | 'true' | 'false' | 'grammar' | 'spelling'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-keyshortcuts'",
     "comment": [
      "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-label'",
     "comment": [
      "Defines a string value that labels the current element.",
      " @see aria-labelledby."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-labelledby'",
     "comment": [
      "Identifies the element (or elements) that labels the current element.",
      " @see aria-describedby."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-level'",
     "comment": [
      "Defines the hierarchical level of an element within a structure."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-live'",
     "comment": [
      "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
     ],
     "value": "undefined | 'off' | 'assertive' | 'polite'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-modal'",
     "comment": [
      "Indicates whether an element is modal when displayed."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-multiline'",
     "comment": [
      "Indicates whether a text box accepts multiple lines of input or only a single line."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-multiselectable'",
     "comment": [
      "Indicates that the user may select more than one item from the current selectable descendants."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-orientation'",
     "comment": [
      "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
     ],
     "value": "undefined | 'vertical' | 'horizontal'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-owns'",
     "comment": [
      "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship",
      " between DOM elements where the DOM hierarchy cannot be used to represent the relationship.",
      " @see aria-controls."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-placeholder'",
     "comment": [
      "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.",
      " A hint could be a sample value or a brief description of the expected format."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-posinset'",
     "comment": [
      "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
      " @see aria-setsize."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-pressed'",
     "comment": [
      "Indicates the current \"pressed\" state of toggle buttons.",
      " @see aria-checked @see aria-selected."
     ],
     "value": "undefined | false | true | 'true' | 'false' | 'mixed'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-readonly'",
     "comment": [
      "Indicates that the element is not editable, but is otherwise operable.",
      " @see aria-disabled."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-relevant'",
     "comment": [
      "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.",
      " @see aria-atomic."
     ],
     "value": "undefined | 'text' | 'additions' | 'additions removals' | 'additions text' | 'all' | 'removals' | 'removals additions' | 'removals text' | 'text additions' | 'text removals'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-required'",
     "comment": [
      "Indicates that user input is required on the element before a form may be submitted."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-roledescription'",
     "comment": [
      "Defines a human-readable, author-localized description for the role of an element."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-rowcount'",
     "comment": [
      "Defines the total number of rows in a table, grid, or treegrid.",
      " @see aria-rowindex."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-rowindex'",
     "comment": [
      "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.",
      " @see aria-rowcount @see aria-rowspan."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-rowspan'",
     "comment": [
      "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.",
      " @see aria-rowindex @see aria-colspan."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-selected'",
     "comment": [
      "Indicates the current \"selected\" state of various widgets.",
      " @see aria-checked @see aria-pressed."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-setsize'",
     "comment": [
      "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
      " @see aria-posinset."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-sort'",
     "comment": [
      "Indicates if items in a table or grid are sorted in ascending or descending order."
     ],
     "value": "undefined | 'none' | 'ascending' | 'descending' | 'other'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-valuemax'",
     "comment": [
      "Defines the maximum allowed value for a range widget."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-valuemin'",
     "comment": [
      "Defines the minimum allowed value for a range widget."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-valuenow'",
     "comment": [
      "Defines the current value for a range widget.",
      " @see aria-valuetext."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-valuetext'",
     "comment": [
      "Defines the human readable text alternative of aria-valuenow for a range widget."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "about",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "accept",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "acceptCharset",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "accessKey",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "action",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "allowFullScreen",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "allowTransparency",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "alt",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "as",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "async",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoCapitalize",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoComplete",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoCorrect",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoHeight",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoHeightMax",
     "value": "undefined | string | number",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoHeightMin",
     "value": "undefined | string | number",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoHide",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoHideDuration",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoHideTimeout",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoPlay",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoSave",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "capture",
     "value": "undefined | false | true | 'user' | 'environment'",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cellPadding",
     "value": "undefined | string | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cellSpacing",
     "value": "undefined | string | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "challenge",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "charSet",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "checked",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cite",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "classID",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "className",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cols",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "colSpan",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "content",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "contentEditable",
     "value": "undefined | false | true | 'true' | 'false' | 'inherit'",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "contextMenu",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "controls",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "coords",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "crossOrigin",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dangerouslySetInnerHTML",
     "value": "undefined | { __html: string; }",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "data",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "datatype",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dateTime",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "default",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "defaultChecked",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "defaultValue",
     "value": "undefined | string | number | readonly string[]",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "defer",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dir",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disabled",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableScroll",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "download",
     "value": "any",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "draggable",
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "encType",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "form",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "formAction",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "formEncType",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "formMethod",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "formNoValidate",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "formTarget",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "frameBorder",
     "value": "undefined | string | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "hasBottomShadow",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "hasTopShadow",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "headers",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "height",
     "value": "undefined | string | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "hidden",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "hideTracksWhenNotNeeded",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "high",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "hrefLang",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "htmlFor",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "httpEquiv",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inlist",
     "value": "any",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputMode",
     "comment": [
      "Hints at the type of data that might be entered by the user while editing the element or its contents",
      " @see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute"
     ],
     "value": "undefined | 'none' | 'search' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal'",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "integrity",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "is",
     "comment": [
      "Specify that a standard HTML element should behave like a defined custom built-in element",
      " @see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "itemID",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "itemProp",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "itemRef",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "itemScope",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "itemType",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "undefined | null | string | number",
     "inheritedFrom": {
      "name": "Attributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "keyParams",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "keyType",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "kind",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "lang",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "list",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "loop",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "low",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "manifest",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "marginHeight",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "marginWidth",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "max",
     "value": "undefined | string | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "media",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "mediaGroup",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "method",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "min",
     "value": "undefined | string | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "minLength",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "multiple",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "muted",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "nonce",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "noValidate",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAbort",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAbortCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationEnd",
     "value": "undefined | React.AnimationEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationEndCapture",
     "value": "undefined | React.AnimationEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationIteration",
     "value": "undefined | React.AnimationEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationIterationCapture",
     "value": "undefined | React.AnimationEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationStart",
     "value": "undefined | React.AnimationEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationStartCapture",
     "value": "undefined | React.AnimationEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAuxClick",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAuxClickCapture",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBeforeInput",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBeforeInputCapture",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "value": "undefined | React.FocusEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlurCapture",
     "value": "undefined | React.FocusEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCanPlay",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCanPlayCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCanPlayThrough",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCanPlayThroughCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onChange",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onChangeCapture",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onClick",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onClickCapture",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionEnd",
     "value": "undefined | React.CompositionEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionEndCapture",
     "value": "undefined | React.CompositionEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionStart",
     "value": "undefined | React.CompositionEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionStartCapture",
     "value": "undefined | React.CompositionEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionUpdate",
     "value": "undefined | React.CompositionEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionUpdateCapture",
     "value": "undefined | React.CompositionEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onContextMenu",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onContextMenuCapture",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCopy",
     "value": "undefined | React.ClipboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCopyCapture",
     "value": "undefined | React.ClipboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCut",
     "value": "undefined | React.ClipboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCutCapture",
     "value": "undefined | React.ClipboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDoubleClick",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDoubleClickCapture",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDrag",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragCapture",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragEnd",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragEndCapture",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragEnter",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragEnterCapture",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragExit",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragExitCapture",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragLeave",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragLeaveCapture",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragOver",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragOverCapture",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragStart",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragStartCapture",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDrop",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDropCapture",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDurationChange",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDurationChangeCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onEmptied",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onEmptiedCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onEncrypted",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onEncryptedCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onEnded",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onEndedCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onError",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onErrorCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "value": "undefined | React.FocusEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocusCapture",
     "value": "undefined | React.FocusEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onGotPointerCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onGotPointerCaptureCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onInput",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onInputCapture",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onInvalid",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onInvalidCapture",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyDown",
     "value": "undefined | React.KeyboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyDownCapture",
     "value": "undefined | React.KeyboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyPress",
     "comment": [
      "@deprecated"
     ],
     "value": "undefined | React.KeyboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyPressCapture",
     "comment": [
      "@deprecated"
     ],
     "value": "undefined | React.KeyboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyUp",
     "value": "undefined | React.KeyboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyUpCapture",
     "value": "undefined | React.KeyboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLoad",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadedData",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadedDataCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadedMetadata",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadedMetadataCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadStart",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadStartCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLostPointerCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLostPointerCaptureCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseDown",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseDownCapture",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseEnter",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseLeave",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseMove",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseMoveCapture",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseOut",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseOutCapture",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseOver",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseOverCapture",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseUp",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseUpCapture",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPaste",
     "value": "undefined | React.ClipboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPasteCapture",
     "value": "undefined | React.ClipboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPause",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPauseCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPlay",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPlayCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPlaying",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPlayingCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerCancel",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerCancelCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerDown",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerDownCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerEnter",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerEnterCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerLeave",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerLeaveCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerMove",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerMoveCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerOut",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerOutCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerOver",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerOverCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerUp",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerUpCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onProgress",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onProgressCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onRateChange",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onRateChangeCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onReset",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onResetCapture",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onResize",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onResizeCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onScroll",
     "value": "undefined | React.UIEventHandler<any>",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onScrollCapture",
     "value": "undefined | React.UIEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onScrollFrame",
     "value": "undefined | (values: ReactCustomScrollbars.positionValues) => void",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onScrollStart",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onScrollStop",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSeeked",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSeekedCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSeeking",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSeekingCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSelect",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSelectCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onStalled",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onStalledCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSubmit",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSubmitCapture",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSuspend",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSuspendCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTimeUpdate",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTimeUpdateCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchCancel",
     "value": "undefined | React.TouchEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchCancelCapture",
     "value": "undefined | React.TouchEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchEnd",
     "value": "undefined | React.TouchEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchEndCapture",
     "value": "undefined | React.TouchEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchMove",
     "value": "undefined | React.TouchEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchMoveCapture",
     "value": "undefined | React.TouchEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchStart",
     "value": "undefined | React.TouchEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchStartCapture",
     "value": "undefined | React.TouchEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTransitionEnd",
     "value": "undefined | React.TransitionEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTransitionEndCapture",
     "value": "undefined | React.TransitionEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onUpdate",
     "value": "undefined | (values: ReactCustomScrollbars.positionValues) => void",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onVolumeChange",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onVolumeChangeCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onWaiting",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onWaitingCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onWheel",
     "value": "undefined | React.WheelEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onWheelCapture",
     "value": "undefined | React.WheelEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "open",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "optimum",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "pattern",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "playsInline",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "poster",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "prefix",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "preload",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "property",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "radioGroup",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "readOnly",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rel",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderThumbHorizontal",
     "value": "undefined | React.ComponentClass<any, any> | React.FunctionComponent<any>",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderThumbVertical",
     "value": "undefined | React.ComponentClass<any, any> | React.FunctionComponent<any>",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderTrackHorizontal",
     "value": "undefined | React.ComponentClass<any, any> | React.FunctionComponent<any>",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderTrackVertical",
     "value": "undefined | React.ComponentClass<any, any> | React.FunctionComponent<any>",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderView",
     "value": "undefined | (props: any) => React.ReactElement<any, string | React.JSXElementConstructor<any>>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "required",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "resource",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "results",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "reversed",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "role",
     "value": "undefined | 'form' | 'list' | 'alert' | 'alertdialog' | 'application' | 'article' | 'banner' | 'button' | 'cell' | 'checkbox' | 'columnheader' | 'combobox' | 'complementary' | 'contentinfo' | 'definition' | 'dialog' | 'directory' | 'document' | 'feed' | 'figure' | 'grid' | 'gridcell' | 'group' | 'heading' | 'img' | 'link' | 'listbox' | 'listitem' | 'log' | 'main' | 'marquee' | 'math' | 'menu' | 'menubar' | 'menuitem' | 'menuitemcheckbox' | 'menuitemradio' | 'navigation' | 'none' | 'note' | 'option' | 'presentation' | 'progressbar' | 'radio' | 'radiogroup' | 'region' | 'row' | 'rowgroup' | 'rowheader' | 'scrollbar' | 'search' | 'searchbox' | 'separator' | 'slider' | 'spinbutton' | 'status' | 'switch' | 'tab' | 'table' | 'tablist' | 'tabpanel' | 'term' | 'textbox' | 'timer' | 'toolbar' | 'tooltip' | 'tree' | 'treegrid' | 'treeitem' | string & {}",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rows",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowSpan",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "sandbox",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "scope",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "scoped",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "scrolling",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "seamless",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "security",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selected",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "shape",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "sizes",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "slot",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "span",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "spellCheck",
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "src",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "srcDoc",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "srcLang",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "srcSet",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "start",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "step",
     "value": "undefined | string | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "value": "undefined | React.CSSProperties",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "summary",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "suppressContentEditableWarning",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "suppressHydrationWarning",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tagName",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "thumbMinSize",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "thumbSize",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "title",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "translate",
     "value": "undefined | 'yes' | 'no'",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "typeof",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "universal",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "ScrollbarProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "unselectable",
     "value": "undefined | 'on' | 'off'",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "useMap",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "value": "undefined | string | number | readonly string[]",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "vocab",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "value": "undefined | string | number",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "wmode",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "wrap",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AllHTMLAttributes"
     },
     "optional": true
    }
   ]
  },
  "PositionValues": {
   "kind": "InterfaceDeclaration",
   "name": "PositionValues",
   "value": "PositionValues",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "clientHeight",
     "value": "number",
     "inheritedFrom": {
      "name": "positionValues"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "clientWidth",
     "value": "number",
     "inheritedFrom": {
      "name": "positionValues"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "left",
     "value": "number",
     "inheritedFrom": {
      "name": "positionValues"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "scrollHeight",
     "value": "number",
     "inheritedFrom": {
      "name": "positionValues"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "scrollLeft",
     "value": "number",
     "inheritedFrom": {
      "name": "positionValues"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "scrollTop",
     "value": "number",
     "inheritedFrom": {
      "name": "positionValues"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "scrollWidth",
     "value": "number",
     "inheritedFrom": {
      "name": "positionValues"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "top",
     "value": "number",
     "inheritedFrom": {
      "name": "positionValues"
     },
     "optional": false
    }
   ]
  },
  "ScrollbarsApi": {
   "kind": "InterfaceDeclaration",
   "name": "ScrollbarsApi",
   "value": "ScrollbarsApi",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "componentDidCatch",
     "comment": [
      "Catches exceptions generated in descendant components. Unhandled exceptions will cause",
      " the entire component tree to unmount."
     ],
     "value": "undefined | (error: Error, errorInfo: React.ErrorInfo) => void",
     "inheritedFrom": {
      "name": "ComponentLifecycle"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "componentDidMount",
     "comment": [
      "Called immediately after a component is mounted. Setting state here will trigger re-rendering."
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "name": "ComponentLifecycle"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "componentDidUpdate",
     "comment": [
      "Called immediately after updating occurs. Not called for the initial render.",
      "",
      " The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null."
     ],
     "value": "undefined | (prevProps: Readonly<P>, prevState: Readonly<S>, snapshot?: SS | undefined) => void",
     "inheritedFrom": {
      "name": "NewLifecycle"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "componentWillMount",
     "comment": [
      "Called immediately before mounting occurs, and before `Component#render`.",
      " Avoid introducing any side-effects or subscriptions in this method.",
      "",
      " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
      " prevents this from being invoked.",
      "",
      " @deprecated 16.3, use componentDidMount or the constructor instead; will stop working in React 17",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "name": "DeprecatedLifecycle"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "componentWillReceiveProps",
     "comment": [
      "Called when the component may be receiving new props.",
      " React may call this even if props have not changed, so be sure to compare new and existing",
      " props if you only want to handle changes.",
      "",
      " Calling `Component#setState` generally does not trigger this method.",
      "",
      " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
      " prevents this from being invoked.",
      "",
      " @deprecated 16.3, use static getDerivedStateFromProps instead; will stop working in React 17",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
     ],
     "value": "undefined | (nextProps: Readonly<P>, nextContext: any) => void",
     "inheritedFrom": {
      "name": "DeprecatedLifecycle"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "componentWillUnmount",
     "comment": [
      "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as",
      " cancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "name": "ComponentLifecycle"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "componentWillUpdate",
     "comment": [
      "Called immediately before rendering when new props or state is received. Not called for the initial render.",
      "",
      " Note: You cannot call `Component#setState` here.",
      "",
      " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
      " prevents this from being invoked.",
      "",
      " @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
     ],
     "value": "undefined | (nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any) => void",
     "inheritedFrom": {
      "name": "DeprecatedLifecycle"
     },
     "optional": true
    },
    {
     "kind": "PropertyDeclaration",
     "name": "container",
     "value": "HTMLDivElement",
     "inheritedFrom": {
      "name": "Scrollbars"
     },
     "optional": false
    },
    {
     "kind": "PropertyDeclaration",
     "name": "context",
     "comment": [
      "If using the new style context, re-declare this in your class to be the",
      " `React.ContextType` of your `static contextType`.",
      " Should be used with type annotation or static contextType.",
      "",
      " ```ts",
      " static contextType = MyContext",
      " // For TS pre-3.7:",
      " context!: React.ContextType<typeof MyContext>",
      " // For TS 3.7 and above:",
      " declare context: React.ContextType<typeof MyContext>",
      " ```",
      "",
      " @see https://reactjs.org/docs/context.html"
     ],
     "value": "unknown",
     "inheritedFrom": {
      "name": "Component"
     },
     "optional": false
    },
    {
     "kind": "MethodDeclaration",
     "name": "forceUpdate",
     "value": "(callback?: (() => void) | undefined) => void",
     "inheritedFrom": {
      "name": "Component"
     },
     "optional": false
    },
    {
     "kind": "MethodDeclaration",
     "name": "getClientHeight",
     "value": "() => number",
     "inheritedFrom": {
      "name": "Scrollbars"
     },
     "optional": false
    },
    {
     "kind": "MethodDeclaration",
     "name": "getClientWidth",
     "value": "() => number",
     "inheritedFrom": {
      "name": "Scrollbars"
     },
     "optional": false
    },
    {
     "kind": "MethodDeclaration",
     "name": "getScrollHeight",
     "value": "() => number",
     "inheritedFrom": {
      "name": "Scrollbars"
     },
     "optional": false
    },
    {
     "kind": "MethodDeclaration",
     "name": "getScrollLeft",
     "value": "() => number",
     "inheritedFrom": {
      "name": "Scrollbars"
     },
     "optional": false
    },
    {
     "kind": "MethodDeclaration",
     "name": "getScrollTop",
     "value": "() => number",
     "inheritedFrom": {
      "name": "Scrollbars"
     },
     "optional": false
    },
    {
     "kind": "MethodDeclaration",
     "name": "getScrollWidth",
     "value": "() => number",
     "inheritedFrom": {
      "name": "Scrollbars"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getSnapshotBeforeUpdate",
     "comment": [
      "Runs before React applies the result of `render` to the document, and",
      " returns an object to be given to componentDidUpdate. Useful for saving",
      " things such as scroll position before `render` causes changes to it.",
      "",
      " Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated",
      " lifecycle events from running."
     ],
     "value": "undefined | (prevProps: Readonly<P>, prevState: Readonly<S>) => SS | null",
     "inheritedFrom": {
      "name": "NewLifecycle"
     },
     "optional": true
    },
    {
     "kind": "MethodDeclaration",
     "name": "getValues",
     "value": "() => ReactCustomScrollbars.positionValues",
     "inheritedFrom": {
      "name": "Scrollbars"
     },
     "optional": false
    },
    {
     "kind": "PropertyDeclaration",
     "name": "props",
     "value": "Readonly<P>",
     "inheritedFrom": {
      "name": "Component"
     },
     "optional": false
    },
    {
     "kind": "PropertyDeclaration",
     "name": "refs",
     "comment": [
      "@deprecated",
      " https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs"
     ],
     "value": "{ [key: string]: React.ReactInstance; }",
     "inheritedFrom": {
      "name": "Component"
     },
     "optional": false
    },
    {
     "kind": "MethodDeclaration",
     "name": "render",
     "value": "() => React.ReactNode",
     "inheritedFrom": {
      "name": "Component"
     },
     "optional": false
    },
    {
     "kind": "MethodDeclaration",
     "name": "scrollLeft",
     "value": "(left: number) => void",
     "inheritedFrom": {
      "name": "Scrollbars"
     },
     "optional": false
    },
    {
     "kind": "MethodDeclaration",
     "name": "scrollToBottom",
     "value": "() => void",
     "inheritedFrom": {
      "name": "Scrollbars"
     },
     "optional": false
    },
    {
     "kind": "MethodDeclaration",
     "name": "scrollToLeft",
     "value": "() => void",
     "inheritedFrom": {
      "name": "Scrollbars"
     },
     "optional": false
    },
    {
     "kind": "MethodDeclaration",
     "name": "scrollTop",
     "value": "(top: number) => void",
     "inheritedFrom": {
      "name": "Scrollbars"
     },
     "optional": false
    },
    {
     "kind": "MethodDeclaration",
     "name": "scrollToRight",
     "value": "() => void",
     "inheritedFrom": {
      "name": "Scrollbars"
     },
     "optional": false
    },
    {
     "kind": "MethodDeclaration",
     "name": "scrollToTop",
     "value": "() => void",
     "inheritedFrom": {
      "name": "Scrollbars"
     },
     "optional": false
    },
    {
     "kind": "MethodDeclaration",
     "name": "setState",
     "value": "<K extends keyof S>(state: S | ((prevState: Readonly<S>, props: Readonly<P>) => S | Pick<S, K> | null) | Pick<S, K> | null, callback?: (() => void) | undefined) => void",
     "inheritedFrom": {
      "name": "Component"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "shouldComponentUpdate",
     "comment": [
      "Called to determine whether the change in props and state should trigger a re-render.",
      "",
      " `Component` always returns true.",
      " `PureComponent` implements a shallow comparison on props and state and returns true if any",
      " props or states have changed.",
      "",
      " If false is returned, `Component#render`, `componentWillUpdate`",
      " and `componentDidUpdate` will not be called."
     ],
     "value": "undefined | (nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any) => boolean",
     "inheritedFrom": {
      "name": "ComponentLifecycle"
     },
     "optional": true
    },
    {
     "kind": "PropertyDeclaration",
     "name": "state",
     "value": "Readonly<S>",
     "inheritedFrom": {
      "name": "Component"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "UNSAFE_componentWillMount",
     "comment": [
      "Called immediately before mounting occurs, and before `Component#render`.",
      " Avoid introducing any side-effects or subscriptions in this method.",
      "",
      " This method will not stop working in React 17.",
      "",
      " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
      " prevents this from being invoked.",
      "",
      " @deprecated 16.3, use componentDidMount or the constructor instead",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "name": "DeprecatedLifecycle"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "UNSAFE_componentWillReceiveProps",
     "comment": [
      "Called when the component may be receiving new props.",
      " React may call this even if props have not changed, so be sure to compare new and existing",
      " props if you only want to handle changes.",
      "",
      " Calling `Component#setState` generally does not trigger this method.",
      "",
      " This method will not stop working in React 17.",
      "",
      " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
      " prevents this from being invoked.",
      "",
      " @deprecated 16.3, use static getDerivedStateFromProps instead",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
     ],
     "value": "undefined | (nextProps: Readonly<P>, nextContext: any) => void",
     "inheritedFrom": {
      "name": "DeprecatedLifecycle"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "UNSAFE_componentWillUpdate",
     "comment": [
      "Called immediately before rendering when new props or state is received. Not called for the initial render.",
      "",
      " Note: You cannot call `Component#setState` here.",
      "",
      " This method will not stop working in React 17.",
      "",
      " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
      " prevents this from being invoked.",
      "",
      " @deprecated 16.3, use getSnapshotBeforeUpdate instead",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update",
      " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
     ],
     "value": "undefined | (nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any) => void",
     "inheritedFrom": {
      "name": "DeprecatedLifecycle"
     },
     "optional": true
    }
   ]
  },
  "AdaptiveItemProps": {
   "kind": "TypeAliasDeclaration",
   "name": "AdaptiveItemProps",
   "value": "AdaptiveItemProps<T>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "render",
     "value": "(item: AdaptiveItemProps<T>[] | undefined) => any",
     "optional": false
    }
   ]
  },
  "AdaptivePanelProps": {
   "kind": "InterfaceDeclaration",
   "name": "AdaptivePanelProps",
   "value": "AdaptivePanelProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "value": "{ render: (item: any, hiddenItems?: any[] | undefined, displayedItems?: any[] | undefined) => any; priority: number; collapsedContainer?: boolean | undefined; id: string; }[]",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    }
   ]
  },
  "DropdownContainerProps": {
   "kind": "InterfaceDeclaration",
   "name": "DropdownContainerProps",
   "value": "DropdownContainerProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "arrowProps",
     "value": "undefined | PopperArrowProps",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "as",
     "comment": [
      "Pass element name if you need to change internal FocusLock div element, to any other."
     ],
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnEsc",
     "comment": [
      "Pass true to handle Escape key press and call props.onClose().",
      " If omitted, true value will be used. It's used if focusLock=true."
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "focusLock",
     "comment": [
      "Pass true to wrap DropdownContainer with FocusLock component to support keyboard navigation.",
      " If omitted, true value will be used.",
      "",
      " After DropdownContainer appeared the focus will be set on the first focusable element inside."
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "height",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "lockProps",
     "comment": [
      "Pass any extra props to the FocusLock wrapper."
     ],
     "value": "undefined | Record<string, any>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxWidth",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "persistentFocus",
     "comment": [
      "Pass true to lock focus within DropdownContainer.",
      " If omitted, true value will be used. It's used if focusLock=true."
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "value": "undefined | 'top' | 'left' | 'auto' | 'auto-start' | 'auto-end' | 'bottom' | 'right' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "returnFocus",
     "comment": [
      "Pass true to return focus into initial position on unmount.",
      " If omitted, true value will be used. It's used if focusLock=true."
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "scheduleUpdate",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "shards",
     "comment": [
      "Pass an array of ref pointing to the nodes, which focus lock should consider and a part of it. This is a way of focus scattering."
     ],
     "value": "undefined | React.RefObject<HTMLElement>[]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "showArrow",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "value": "undefined | React.CSSProperties",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "togglerHeight",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "togglerWidth",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "value": "undefined | number | 'auto'",
     "optional": true
    }
   ]
  },
  "TooltipState": {
   "kind": "InterfaceDeclaration",
   "name": "TooltipState",
   "value": "TooltipState",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "value": "false | true",
     "optional": false
    }
   ]
  },
  "TooltipProps": {
   "kind": "InterfaceDeclaration",
   "name": "TooltipProps",
   "value": "TooltipProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "boundaryElement",
     "value": "undefined | HTMLElement | HTMLElement[] | 'clippingParents'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "comment": [
      "React Node(s) to show tooltip for"
     ],
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeBodyOnTogglerHidden",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeDelay",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnMouseLeave",
     "value": "undefined | false | 'toggler' | 'boundary'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "content",
     "comment": [
      "Content to show in the tooltip (ReactNode)"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxWidth",
     "comment": [
      "Max width of tooltip"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "modifiers",
     "value": "undefined | (Modifier<any, object>>)[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "offset",
     "comment": [
      "See <a href='https://popper.js.org/docs/v2/modifiers/offset/'>Popper docs</a>"
     ],
     "value": "undefined | OffsetsFunction | [number | null | undefined, number | null | undefined]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "openDelay",
     "comment": [
      "Should we close dropdown on click on the Toggler, if it's already open? Default is true."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "value": "undefined | 'top' | 'left' | 'auto' | 'auto-start' | 'auto-end' | 'bottom' | 'right' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "portalTarget",
     "value": "undefined | HTMLElement",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderContent",
     "comment": [
      "Alternative to 'content' prop, you can pass a render function.",
      " The function will only be called when content is shown, this can save performance."
     ],
     "value": "undefined | () => any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "PortalProps": {
   "kind": "InterfaceDeclaration",
   "name": "PortalProps",
   "value": "PortalProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "value": "undefined | HTMLElement",
     "optional": true
    }
   ]
  },
  "SnackbarProps": {
   "kind": "InterfaceDeclaration",
   "name": "SnackbarProps",
   "value": "SnackbarProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "closeIcon",
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "notifications",
     "value": "undefined | NotificationOperation[]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    }
   ]
  },
  "DragHandleProps": {
   "kind": "InterfaceDeclaration",
   "name": "DragHandleProps",
   "value": "DragHandleProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    }
   ]
  },
  "BaseTimePickerProps": {
   "kind": "InterfaceDeclaration",
   "name": "BaseTimePickerProps",
   "value": "BaseTimePickerProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bodyCx",
     "comment": [
      "CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "format",
     "value": "undefined | 12 | 24",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "minutesStep",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "value": "undefined | { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderTarget",
     "value": "undefined | (props: IDropdownToggler) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "CheckboxProps": {
   "kind": "InterfaceDeclaration",
   "name": "CheckboxProps",
   "value": "CheckboxProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Check icon"
     ],
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "indeterminate",
     "comment": [
      "Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICheckable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "indeterminateIcon",
     "comment": [
      "Indeterminate state icon"
     ],
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasLabel"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderLabel",
     "value": "undefined | () => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "DatePickerState": {
   "kind": "InterfaceDeclaration",
   "name": "DatePickerState",
   "value": "DatePickerState",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "displayedDate",
     "value": "Dayjs",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "PickerBodyValue"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "inputValue",
     "value": "null | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectedDate",
     "value": "null | TSelection",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "PickerBodyValue"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "view",
     "value": "'DAY_SELECTION' | 'MONTH_SELECTION' | 'YEAR_SELECTION'",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "PickerBodyValue"
     },
     "optional": false
    }
   ]
  },
  "CalendarProps": {
   "kind": "InterfaceDeclaration",
   "name": "CalendarProps",
   "value": "CalendarProps<TSelection>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "displayedDate",
     "value": "Dayjs",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "value": "undefined | (day: Dayjs) => boolean",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getDayCX",
     "value": "undefined | (day: Dayjs) => any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "hideAnotherMonths",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "value": "undefined | (day: Dayjs) => boolean",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onValueChange",
     "value": "(day: Dayjs) => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "value": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "value": "TSelection",
     "optional": false
    }
   ]
  },
  "CalendarPresetsProps": {
   "kind": "InterfaceDeclaration",
   "name": "CalendarPresetsProps",
   "value": "CalendarPresetsProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPresetSet",
     "value": "(nV: RangeDatePickerPresetValue) => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "value": "RangeDatePickerPresets",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    }
   ]
  },
  "ViewType": {
   "kind": "TypeAliasDeclaration",
   "name": "ViewType",
   "value": "'DAY_SELECTION' | 'MONTH_SELECTION' | 'YEAR_SELECTION'"
  },
  "DatePickerBodyBaseOptions": {
   "kind": "InterfaceDeclaration",
   "name": "DatePickerBodyBaseOptions",
   "value": "DatePickerBodyBaseOptions",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "changeIsOpen",
     "value": "undefined | (newValue: boolean) => void",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "value": "undefined | (day: Dayjs) => boolean",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "value": "undefined | RangeDatePickerPresets",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "value": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>",
     "optional": true
    }
   ]
  },
  "DatePickerBodyBaseProps": {
   "kind": "InterfaceDeclaration",
   "name": "DatePickerBodyBaseProps",
   "value": "DatePickerBodyBaseProps<TSelection>",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "changeIsOpen",
     "value": "undefined | (newValue: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DatePickerBodyBaseOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "value": "undefined | (day: Dayjs) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DatePickerBodyBaseOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "value": "undefined | RangeDatePickerPresets",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DatePickerBodyBaseOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "value": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DatePickerBodyBaseOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "setDisplayedDateAndView",
     "value": "(displayedDate: ViewType) => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "setSelectedDate",
     "value": "(newDate: TSelection) => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "value": "PickerBodyValue<TSelection>",
     "optional": false
    }
   ]
  },
  "PickerBodyValue": {
   "kind": "InterfaceDeclaration",
   "name": "PickerBodyValue",
   "value": "PickerBodyValue<TSelection>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "displayedDate",
     "value": "Dayjs",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectedDate",
     "value": "null | TSelection",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "view",
     "value": "'DAY_SELECTION' | 'MONTH_SELECTION' | 'YEAR_SELECTION'",
     "optional": false
    }
   ]
  },
  "DayProps": {
   "kind": "InterfaceDeclaration",
   "name": "DayProps",
   "value": "DayProps",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "filter",
     "value": "undefined | (day: Dayjs) => boolean",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getDayCX",
     "value": "undefined | (day: ClassValue",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isSelected",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderDayNumber",
     "value": "undefined | (param: Dayjs) => any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "MonthSelectionProps": {
   "kind": "InterfaceDeclaration",
   "name": "MonthSelectionProps",
   "value": "MonthSelectionProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectedDate",
     "value": "Dayjs",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "YearSelectionProps": {
   "kind": "InterfaceDeclaration",
   "name": "YearSelectionProps",
   "value": "YearSelectionProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectedDate",
     "value": "Dayjs",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "NumericInputProps": {
   "kind": "InterfaceDeclaration",
   "name": "NumericInputProps",
   "value": "NumericInputProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "align",
     "comment": [
      "Align text inside the component. Useful for tables (in cell-mode) - to align numbers in table column"
     ],
     "value": "undefined | 'left' | 'right'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableArrows",
     "comment": [
      "Turn off up/down (increase/decrease) buttons"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableLocaleFormatting",
     "comment": [
      "Turns off locale-based formatting, standard Number.toString() is used instead"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "downIcon",
     "comment": [
      "Overrides the down/decrease icon"
     ],
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "formatOptions",
     "comment": [
      "Number formatting options. See #{link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat}"
     ],
     "value": "undefined | Intl.NumberFormatOptions",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "formatValue",
     "comment": [
      "A function to convert current input value to displayed text.",
      " Overrides standard Intl-based formatting.",
      " If passed, only maximumFractionDigits considered from formatOptions when both properties provided.",
      " Note, that formatting is used when input is out of focus."
     ],
     "value": "undefined | (value: number) => string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML ID"
     ],
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS classes to put directly on the Input element"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "max",
     "comment": [
      "Maximum value (default is Number.MAX_SAFE_INTEGER)"
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "min",
     "comment": [
      "Minimum value (default is 0)"
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "step",
     "comment": [
      "Increase/decrease step (for icons and )"
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "upIcon",
     "comment": [
      "Overrides the up/increase icon"
     ],
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "RadioInputProps": {
   "kind": "InterfaceDeclaration",
   "name": "RadioInputProps",
   "value": "RadioInputProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasLabel"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderLabel",
     "value": "undefined | () => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "BaseRatingProps": {
   "kind": "InterfaceDeclaration",
   "name": "BaseRatingProps",
   "value": "BaseRatingProps<TValue>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "from",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderRating",
     "value": "undefined | (rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "step",
     "value": "undefined | 0.5 | 1",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "to",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "RatingProps": {
   "kind": "InterfaceDeclaration",
   "name": "RatingProps",
   "value": "RatingProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "emptyStarIcon",
     "value": "any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "filledStarIcon",
     "value": "any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "from",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "BaseRatingProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "hideTooltip",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "hint",
     "value": "undefined | (value: number) => string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderRating",
     "value": "undefined | (rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "BaseRatingProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "step",
     "value": "undefined | 0.5 | 1",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "BaseRatingProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "to",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "BaseRatingProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "Tooltip",
     "value": "undefined | React.ComponentClass<TooltipProps, any> | React.FunctionComponent<TooltipProps>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "SliderBaseProps": {
   "kind": "InterfaceDeclaration",
   "name": "SliderBaseProps",
   "value": "SliderBaseProps<TSelection>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "max",
     "comment": [
      "Max value (when slider is at rightmost position)"
     ],
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "min",
     "comment": [
      "Min value (when slider is at leftmost position)"
     ],
     "value": "number",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderLabel",
     "comment": [
      "Overrides rendering of values labels"
     ],
     "value": "undefined | (value: number) => string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "showTooltip",
     "comment": [
      "Toggles rendering of tooltip with current value"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "splitAt",
     "comment": [
      "Slider renders a label at each splitAt position"
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "step",
     "comment": [
      "Value change step"
     ],
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "SliderBaseState": {
   "kind": "InterfaceDeclaration",
   "name": "SliderBaseState",
   "value": "SliderBaseState",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "valueWidth",
     "value": "number",
     "optional": false
    }
   ]
  },
  "RangeSliderValue": {
   "kind": "InterfaceDeclaration",
   "name": "RangeSliderValue",
   "value": "RangeSliderValue",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "from",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "to",
     "value": "number",
     "optional": false
    }
   ]
  },
  "RangeSliderState": {
   "kind": "InterfaceDeclaration",
   "name": "RangeSliderState",
   "value": "RangeSliderState",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "activeHandle",
     "value": "null | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "SliderBaseState"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "valueWidth",
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "SliderBaseState"
     },
     "optional": false
    }
   ]
  },
  "SwitchProps": {
   "kind": "InterfaceDeclaration",
   "name": "SwitchProps",
   "value": "SwitchProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasLabel"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "TextAreaProps": {
   "kind": "InterfaceDeclaration",
   "name": "TextAreaProps",
   "value": "TextAreaProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "comment": [
      "Automatically sets input focus to component, when its mounted"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoSize",
     "comment": [
      "Enables auto-resizing height to fit text. Rows prop is ignored in this mode"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML id attribute to put on the HTML Input element"
     ],
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class names to put to the HTML Input element"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "comment": [
      "Maximum text length, in characters"
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "comment": [
      "onKeyDown event handler to put on HTML Input"
     ],
     "value": "undefined | (e?: any) => void",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rows",
     "comment": [
      "Adjust height to fit specified number or text rows. HTML TextArea attribute."
     ],
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "IRenderInputProps": {
   "kind": "TypeAliasDeclaration",
   "name": "IRenderInputProps",
   "value": "IRenderInputProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "'aria-activedescendant'",
     "comment": [
      "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-atomic'",
     "comment": [
      "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-autocomplete'",
     "comment": [
      "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be",
      " presented if they are made."
     ],
     "value": "undefined | 'list' | 'none' | 'inline' | 'both'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-busy'",
     "comment": [
      "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-checked'",
     "comment": [
      "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.",
      " @see aria-pressed @see aria-selected."
     ],
     "value": "undefined | false | true | 'true' | 'false' | 'mixed'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-colcount'",
     "comment": [
      "Defines the total number of columns in a table, grid, or treegrid.",
      " @see aria-colindex."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-colindex'",
     "comment": [
      "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.",
      " @see aria-colcount @see aria-colspan."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-colspan'",
     "comment": [
      "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.",
      " @see aria-colindex @see aria-rowspan."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-controls'",
     "comment": [
      "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
      " @see aria-owns."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-current'",
     "comment": [
      "Indicates the element that represents the current item within a container or set of related elements."
     ],
     "value": "undefined | false | true | 'step' | 'true' | 'false' | 'page' | 'location' | 'date' | 'time'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-describedby'",
     "comment": [
      "Identifies the element (or elements) that describes the object.",
      " @see aria-labelledby"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-details'",
     "comment": [
      "Identifies the element that provides a detailed, extended description for the object.",
      " @see aria-describedby."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-disabled'",
     "comment": [
      "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.",
      " @see aria-hidden @see aria-readonly."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-dropeffect'",
     "comment": [
      "Indicates what functions can be performed when a dragged object is released on the drop target.",
      " @deprecated in ARIA 1.1"
     ],
     "value": "undefined | 'link' | 'none' | 'copy' | 'execute' | 'move' | 'popup'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-errormessage'",
     "comment": [
      "Identifies the element that provides an error message for the object.",
      " @see aria-invalid @see aria-describedby."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-expanded'",
     "comment": [
      "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-flowto'",
     "comment": [
      "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,",
      " allows assistive technology to override the general default of reading in document source order."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-grabbed'",
     "comment": [
      "Indicates an element's \"grabbed\" state in a drag-and-drop operation.",
      " @deprecated in ARIA 1.1"
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-haspopup'",
     "comment": [
      "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
     ],
     "value": "undefined | false | true | 'true' | 'false' | 'dialog' | 'grid' | 'listbox' | 'menu' | 'tree'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-hidden'",
     "comment": [
      "Indicates whether the element is exposed to an accessibility API.",
      " @see aria-disabled."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-invalid'",
     "comment": [
      "Indicates the entered value does not conform to the format expected by the application.",
      " @see aria-errormessage."
     ],
     "value": "undefined | false | true | 'true' | 'false' | 'grammar' | 'spelling'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-keyshortcuts'",
     "comment": [
      "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-label'",
     "comment": [
      "Defines a string value that labels the current element.",
      " @see aria-labelledby."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-labelledby'",
     "comment": [
      "Identifies the element (or elements) that labels the current element.",
      " @see aria-describedby."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-level'",
     "comment": [
      "Defines the hierarchical level of an element within a structure."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-live'",
     "comment": [
      "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
     ],
     "value": "undefined | 'off' | 'assertive' | 'polite'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-modal'",
     "comment": [
      "Indicates whether an element is modal when displayed."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-multiline'",
     "comment": [
      "Indicates whether a text box accepts multiple lines of input or only a single line."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-multiselectable'",
     "comment": [
      "Indicates that the user may select more than one item from the current selectable descendants."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-orientation'",
     "comment": [
      "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
     ],
     "value": "undefined | 'vertical' | 'horizontal'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-owns'",
     "comment": [
      "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship",
      " between DOM elements where the DOM hierarchy cannot be used to represent the relationship.",
      " @see aria-controls."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-placeholder'",
     "comment": [
      "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.",
      " A hint could be a sample value or a brief description of the expected format."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-posinset'",
     "comment": [
      "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
      " @see aria-setsize."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-pressed'",
     "comment": [
      "Indicates the current \"pressed\" state of toggle buttons.",
      " @see aria-checked @see aria-selected."
     ],
     "value": "undefined | false | true | 'true' | 'false' | 'mixed'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-readonly'",
     "comment": [
      "Indicates that the element is not editable, but is otherwise operable.",
      " @see aria-disabled."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-relevant'",
     "comment": [
      "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.",
      " @see aria-atomic."
     ],
     "value": "undefined | 'text' | 'additions' | 'additions removals' | 'additions text' | 'all' | 'removals' | 'removals additions' | 'removals text' | 'text additions' | 'text removals'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-required'",
     "comment": [
      "Indicates that user input is required on the element before a form may be submitted."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-roledescription'",
     "comment": [
      "Defines a human-readable, author-localized description for the role of an element."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-rowcount'",
     "comment": [
      "Defines the total number of rows in a table, grid, or treegrid.",
      " @see aria-rowindex."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-rowindex'",
     "comment": [
      "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.",
      " @see aria-rowcount @see aria-rowspan."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-rowspan'",
     "comment": [
      "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.",
      " @see aria-rowindex @see aria-colspan."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-selected'",
     "comment": [
      "Indicates the current \"selected\" state of various widgets.",
      " @see aria-checked @see aria-pressed."
     ],
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-setsize'",
     "comment": [
      "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
      " @see aria-posinset."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-sort'",
     "comment": [
      "Indicates if items in a table or grid are sorted in ascending or descending order."
     ],
     "value": "undefined | 'none' | 'ascending' | 'descending' | 'other'",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-valuemax'",
     "comment": [
      "Defines the maximum allowed value for a range widget."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-valuemin'",
     "comment": [
      "Defines the minimum allowed value for a range widget."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-valuenow'",
     "comment": [
      "Defines the current value for a range widget.",
      " @see aria-valuetext."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "'aria-valuetext'",
     "comment": [
      "Defines the human readable text alternative of aria-valuenow for a range widget."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "AriaAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "about",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "accept",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "accessKey",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "alt",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoCapitalize",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoComplete",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoCorrect",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoSave",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "capture",
     "value": "undefined | false | true | 'user' | 'environment'",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "checked",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "className",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "contentEditable",
     "value": "undefined | false | true | 'true' | 'false' | 'inherit'",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "contextMenu",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "crossOrigin",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dangerouslySetInnerHTML",
     "value": "undefined | { __html: string; }",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "datatype",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "defaultChecked",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "defaultValue",
     "value": "undefined | string | number | readonly string[]",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dir",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disabled",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "draggable",
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "enterKeyHint",
     "value": "undefined | 'search' | 'enter' | 'done' | 'go' | 'next' | 'previous' | 'send'",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "form",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "formAction",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "formEncType",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "formMethod",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "formNoValidate",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "formTarget",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "height",
     "value": "undefined | string | number",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "hidden",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inlist",
     "value": "any",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputMode",
     "comment": [
      "Hints at the type of data that might be entered by the user while editing the element or its contents",
      " @see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute"
     ],
     "value": "undefined | 'none' | 'search' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal'",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "is",
     "comment": [
      "Specify that a standard HTML element should behave like a defined custom built-in element",
      " @see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "itemID",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "itemProp",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "itemRef",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "itemScope",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "itemType",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "undefined | null | string | number",
     "inheritedFrom": {
      "name": "Attributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "lang",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "list",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "max",
     "value": "undefined | string | number",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "min",
     "value": "undefined | string | number",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "minLength",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "multiple",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "nonce",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAbort",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAbortCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationEnd",
     "value": "undefined | React.AnimationEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationEndCapture",
     "value": "undefined | React.AnimationEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationIteration",
     "value": "undefined | React.AnimationEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationIterationCapture",
     "value": "undefined | React.AnimationEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationStart",
     "value": "undefined | React.AnimationEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAnimationStartCapture",
     "value": "undefined | React.AnimationEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAuxClick",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onAuxClickCapture",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBeforeInput",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBeforeInputCapture",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "value": "undefined | React.FocusEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlurCapture",
     "value": "undefined | React.FocusEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCanPlay",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCanPlayCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCanPlayThrough",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCanPlayThroughCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onChange",
     "value": "undefined | React.ChangeEventHandler<T>",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onChangeCapture",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onClick",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onClickCapture",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionEnd",
     "value": "undefined | React.CompositionEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionEndCapture",
     "value": "undefined | React.CompositionEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionStart",
     "value": "undefined | React.CompositionEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionStartCapture",
     "value": "undefined | React.CompositionEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionUpdate",
     "value": "undefined | React.CompositionEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCompositionUpdateCapture",
     "value": "undefined | React.CompositionEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onContextMenu",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onContextMenuCapture",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCopy",
     "value": "undefined | React.ClipboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCopyCapture",
     "value": "undefined | React.ClipboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCut",
     "value": "undefined | React.ClipboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCutCapture",
     "value": "undefined | React.ClipboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDoubleClick",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDoubleClickCapture",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDrag",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragCapture",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragEnd",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragEndCapture",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragEnter",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragEnterCapture",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragExit",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragExitCapture",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragLeave",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragLeaveCapture",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragOver",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragOverCapture",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragStart",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDragStartCapture",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDrop",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDropCapture",
     "value": "undefined | React.DragEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDurationChange",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDurationChangeCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onEmptied",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onEmptiedCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onEncrypted",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onEncryptedCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onEnded",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onEndedCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onError",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onErrorCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "value": "undefined | React.FocusEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocusCapture",
     "value": "undefined | React.FocusEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onGotPointerCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onGotPointerCaptureCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onInput",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onInputCapture",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onInvalid",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onInvalidCapture",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyDown",
     "value": "undefined | React.KeyboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyDownCapture",
     "value": "undefined | React.KeyboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyPress",
     "comment": [
      "@deprecated"
     ],
     "value": "undefined | React.KeyboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyPressCapture",
     "comment": [
      "@deprecated"
     ],
     "value": "undefined | React.KeyboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyUp",
     "value": "undefined | React.KeyboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onKeyUpCapture",
     "value": "undefined | React.KeyboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLoad",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadedData",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadedDataCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadedMetadata",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadedMetadataCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadStart",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLoadStartCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLostPointerCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLostPointerCaptureCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseDown",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseDownCapture",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseEnter",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseLeave",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseMove",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseMoveCapture",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseOut",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseOutCapture",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseOver",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseOverCapture",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseUp",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onMouseUpCapture",
     "value": "undefined | React.MouseEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPaste",
     "value": "undefined | React.ClipboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPasteCapture",
     "value": "undefined | React.ClipboardEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPause",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPauseCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPlay",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPlayCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPlaying",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPlayingCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerCancel",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerCancelCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerDown",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerDownCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerEnter",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerEnterCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerLeave",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerLeaveCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerMove",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerMoveCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerOut",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerOutCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerOver",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerOverCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerUp",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onPointerUpCapture",
     "value": "undefined | React.PointerEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onProgress",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onProgressCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onRateChange",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onRateChangeCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onReset",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onResetCapture",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onResize",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onResizeCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onScroll",
     "value": "undefined | React.UIEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onScrollCapture",
     "value": "undefined | React.UIEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSeeked",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSeekedCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSeeking",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSeekingCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSelect",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSelectCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onStalled",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onStalledCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSubmit",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSubmitCapture",
     "value": "undefined | React.FormEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSuspend",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onSuspendCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTimeUpdate",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTimeUpdateCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchCancel",
     "value": "undefined | React.TouchEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchCancelCapture",
     "value": "undefined | React.TouchEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchEnd",
     "value": "undefined | React.TouchEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchEndCapture",
     "value": "undefined | React.TouchEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchMove",
     "value": "undefined | React.TouchEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchMoveCapture",
     "value": "undefined | React.TouchEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchStart",
     "value": "undefined | React.TouchEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTouchStartCapture",
     "value": "undefined | React.TouchEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTransitionEnd",
     "value": "undefined | React.TransitionEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onTransitionEndCapture",
     "value": "undefined | React.TransitionEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onVolumeChange",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onVolumeChangeCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onWaiting",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onWaitingCapture",
     "value": "undefined | React.ReactEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onWheel",
     "value": "undefined | React.WheelEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onWheelCapture",
     "value": "undefined | React.WheelEventHandler<T>",
     "inheritedFrom": {
      "name": "DOMAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "pattern",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "prefix",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "property",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "radioGroup",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "readOnly",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "value": "undefined | null | string | (instance: T | null) => void | React.RefObject<T>",
     "inheritedFrom": {
      "name": "ClassAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "required",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "resource",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "results",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "role",
     "value": "undefined | 'form' | 'list' | 'alert' | 'alertdialog' | 'application' | 'article' | 'banner' | 'button' | 'cell' | 'checkbox' | 'columnheader' | 'combobox' | 'complementary' | 'contentinfo' | 'definition' | 'dialog' | 'directory' | 'document' | 'feed' | 'figure' | 'grid' | 'gridcell' | 'group' | 'heading' | 'img' | 'link' | 'listbox' | 'listitem' | 'log' | 'main' | 'marquee' | 'math' | 'menu' | 'menubar' | 'menuitem' | 'menuitemcheckbox' | 'menuitemradio' | 'navigation' | 'none' | 'note' | 'option' | 'presentation' | 'progressbar' | 'radio' | 'radiogroup' | 'region' | 'row' | 'rowgroup' | 'rowheader' | 'scrollbar' | 'search' | 'searchbox' | 'separator' | 'slider' | 'spinbutton' | 'status' | 'switch' | 'tab' | 'table' | 'tablist' | 'tabpanel' | 'term' | 'textbox' | 'timer' | 'toolbar' | 'tooltip' | 'tree' | 'treegrid' | 'treeitem' | string & {}",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "security",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "slot",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "spellCheck",
     "value": "undefined | false | true | 'true' | 'false'",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "src",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "step",
     "value": "undefined | string | number",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "value": "undefined | React.CSSProperties",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "suppressContentEditableWarning",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "suppressHydrationWarning",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "value": "undefined | number",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "title",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "translate",
     "value": "undefined | 'yes' | 'no'",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "value": "undefined | 'number' | 'hidden' | 'color' | 'button' | 'checkbox' | 'radio' | 'search' | string & {} | 'text' | 'tel' | 'url' | 'email' | 'date' | 'time' | 'datetime-local' | 'file' | 'image' | 'month' | 'password' | 'range' | 'reset' | 'submit' | 'week'",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "typeof",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "unselectable",
     "value": "undefined | 'on' | 'off'",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "value": "undefined | string | number | readonly string[]",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "vocab",
     "value": "undefined | string",
     "inheritedFrom": {
      "name": "HTMLAttributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "value": "undefined | string | number",
     "inheritedFrom": {
      "name": "InputHTMLAttributes"
     },
     "optional": true
    }
   ]
  },
  "TextInputProps": {
   "kind": "InterfaceDeclaration",
   "name": "TextInputProps",
   "value": "TextInputProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "acceptIcon",
     "comment": [
      "Overrides accept (check) icon"
     ],
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoComplete",
     "comment": [
      "Standard <a href='https://www.w3schools.com/tags/att_input_autocomplete.asp'>autocomplete attribute</a>"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "comment": [
      "Put focus on the element, when component is mounted"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cancelIcon",
     "comment": [
      "Overrides cancel (cross) icon"
     ],
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Overrides dropdown (chevron) icon"
     ],
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML ID attribute for input"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class(es) to put to the HTML Input element"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputMode",
     "comment": [
      "Standard <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode'>inputMode attribute</a>"
     ],
     "value": "undefined | 'none' | 'search' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "comment": [
      "Maximum input length in characters"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "comment": [
      "Standard <a href='https://www.w3schools.com/tags/att_input_name.asp'>name attribute</a>"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onAccept",
     "comment": [
      "Enables accept (check) icon, and fires when the icon is clicked"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onCancel",
     "comment": [
      "Enables cancel (cross) icon, and fires when the icon is clicked"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "comment": [
      "keydown event handler to put on the HTML input element"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderInput",
     "comment": [
      "overrides rendering of HTML Input element"
     ],
     "value": "undefined | (props: IRenderInputProps) => JSX.Element",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "comment": [
      "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "TimePickerBodyProps": {
   "kind": "InterfaceDeclaration",
   "name": "TimePickerBodyProps",
   "value": "TimePickerBodyProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "addIcon",
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "format",
     "value": "undefined | 12 | 24",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "minutesStep",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "subtractIcon",
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "InputAddonProps": {
   "kind": "InterfaceDeclaration",
   "name": "InputAddonProps",
   "value": "InputAddonProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "content",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    }
   ]
  },
  "ButtonProps": {
   "kind": "InterfaceDeclaration",
   "name": "ButtonProps",
   "value": "ButtonProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "value": "undefined | null | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBasicPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    }
   ]
  },
  "ButtonBaseProps": {
   "kind": "InterfaceDeclaration",
   "name": "ButtonBaseProps",
   "value": "ButtonBaseProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    }
   ]
  },
  "IconButtonBaseProps": {
   "kind": "InterfaceDeclaration",
   "name": "IconButtonBaseProps",
   "value": "IconButtonBaseProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    }
   ]
  },
  "AvatarProps": {
   "kind": "InterfaceDeclaration",
   "name": "AvatarProps",
   "value": "AvatarProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alt",
     "comment": [
      "HTML alt attribute value"
     ],
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "img",
     "comment": [
      "Image URL"
     ],
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLoading",
     "comment": [
      "True to show placeholder"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onClick",
     "comment": [
      "Avatar onClick.",
      "  @deprecated Property onClick is deprecated and will be removed in future release."
     ],
     "value": "undefined | () => void",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "comment": [
      "Size"
     ],
     "value": "'12' | '18' | '24' | '30' | '36' | '42' | '48' | '54' | '60' | '72' | '78' | '90' | '144'",
     "optional": false
    }
   ]
  },
  "AvatarStackProps": {
   "kind": "InterfaceDeclaration",
   "name": "AvatarStackProps",
   "value": "AvatarStackProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "avatarsCount",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "avatarSize",
     "value": "'24' | '36' | '48' | '144'",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "direction",
     "value": "'left' | 'right'",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderItem",
     "value": "undefined | (url: string) => React.ReactElement<any, string | React.JSXElementConstructor<any>>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "urlArray",
     "value": "string[]",
     "optional": false
    }
   ]
  },
  "SpinnerProps": {
   "kind": "InterfaceDeclaration",
   "name": "SpinnerProps",
   "value": "SpinnerProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    }
   ]
  },
  "CarouselProps": {
   "kind": "InterfaceDeclaration",
   "name": "CarouselProps",
   "value": "CarouselProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "arrowIcon",
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "divideBy",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "value": "Record<string, any>[]",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderItem",
     "value": "(item: Record<string, any>) => React.ReactNode",
     "optional": false
    }
   ]
  },
  "CarouselState": {
   "kind": "InterfaceDeclaration",
   "name": "CarouselState",
   "value": "CarouselState",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "activeSlide",
     "value": "number",
     "optional": false
    }
   ]
  },
  "PaginatorParams": {
   "kind": "InterfaceDeclaration",
   "name": "PaginatorParams",
   "value": "PaginatorParams",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "goToNext",
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "goToPrev",
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFirst",
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isLast",
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "pages",
     "value": "PaginatorItem[]",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "'24' | '30'",
     "optional": false
    }
   ]
  },
  "PaginatorProps": {
   "kind": "InterfaceDeclaration",
   "name": "PaginatorProps",
   "value": "PaginatorProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "render",
     "comment": [
      "Override default rendering, keeping the component behavior"
     ],
     "value": "undefined | (params: PaginatorParams) => any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "comment": [
      "Component size"
     ],
     "value": "'24' | '30'",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "totalPages",
     "comment": [
      "Total number of pages"
     ],
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "DropSpotRenderParams": {
   "kind": "InterfaceDeclaration",
   "name": "DropSpotRenderParams",
   "value": "DropSpotRenderParams",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "eventHandlers",
     "value": "EventHandlers",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggingOver",
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DropSpotState"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDragStart",
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DropSpotState"
     },
     "optional": false
    }
   ]
  },
  "IProgressBarProps": {
   "kind": "InterfaceDeclaration",
   "name": "IProgressBarProps",
   "value": "IProgressBarProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "hideLabel",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "progress",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    }
   ]
  },
  "ColumnsConfigurationRowProps": {
   "kind": "InterfaceDeclaration",
   "name": "ColumnsConfigurationRowProps",
   "value": "ColumnsConfigurationRowProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignSelf",
     "comment": [
      "Align cell content vertically"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataColumnProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "canAcceptCopy",
     "value": "undefined | (from: DataTableSelectedCellData<TItem, TId, TFilter>) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataColumnProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "canCopy",
     "value": "undefined | (cell: DataTableSelectedCellData<TItem, TId, TFilter>) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataColumnProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Column caption. Can be a plain text, or any React Component"
     ],
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataColumnProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "columnConfig",
     "value": "IColumnConfig",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fix",
     "comment": [
      "If specified, will make column fixed - it would not scroll horizontally"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeFixed"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "groupKey",
     "value": "undefined | 'hidden' | 'displayedUnpinned' | 'displayedPinned'",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "GroupedDataColumnProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "grow",
     "comment": [
      "The flex grow for the column. Allows column to grow in width if there's spare horizontal space"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataColumnProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "info",
     "comment": [
      "Info tooltip displayed in the table header"
     ],
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataColumnProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isAlwaysVisible",
     "comment": [
      "Disallows to hide column via ColumnsConfiguration"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataColumnProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDndAllowed",
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isFilterActive",
     "comment": [
      "Should return true, if current filter affects the column.",
      " Usually, this prop is filled automatically by the useTableState hook.",
      " If you use the useTableState hook, you don't need to specify it manually."
     ],
     "value": "undefined | (filter: TFilter, column: DataColumnProps<TItem, TId, TFilter>) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataColumnProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isHiddenByDefault",
     "comment": [
      "Makes column hidden by default. User can turn it on later, via ColumnsConfiguration"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataColumnProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isPinned",
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isPinnedAlways",
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isSortable",
     "comment": [
      "Enables sorting arrows on the column.",
      " Sorting state is kept in DataSourceState.sorting"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataColumnProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "justifyContent",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataColumnProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "comment": [
      "Unique key to identify the column. Used to reference columns, e.g. in ColumnsConfig.",
      " Also, used as React key for cells, header cells, and other components inside tables."
     ],
     "value": "string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataColumnProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "minWidth",
     "comment": [
      "Minimal width to which column can be resized manually"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataColumnProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCanAcceptDrop",
     "value": "(props: DropPosition, boolean>> | null",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onDrop",
     "value": "(params: DndDataType>) => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "render",
     "comment": [
      "Render the cell content. The item props is the value of the whole row (TItem)."
     ],
     "value": "undefined | (item: TItem, props: DataRowProps<TItem, TId>) => any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataColumnProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderCell",
     "comment": [
      "Overrides rendering of the whole cell"
     ],
     "value": "undefined | (cellProps: RenderCellProps<TItem, TId>) => any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataColumnProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderDropdown",
     "comment": [
      "Renders column header dropdown.",
      " Usually, this prop is filled automatically by the useTableState hook.",
      " If you use the useTableState hook, you don't need to specify it manually."
     ],
     "value": "undefined | () => React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataColumnProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderFilter",
     "comment": [
      "Renders column filter.",
      " If you use useTableState hook, and you specify filter for the column, default filter will be rendered automatically.",
      " You can use this prop to render a custom filter component."
     ],
     "value": "undefined | (lens: IDropdownBodyProps) => React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataColumnProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "textAlign",
     "comment": [
      "Aligns cell content horizontally"
     ],
     "value": "undefined | 'left' | 'right' | 'center'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataColumnProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "togglePin",
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "toggleVisibility",
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "comment": [
      "The width of the column. Usually, columns has exact this width.",
      " When all columns fit, and there's spare horizontal space, you can use 'grow' prop to use this space for certain columns.",
      " DataTable's columns can't shrink below width - table will add horizontal scrolling instead of shrinking columns"
     ],
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataColumnProps"
     },
     "optional": false
    }
   ]
  },
  "HeaderCellContentProps": {
   "kind": "InterfaceDeclaration",
   "name": "HeaderCellContentProps",
   "value": "HeaderCellContentProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "classNames",
     "comment": [
      "CSS class names to add to the element.",
      " Some of these markers are used by the DndActor internally, so they must be added even if no used by component itself to apply styles."
     ],
     "value": "string[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "dragData",
     "comment": [
      "Drag data associated with the element. Specified always, even if there is no DnD operation happening."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "eventHandlers",
     "comment": [
      "Event handlers. Component is expected to pass these events to the top element it renders.",
      " As onClick event on the element will be overwritten, use DndActorProps.onClick to receive click events on the element"
     ],
     "value": "{ onTouchStart?(e: React.TouchEvent<Element>): void; onPointerDown?(e: React.PointerEvent<Element>): void; onPointerEnter?(e: React.PointerEvent<any>): void; onPointerMove?(e: React.PointerEvent<any>): void; onPointerLeave?(e: React.PointerEvent<any>): void; onPointerUp?(e: React.PointerEvent<any>): void; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDndInProgress",
     "comment": [
      "True if any drag and drop operation is in progress, even if the element not being dragged"
     ],
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggable",
     "comment": [
      "True, if the element can be dragged. Doesn't mean that DnD is active."
     ],
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggedOut",
     "comment": [
      "True, if the element is dragged out. True for placeholder left when it's element it dragged out. False for Drag Ghost."
     ],
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggedOver",
     "comment": [
      "True, if the element is being dragged over, even if drop is not accepted by the element (canAcceptDrop returned false)"
     ],
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDragGhost",
     "comment": [
      "True, if the element is rendered as Drag Ghost. All other flags are false for drag ghost."
     ],
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropAccepted",
     "comment": [
      "True, if the element is being dragged over, and drop on it is accepted - canAcceptDrop returned true"
     ],
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "onResize",
     "value": "(e: MouseEvent) => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "onResizeEnd",
     "value": "(e: React.MouseEvent<Element, MouseEvent>) => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "onResizeStart",
     "value": "(e: React.MouseEvent<Element, MouseEvent>) => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "position",
     "comment": [
      "Drop position. Chosen from accepted drop positions according to pointer coordinates"
     ],
     "value": "undefined | 'top' | 'left' | 'bottom' | 'right' | 'inside'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Ref to the DOM element to perform DnD actions"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleSort",
     "value": "(e: React.MouseEvent<Element, MouseEvent>) => void",
     "optional": false
    }
   ]
  },
  "SelectionContextState": {
   "kind": "InterfaceDeclaration",
   "name": "SelectionContextState",
   "value": "SelectionContextState<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "getCellSelectionInfo",
     "value": "(row: number, column: number) => { isSelected: boolean; showTopBorder: boolean; showRightBorder: boolean; showBottomBorder: boolean; showLeftBorder: boolean; canCopyFrom: boolean; canAcceptCopy: boolean; isStartCell: boolean; }",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "SelectionManager"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectionRange",
     "value": "DataTableSelectionRange",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "SelectionManager"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "setSelectionRange",
     "value": "React.Dispatch<React.SetStateAction<DataTableSelectionRange>>",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "SelectionManager"
     },
     "optional": false
    }
   ]
  },
  "DataTableSelectionProviderProps": {
   "kind": "InterfaceDeclaration",
   "name": "DataTableSelectionProviderProps",
   "value": "DataTableSelectionProviderProps<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "name": "PropsWithChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "columns",
     "value": "DataColumnProps<TItem, TId, any>[]",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "onCopy",
     "value": "undefined | (copyFrom: DataTableSelectedCellData<TItem, TId, TFilter>[]) => void",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rows",
     "value": "DataRowProps<TItem, TId>[]",
     "optional": false
    }
   ]
  },
  "AnchorProps": {
   "kind": "InterfaceDeclaration",
   "name": "AnchorProps",
   "value": "AnchorProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    }
   ]
  },
  "BurgerProps": {
   "kind": "InterfaceDeclaration",
   "name": "BurgerProps",
   "value": "BurgerProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bg",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "burgerContentCx",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "burgerIcon",
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "crossIcon",
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "logoUrl",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderBurgerContent",
     "value": "undefined | (props: { onClose: () => void; }) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "value": "undefined | number",
     "optional": true
    }
   ]
  },
  "MainMenuDropdownProps": {
   "kind": "InterfaceDeclaration",
   "name": "MainMenuDropdownProps",
   "value": "MainMenuDropdownProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "collapseToMore",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "estimatedWidth",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderBody",
     "value": "undefined | (props: DropdownBodyProps) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "showInBurgerMenu",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    }
   ]
  },
  "MainMenuProps": {
   "kind": "InterfaceDeclaration",
   "name": "MainMenuProps",
   "value": "MainMenuProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alwaysShowBurger",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "appLogoBgColor",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "appLogoUrl",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "Burger",
     "value": "undefined | React.ComponentClass<BurgerProps, any> | React.FunctionComponent<BurgerProps>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "customerLogoBgColor",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "customerLogoHref",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "customerLogoLink",
     "value": "undefined | Link",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "customerLogoUrl",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "customerLogoWidth",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "externalGap",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isTransparent",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "value": "undefined | { render: (item: any, hiddenItems?: any[] | undefined, displayedItems?: any[] | undefined) => any; priority: number; collapsedContainer?: boolean | undefined; id: string; }[]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "logoHref",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "logoLink",
     "value": "undefined | Link",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "logoWidth",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "MainMenuDropdown",
     "value": "undefined | React.ComponentClass<MainMenuDropdownProps, any> | React.FunctionComponent<MainMenuDropdownProps>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onLogoClick",
     "value": "undefined | (e: React.MouseEvent<Element, MouseEvent>) => any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderBurger",
     "value": "undefined | (props: { onClose: () => void; }) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "serverBadge",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tooltipTechInfo",
     "value": "React.ReactNode",
     "optional": true
    }
   ]
  },
  "MainMenuLogoProps": {
   "kind": "InterfaceDeclaration",
   "name": "MainMenuLogoProps",
   "value": "MainMenuLogoProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "collapseToMore",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "estimatedWidth",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "value": "undefined | Link",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "logoBgColor",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "logoUrl",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onClick",
     "value": "undefined | (e: React.MouseEvent<Element, MouseEvent>) => any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onContextMenu",
     "value": "any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "showArrow",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "showInBurgerMenu",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    }
   ]
  },
  "MainMenuCustomElementProps": {
   "kind": "InterfaceDeclaration",
   "name": "MainMenuCustomElementProps",
   "value": "MainMenuCustomElementProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "collapseToMore",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "estimatedWidth",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "showInBurgerMenu",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    }
   ]
  },
  "IScrollSpyProps": {
   "kind": "InterfaceDeclaration",
   "name": "IScrollSpyProps",
   "value": "IScrollSpyProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "elements",
     "value": "undefined | readonly string[]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "initialActive",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "options",
     "value": "undefined | IntersectionObserverInit",
     "optional": true
    }
   ]
  },
  "IScrollSpyApi": {
   "kind": "InterfaceDeclaration",
   "name": "IScrollSpyApi",
   "value": "IScrollSpyApi",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "currentActive",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "scrollToElement",
     "value": "(item?: string | undefined) => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "setRef",
     "value": "(ref: HTMLElement) => void",
     "optional": false
    }
   ]
  },
  "RichTextViewProps": {
   "kind": "InterfaceDeclaration",
   "name": "RichTextViewProps",
   "value": "RichTextViewProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "htmlContent",
     "value": "any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    }
   ]
  },
  "PickerInputBaseProps": {
   "kind": "TypeAliasDeclaration",
   "name": "PickerInputBaseProps",
   "value": "ClassValue; highlightSearchMatches?: boolean | undefined; } | ClassValue; highlightSearchMatches?: boolean | undefined; } | ClassValue; highlightSearchMatches?: boolean | undefined; } | ClassValue; highlightSearchMatches?: boolean | undefined; }"
  },
  "PickerListBaseProps": {
   "kind": "TypeAliasDeclaration",
   "name": "PickerListBaseProps",
   "value": "SortingOption<any>): string; } | SortingOption<any>): string; } | SortingOption<any>): string; } | SortingOption<any>): string; }"
  },
  "PickerModalOptions": {
   "kind": "InterfaceDeclaration",
   "name": "PickerModalOptions",
   "value": "PickerModalOptions<TItem, TId>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "disallowClickOutside",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderFilter",
     "value": "undefined | (editableFilter: IEditable<any>) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderFooter",
     "value": "undefined | (props: IModal<any>>) => React.ReactNode",
     "optional": true
    }
   ]
  },
  "PickerModalArrayProps": {
   "kind": "TypeAliasDeclaration",
   "name": "PickerModalArrayProps",
   "value": "{ selectionMode: 'multi'; valueType: 'id'; initialValue: TId[]; } & IModal<TId[]> | { selectionMode: 'multi'; valueType: 'entity'; initialValue: TItem[]; } & IModal<TItem[]>"
  },
  "PickerModalScalarProps": {
   "kind": "TypeAliasDeclaration",
   "name": "PickerModalScalarProps",
   "value": "{ selectionMode: 'single'; valueType: 'id'; initialValue: TId; } & IModal<TId> | { selectionMode: 'single'; valueType: 'entity'; initialValue: TItem; } & IModal<TItem>"
  },
  "UsePickerInputProps": {
   "kind": "TypeAliasDeclaration",
   "name": "UsePickerInputProps",
   "value": "ClassValue; highlightSearchMatches?: boolean | undefined; } & TProps & { toggleModalOpening?(opened: boolean): void; shouldShowBody?(): boolean; } | ClassValue; highlightSearchMatches?: boolean | undefined; } & TProps & { toggleModalOpening?(opened: boolean): void; shouldShowBody?(): boolean; } | ClassValue; highlightSearchMatches?: boolean | undefined; } & TProps & { toggleModalOpening?(opened: boolean): void; shouldShowBody?(): boolean; } | ClassValue; highlightSearchMatches?: boolean | undefined; } & TProps & { toggleModalOpening?(opened: boolean): void; shouldShowBody?(): boolean; }"
  },
  "UsePickerListProps": {
   "kind": "TypeAliasDeclaration",
   "name": "UsePickerListProps",
   "value": "SortingOption<any>): string; } & TProps | SortingOption<any>): string; } & TProps | SortingOption<any>): string; } & TProps | SortingOption<any>): string; } & TProps"
  },
  "UsePickerModalProps": {
   "kind": "TypeAliasDeclaration",
   "name": "UsePickerModalProps",
   "value": "PickerModalOptions<TItem, TId> | PickerModalOptions<TItem, TId> | PickerModalOptions<TItem, TId> | PickerModalOptions<TItem, TId>"
  },
  "PickerBindingProps": {
   "kind": "TypeAliasDeclaration",
   "name": "PickerBindingProps",
   "value": "{ selectionMode: 'single'; valueType: 'id'; } & IEditable<TId> | { selectionMode: 'single'; valueType?: 'entity' | undefined; } & IEditable<TItem> | { selectionMode: 'multi'; valueType: 'id'; emptyValue?: [] | null | undefined; } & IEditable<TId[]> | { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]>"
  },
  "PickerBindingValueType": {
   "kind": "TypeAliasDeclaration",
   "name": "PickerBindingValueType",
   "value": "'scalar' | 'array'"
  },
  "SinglePickerProps": {
   "kind": "TypeAliasDeclaration",
   "name": "SinglePickerProps",
   "value": "{ selectionMode: 'single'; valueType: 'id'; } & IEditable<TId> | { selectionMode: 'single'; valueType?: 'entity' | undefined; } & IEditable<TItem>"
  },
  "ArrayPickerProps": {
   "kind": "TypeAliasDeclaration",
   "name": "ArrayPickerProps",
   "value": "{ selectionMode: 'multi'; valueType: 'id'; emptyValue?: [] | null | undefined; } & IEditable<TId[]> | { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]>"
  },
  "PickerBindingHelper": {
   "kind": "InterfaceDeclaration",
   "name": "PickerBindingHelper",
   "value": "PickerBindingHelper<TItem, TId>",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "applyValueToDataSourceState",
     "value": "(dsState: DataSourceState<any, TId>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "dataSourceStateToValue",
     "value": "(dsState: IDataSource<TItem, TId, any>) => any",
     "optional": false
    }
   ]
  },
  "PickerBodyBaseProps": {
   "kind": "InterfaceDeclaration",
   "name": "PickerBodyBaseProps",
   "value": "PickerBodyBaseProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "exactRowsCount",
     "comment": [
      "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListCounts"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fixedBodyPosition",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReloading",
     "comment": [
      "Signals that data is reloading on search/sort/filter/reload."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "knownRowsCount",
     "comment": [
      "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
      " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
      " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListCounts"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "value": "undefined | (e: React.KeyboardEvent<HTMLElement>) => void",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderNotFound",
     "value": "undefined | () => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rows",
     "value": "React.ReactNode[]",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowsCount",
     "comment": [
      "Count of rows, after applying filter, and folding on tree nodes.",
      " Obsolete! Please switch to exactRowsCount / knownRowsCount"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListCounts"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "scheduleUpdate",
     "value": "undefined | () => void",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "value": "IEditable<string>",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "value": "undefined | ICheckable",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "showSearch",
     "value": "undefined | false | true | 'auto'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "totalCount",
     "comment": [
      "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListCounts"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "DataSourceKeyboardParams": {
   "kind": "InterfaceDeclaration",
   "name": "DataSourceKeyboardParams",
   "value": "DataSourceKeyboardParams",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "editMode",
     "value": "undefined | 'dropdown' | 'modal'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "listView",
     "value": "IDataSourceView<any, any, any>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rows",
     "value": "DataRowProps<any, any>[]",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "PickerTogglerProps": {
   "kind": "InterfaceDeclaration",
   "name": "PickerTogglerProps",
   "value": "PickerTogglerProps<TItem, TId>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cancelIcon",
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "closePickerBody",
     "value": "() => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableClear",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableSearch",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "entityName",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getName",
     "value": "undefined | (item: TItem) => string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disables component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isSingleLine",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxItems",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "minCharsToSearch",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBasicPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "value": "undefined | (e: React.KeyboardEvent<HTMLElement>) => void",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "pickerMode",
     "value": "'single' | 'multi'",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderItem",
     "value": "undefined | (props: DataRowProps<TItem, TId>) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "searchPosition",
     "value": "'none' | 'input' | 'body'",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "selectedRowsCount",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selection",
     "value": "undefined | DataRowProps<TItem, TId>[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  }
 },
 "@epam/uui": {
  "ButtonColor": {
   "kind": "TypeAliasDeclaration",
   "name": "ButtonColor",
   "value": "'accent' | 'primary' | 'secondary' | 'negative'"
  },
  "ButtonMods": {
   "kind": "InterfaceDeclaration",
   "name": "ButtonMods",
   "value": "ButtonMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'accent' | 'primary' | 'secondary' | 'negative'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'none' | 'solid' | 'outline' | 'ghost'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48' | '18'",
     "optional": true
    }
   ]
  },
  "ButtonProps": {
   "kind": "TypeAliasDeclaration",
   "name": "ButtonProps",
   "value": "ButtonProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'accent' | 'primary' | 'secondary' | 'negative'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "ButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "value": "undefined | null | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'none' | 'solid' | 'outline' | 'ghost'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "ButtonMods"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBasicPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48' | '18'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "ButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    }
   ]
  },
  "IconColor": {
   "kind": "TypeAliasDeclaration",
   "name": "IconColor",
   "value": "'secondary' | 'info' | 'success' | 'warning' | 'error' | 'default'"
  },
  "IconButtonMods": {
   "kind": "InterfaceDeclaration",
   "name": "IconButtonMods",
   "value": "IconButtonMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'secondary' | 'info' | 'success' | 'warning' | 'error' | 'default'",
     "optional": true
    }
   ]
  },
  "IconButtonProps": {
   "kind": "InterfaceDeclaration",
   "name": "IconButtonProps",
   "value": "IconButtonProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'secondary' | 'info' | 'success' | 'warning' | 'error' | 'default'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "IconButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    }
   ]
  },
  "LinkButtonColorType": {
   "kind": "TypeAliasDeclaration",
   "name": "LinkButtonColorType",
   "value": "'primary' | 'secondary' | 'contrast'"
  },
  "LinkButtonMods": {
   "kind": "InterfaceDeclaration",
   "name": "LinkButtonMods",
   "value": "LinkButtonMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'primary' | 'secondary' | 'contrast'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "optional": true
    }
   ]
  },
  "LinkButtonProps": {
   "kind": "TypeAliasDeclaration",
   "name": "LinkButtonProps",
   "value": "LinkButtonProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'primary' | 'secondary' | 'contrast'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "LinkButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "value": "undefined | null | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBasicPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "LinkButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    }
   ]
  },
  "TabButtonMods": {
   "kind": "InterfaceDeclaration",
   "name": "TabButtonMods",
   "value": "TabButtonMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '36' | '48' | '60'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "withNotify",
     "value": "undefined | false | true",
     "optional": true
    }
   ]
  },
  "TabButtonProps": {
   "kind": "TypeAliasDeclaration",
   "name": "TabButtonProps",
   "value": "TabButtonProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "value": "undefined | null | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBasicPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '36' | '48' | '60'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TabButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "withNotify",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TabButtonMods"
     },
     "optional": true
    }
   ]
  },
  "VerticalTabButtonProps": {
   "kind": "TypeAliasDeclaration",
   "name": "VerticalTabButtonProps",
   "value": "VerticalTabButtonProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "value": "undefined | null | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBasicPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '36' | '48' | '60'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TabButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "withNotify",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TabButtonMods"
     },
     "optional": true
    }
   ]
  },
  "DatePickerProps": {
   "kind": "InterfaceDeclaration",
   "name": "DatePickerProps",
   "value": "DatePickerProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bodyCx",
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableClear",
     "comment": [
      "Disable clearing date value (e.g. via cross icon)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "comment": [
      "Filter selectable days. Days, for which this callback returns false - will be disabled"
     ],
     "value": "undefined | (day: Dayjs) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "format",
     "comment": [
      "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "Styles for input and body components in DatePicker"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "comment": [
      "If this function returns true, the day will be highlighted as holiday"
     ],
     "value": "undefined | (day: Dayjs) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'form' | 'cell' | 'inline'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "IHasEditMode"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "value": "undefined | (e?: React.FocusEvent<HTMLInputElement, Element> | undefined) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "value": "undefined | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Attributes for HTML Element"
     ],
     "value": "undefined | { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "comment": [
      "Overrides rendering of the single day. For example, to highlight certain days"
     ],
     "value": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderFooter",
     "comment": [
      "render prop to add a custom footer inside the DatePicker dropdown body"
     ],
     "value": "undefined | () => React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DatePickerCoreProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderTarget",
     "comment": [
      "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach DatePicker to other components, e.g. Buttons"
     ],
     "value": "undefined | (props: IDropdownToggler) => React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "SizeMod"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "DatePickerBodyProps": {
   "kind": "InterfaceDeclaration",
   "name": "DatePickerBodyProps",
   "value": "DatePickerBodyProps",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "changeIsOpen",
     "value": "undefined | (newValue: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DatePickerBodyBaseOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "value": "undefined | (day: Dayjs) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DatePickerBodyBaseOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getDayCX",
     "value": "undefined | (day: Dayjs) => string[]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "value": "undefined | (day: Dayjs) => boolean",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "value": "undefined | RangeDatePickerPresets",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DatePickerBodyBaseOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "value": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DatePickerBodyBaseOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "setDisplayedDateAndView",
     "value": "(displayedDate: ViewType) => void",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DatePickerBodyBaseProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "setSelectedDate",
     "value": "(newDate: TSelection) => void",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DatePickerBodyBaseProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "value": "PickerBodyValue<TSelection>",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DatePickerBodyBaseProps"
     },
     "optional": false
    }
   ]
  },
  "RangeDatePickerProps": {
   "kind": "InterfaceDeclaration",
   "name": "RangeDatePickerProps",
   "value": "RangeDatePickerProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bodyCx",
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableClear",
     "comment": [
      "Disables clearing component (with the cross icon)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "comment": [
      "Filter selectable days. Days, for which this callback returns false - will be disabled"
     ],
     "value": "undefined | (day: Dayjs) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "format",
     "comment": [
      "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getPlaceholder",
     "value": "undefined | (type: InputType) => string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "Styles for input and body components in RangeDatePicker"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "comment": [
      "If this function returns true, the day will be highlighted as holiday"
     ],
     "value": "undefined | (day: Dayjs) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<HTMLInputElement, Element>, inputType: 'from' | 'to') => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<HTMLInputElement, Element>, inputType: 'from' | 'to') => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onOpenChange",
     "comment": [
      "Called when component is opened/closed"
     ],
     "value": "undefined | (isOpen: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "value": "undefined | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "comment": [
      "Range presets (like 'this week', 'this month', etc.) to display at the right of the Picker's body.",
      " UUI provides defaults in the 'rangeDatePickerPresets' exported variable - you can use it as is, or build on top of it (e.g. add your presets)"
     ],
     "value": "undefined | RangeDatePickerPresets",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "rawProps as HTML attributes"
     ],
     "value": "undefined | { from?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; to?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "comment": [
      "Overrides rendering of the single day. For example, to highlight certain days"
     ],
     "value": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderFooter",
     "comment": [
      "Allows to add a custom footer to the Picker's dropdown body"
     ],
     "value": "undefined | (value: RangeDatePickerValue) => React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderTarget",
     "comment": [
      "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach RangeDatePicker to other components, e.g. Buttons"
     ],
     "value": "undefined | (props: IDropdownToggler) => React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "BaseRangeDatePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "SizeMod"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "InputType": {
   "kind": "TypeAliasDeclaration",
   "name": "InputType",
   "value": "'from' | 'to'"
  },
  "pickerPart": {
   "kind": "TypeAliasDeclaration",
   "name": "pickerPart",
   "value": "'from' | 'to'"
  },
  "RangeDatePickerValue": {
   "kind": "InterfaceDeclaration",
   "name": "RangeDatePickerValue",
   "value": "RangeDatePickerValue",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "from",
     "value": "null | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "to",
     "value": "null | string",
     "optional": true
    }
   ]
  },
  "RangeDatePickerBodyProps": {
   "kind": "InterfaceDeclaration",
   "name": "RangeDatePickerBodyProps",
   "value": "RangeDatePickerBodyProps<T>",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "changeIsOpen",
     "value": "undefined | (newValue: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DatePickerBodyBaseOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "filter",
     "value": "undefined | (day: Dayjs) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DatePickerBodyBaseOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "focusPart",
     "value": "'from' | 'to'",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "value": "undefined | (day: Dayjs) => boolean",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "value": "undefined | RangeDatePickerPresets",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DatePickerBodyBaseOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderDay",
     "value": "undefined | (day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DatePickerBodyBaseOptions"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderFooter",
     "value": "undefined | () => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderHeader",
     "value": "undefined | (props: PickerBodyValue<string>>) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "DropMarkerProps": {
   "kind": "InterfaceDeclaration",
   "name": "DropMarkerProps",
   "value": "DropMarkerProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "classNames",
     "comment": [
      "CSS class names to add to the element.",
      " Some of these markers are used by the DndActor internally, so they must be added even if no used by component itself to apply styles."
     ],
     "value": "string[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dragData",
     "comment": [
      "Drag data associated with the element. Specified always, even if there is no DnD operation happening."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "enableBlocker",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "eventHandlers",
     "comment": [
      "Event handlers. Component is expected to pass these events to the top element it renders.",
      " As onClick event on the element will be overwritten, use DndActorProps.onClick to receive click events on the element"
     ],
     "value": "{ onTouchStart?(e: React.TouchEvent<Element>): void; onPointerDown?(e: React.PointerEvent<Element>): void; onPointerEnter?(e: React.PointerEvent<any>): void; onPointerMove?(e: React.PointerEvent<any>): void; onPointerLeave?(e: React.PointerEvent<any>): void; onPointerUp?(e: React.PointerEvent<any>): void; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDndInProgress",
     "comment": [
      "True if any drag and drop operation is in progress, even if the element not being dragged"
     ],
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggable",
     "comment": [
      "True, if the element can be dragged. Doesn't mean that DnD is active."
     ],
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggedOut",
     "comment": [
      "True, if the element is dragged out. True for placeholder left when it's element it dragged out. False for Drag Ghost."
     ],
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggedOver",
     "comment": [
      "True, if the element is being dragged over, even if drop is not accepted by the element (canAcceptDrop returned false)"
     ],
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDragGhost",
     "comment": [
      "True, if the element is rendered as Drag Ghost. All other flags are false for drag ghost."
     ],
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDropAccepted",
     "comment": [
      "True, if the element is being dragged over, and drop on it is accepted - canAcceptDrop returned true"
     ],
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "position",
     "comment": [
      "Drop position. Chosen from accepted drop positions according to pointer coordinates"
     ],
     "value": "undefined | 'left' | 'right' | 'top' | 'bottom' | 'inside'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Ref to the DOM element to perform DnD actions"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DndActorRenderParams"
     },
     "optional": true
    }
   ]
  },
  "CheckboxMods": {
   "kind": "InterfaceDeclaration",
   "name": "CheckboxMods",
   "value": "CheckboxMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'form' | 'cell'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '18' | '12'",
     "optional": true
    }
   ]
  },
  "CheckboxProps": {
   "kind": "TypeAliasDeclaration",
   "name": "CheckboxProps",
   "value": "CheckboxProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Check icon"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "CheckboxProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "CheckboxProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "indeterminate",
     "comment": [
      "Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICheckable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "indeterminateIcon",
     "comment": [
      "Indeterminate state icon"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "CheckboxProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasLabel"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'form' | 'cell'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "CheckboxMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderLabel",
     "value": "undefined | () => React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "CheckboxProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '18' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "CheckboxMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "RadioInputMods": {
   "kind": "InterfaceDeclaration",
   "name": "RadioInputMods",
   "value": "RadioInputMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '18' | '12'",
     "optional": true
    }
   ]
  },
  "RadioInputProps": {
   "kind": "TypeAliasDeclaration",
   "name": "RadioInputProps",
   "value": "RadioInputProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "RadioInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "RadioInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasLabel"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderLabel",
     "value": "undefined | () => React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "RadioInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '18' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RadioInputMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "RadioInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "SwitchMods": {
   "kind": "InterfaceDeclaration",
   "name": "SwitchMods",
   "value": "SwitchMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '24' | '18' | '12'",
     "optional": true
    }
   ]
  },
  "TextInputMods": {
   "kind": "InterfaceDeclaration",
   "name": "TextInputMods",
   "value": "TextInputMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'form' | 'cell' | 'inline'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "IHasEditMode"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "optional": true
    }
   ]
  },
  "TextInputProps": {
   "kind": "InterfaceDeclaration",
   "name": "TextInputProps",
   "value": "TextInputProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "acceptIcon",
     "comment": [
      "Overrides accept (check) icon"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoComplete",
     "comment": [
      "Standard <a href='https://www.w3schools.com/tags/att_input_autocomplete.asp'>autocomplete attribute</a>"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "comment": [
      "Put focus on the element, when component is mounted"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cancelIcon",
     "comment": [
      "Overrides cancel (cross) icon"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Overrides dropdown (chevron) icon"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML ID attribute for input"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class(es) to put to the HTML Input element"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputMode",
     "comment": [
      "Standard <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode'>inputMode attribute</a>"
     ],
     "value": "undefined | 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "comment": [
      "Maximum input length in characters"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'form' | 'cell' | 'inline'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "IHasEditMode"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "comment": [
      "Standard <a href='https://www.w3schools.com/tags/att_input_name.asp'>name attribute</a>"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onAccept",
     "comment": [
      "Enables accept (check) icon, and fires when the icon is clicked"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onCancel",
     "comment": [
      "Enables cancel (cross) icon, and fires when the icon is clicked"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "comment": [
      "keydown event handler to put on the HTML input element"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderInput",
     "comment": [
      "overrides rendering of HTML Input element"
     ],
     "value": "undefined | (props: IRenderInputProps) => JSX.Element",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TextInputMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "comment": [
      "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "UuiMultiSwitchColor": {
   "kind": "TypeAliasDeclaration",
   "name": "UuiMultiSwitchColor",
   "value": "'primary' | 'secondary'"
  },
  "MultiSwitchProps": {
   "kind": "InterfaceDeclaration",
   "name": "MultiSwitchProps",
   "value": "MultiSwitchProps<TValue>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'primary' | 'secondary'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "value": "MultiSwitchItem<TValue>[]",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "SizeMod"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "NumericInputMods": {
   "kind": "InterfaceDeclaration",
   "name": "NumericInputMods",
   "value": "NumericInputMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'form' | 'cell' | 'inline'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "IHasEditMode"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "SizeMod"
     },
     "optional": true
    }
   ]
  },
  "NumericInputProps": {
   "kind": "TypeAliasDeclaration",
   "name": "NumericInputProps",
   "value": "NumericInputProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "align",
     "comment": [
      "Align text inside the component. Useful for tables (in cell-mode) - to align numbers in table column"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "NumericInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableArrows",
     "comment": [
      "Turn off up/down (increase/decrease) buttons"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "NumericInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "disableLocaleFormatting",
     "comment": [
      "Turns off locale-based formatting, standard Number.toString() is used instead"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "NumericInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "downIcon",
     "comment": [
      "Overrides the down/decrease icon"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "NumericInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "formatOptions",
     "comment": [
      "Number formatting options. See #{link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat}"
     ],
     "value": "undefined | Intl.NumberFormatOptions",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "NumericInputProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "formatValue",
     "comment": [
      "A function to convert current input value to displayed text.",
      " Overrides standard Intl-based formatting.",
      " If passed, only maximumFractionDigits considered from formatOptions when both properties provided.",
      " Note, that formatting is used when input is out of focus."
     ],
     "value": "undefined | (value: number) => string",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "NumericInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML ID"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "NumericInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS classes to put directly on the Input element"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "NumericInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "max",
     "comment": [
      "Maximum value (default is Number.MAX_SAFE_INTEGER)"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "NumericInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "min",
     "comment": [
      "Minimum value (default is 0)"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "NumericInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'form' | 'cell' | 'inline'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "IHasEditMode"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "SizeMod"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "step",
     "comment": [
      "Increase/decrease step (for icons and )"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "NumericInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "upIcon",
     "comment": [
      "Overrides the up/increase icon"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "NumericInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "TextAreaMods": {
   "kind": "InterfaceDeclaration",
   "name": "TextAreaMods",
   "value": "TextAreaMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'form' | 'cell' | 'inline'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "IHasEditMode"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "optional": true
    }
   ]
  },
  "TextAreaProps": {
   "kind": "TypeAliasDeclaration",
   "name": "TextAreaProps",
   "value": "TextAreaProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "comment": [
      "Automatically sets input focus to component, when its mounted"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextAreaProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoSize",
     "comment": [
      "Enables auto-resizing height to fit text. Rows prop is ignored in this mode"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextAreaProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML id attribute to put on the HTML Input element"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextAreaProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class names to put to the HTML Input element"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextAreaProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "comment": [
      "Maximum text length, in characters"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextAreaProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'form' | 'cell' | 'inline'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "IHasEditMode"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "comment": [
      "onKeyDown event handler to put on HTML Input"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextAreaProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rows",
     "comment": [
      "Adjust height to fit specified number or text rows. HTML TextArea attribute."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextAreaProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TextAreaMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "TimePickerProps": {
   "kind": "InterfaceDeclaration",
   "name": "TimePickerProps",
   "value": "TimePickerProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "bodyCx",
     "comment": [
      "CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "BaseTimePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "format",
     "value": "undefined | 12 | 24",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "BaseTimePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "BaseTimePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "minutesStep",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'form' | 'cell' | 'inline'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "IHasEditMode"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "value": "undefined | { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "BaseTimePickerProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderTarget",
     "value": "undefined | (props: IDropdownToggler) => React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "BaseTimePickerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "SizeMod"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "AccordionMods": {
   "kind": "InterfaceDeclaration",
   "name": "AccordionMods",
   "value": "AccordionMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'inline' | 'block'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "value": "undefined | '18' | '12' | '0' | '6'",
     "optional": true
    }
   ]
  },
  "FlexCellMods": {
   "kind": "TypeAliasDeclaration",
   "name": "FlexCellMods",
   "value": "FlexCellMods"
  },
  "RowMods": {
   "kind": "InterfaceDeclaration",
   "name": "RowMods",
   "value": "RowMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "borderBottom",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "value": "undefined | number | '24' | '36' | '18' | '12' | '6'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "margin",
     "value": "undefined | '24' | '12'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "value": "undefined | '24' | '18' | '12' | '6'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "value": "undefined | number | '24' | '36' | '18' | '12' | '6'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | null | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowSizeMod"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "spacing",
     "value": "undefined | '18' | '12' | '6'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "topShadow",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "vPadding",
     "value": "undefined | '24' | '36' | '48' | '18' | '12'",
     "optional": true
    }
   ]
  },
  "FlexRowProps": {
   "kind": "InterfaceDeclaration",
   "name": "FlexRowProps",
   "value": "FlexRowProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignItems",
     "comment": [
      "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
     ],
     "value": "undefined | 'top' | 'bottom' | 'center' | 'stretch'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FlexRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "undefined | null | string | number",
     "inheritedFrom": {
      "name": "Attributes"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    }
   ]
  },
  "PanelMods": {
   "kind": "InterfaceDeclaration",
   "name": "PanelMods",
   "value": "PanelMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "margin",
     "value": "undefined | '24'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "shadow",
     "value": "undefined | false | true",
     "optional": true
    }
   ]
  },
  "LabeledInputMods": {
   "kind": "InterfaceDeclaration",
   "name": "LabeledInputMods",
   "value": "LabeledInputMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "SizeMod"
     },
     "optional": true
    }
   ]
  },
  "AlertProps": {
   "kind": "InterfaceDeclaration",
   "name": "AlertProps",
   "value": "AlertProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "actions",
     "comment": [
      "List of actions to display in the alert. Each action has name and 'action' callback"
     ],
     "value": "undefined | notificationAction[]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Alert color"
     ],
     "value": "undefined | 'info' | 'success' | 'warning' | 'error'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "An optional icon to show on the left of the alert"
     ],
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClose",
     "comment": [
      "When specified, a close icon is rendered. onClose callback will be called on clicking the close icon"
     ],
     "value": "undefined | () => void",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "comment": [
      "Component size. If omitted, 48 size will be used."
     ],
     "value": "undefined | '36' | '48'",
     "optional": true
    }
   ]
  },
  "DropdownContainerMods": {
   "kind": "InterfaceDeclaration",
   "name": "DropdownContainerMods",
   "value": "DropdownContainerMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "padding",
     "value": "undefined | '24' | '30' | '18' | '12' | '6'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "vPadding",
     "value": "undefined | '24' | '30' | '48' | '18' | '12' | '6'",
     "optional": true
    }
   ]
  },
  "DropdownContainerProps": {
   "kind": "InterfaceDeclaration",
   "name": "DropdownContainerProps",
   "value": "DropdownContainerProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "arrowProps",
     "value": "undefined | PopperArrowProps",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "as",
     "comment": [
      "Pass element name if you need to change internal FocusLock div element, to any other."
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DropdownContainerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnEsc",
     "comment": [
      "Pass true to handle Escape key press and call props.onClose().",
      " If omitted, true value will be used. It's used if focusLock=true."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DropdownContainerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "focusLock",
     "comment": [
      "Pass true to wrap DropdownContainer with FocusLock component to support keyboard navigation.",
      " If omitted, true value will be used.",
      "",
      " After DropdownContainer appeared the focus will be set on the first focusable element inside."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DropdownContainerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "height",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DropdownContainerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "lockProps",
     "comment": [
      "Pass any extra props to the FocusLock wrapper."
     ],
     "value": "undefined | Record<string, any>",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DropdownContainerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxWidth",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DropdownContainerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "value": "undefined | '24' | '30' | '18' | '12' | '6'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "DropdownContainerMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "persistentFocus",
     "comment": [
      "Pass true to lock focus within DropdownContainer.",
      " If omitted, true value will be used. It's used if focusLock=true."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DropdownContainerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "value": "undefined | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "returnFocus",
     "comment": [
      "Pass true to return focus into initial position on unmount.",
      " If omitted, true value will be used. It's used if focusLock=true."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DropdownContainerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "scheduleUpdate",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "shards",
     "comment": [
      "Pass an array of ref pointing to the nodes, which focus lock should consider and a part of it. This is a way of focus scattering."
     ],
     "value": "undefined | React.RefObject<HTMLElement>[]",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DropdownContainerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "showArrow",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DropdownContainerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "value": "undefined | React.CSSProperties",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DropdownContainerProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "togglerHeight",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "togglerWidth",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "vPadding",
     "value": "undefined | '24' | '30' | '48' | '18' | '12' | '6'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "DropdownContainerMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "value": "undefined | number | 'auto'",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "DropdownContainerProps"
     },
     "optional": true
    }
   ]
  },
  "IDropdownMenuItemProps": {
   "kind": "InterfaceDeclaration",
   "name": "IDropdownMenuItemProps",
   "value": "IDropdownMenuItemProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "indent",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isSelected",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    }
   ]
  },
  "IDropdownMenuContainer": {
   "kind": "InterfaceDeclaration",
   "name": "IDropdownMenuContainer",
   "value": "IDropdownMenuContainer",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "arrowProps",
     "value": "undefined | PopperArrowProps",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnKey",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "comment": [
      "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
     ],
     "value": "undefined | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "scheduleUpdate",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "value": "undefined | React.CSSProperties",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "VPanelProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "togglerHeight",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "togglerWidth",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownBodyProps"
     },
     "optional": true
    }
   ]
  },
  "IDropdownControlKeys": {
   "kind": "EnumDeclaration",
   "name": "IDropdownControlKeys",
   "value": "IDropdownControlKeys.ENTER | IDropdownControlKeys.ESCAPE | IDropdownControlKeys.LEFT_ARROW | IDropdownControlKeys.RIGHT_ARROW | IDropdownControlKeys.UP_ARROW | IDropdownControlKeys.DOWN_ARROW"
  },
  "ModalWindowMods": {
   "kind": "InterfaceDeclaration",
   "name": "ModalWindowMods",
   "value": "ModalWindowMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "height",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "value": "undefined | number",
     "optional": true
    }
   ]
  },
  "ModalWindowProps": {
   "kind": "TypeAliasDeclaration",
   "name": "ModalWindowProps",
   "value": "ModalWindowProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "height",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "ModalWindowMods"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "style",
     "value": "undefined | React.CSSProperties",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "VPanelProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "ModalWindowMods"
     },
     "optional": true
    }
   ]
  },
  "ModalHeaderProps": {
   "kind": "InterfaceDeclaration",
   "name": "ModalHeaderProps",
   "value": "ModalHeaderProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "borderBottom",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "value": "undefined | number | '24' | '36' | '18' | '12' | '6'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "margin",
     "value": "undefined | '24' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "value": "undefined | () => any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ModalHeaderCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "value": "undefined | '24' | '18' | '12' | '6'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "value": "undefined | number | '24' | '36' | '18' | '12' | '6'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | null | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowSizeMod"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "spacing",
     "value": "undefined | '18' | '12' | '6'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "title",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ModalHeaderCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "topShadow",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "vPadding",
     "value": "undefined | '24' | '36' | '48' | '18' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    }
   ]
  },
  "ModalFooterProps": {
   "kind": "InterfaceDeclaration",
   "name": "ModalFooterProps",
   "value": "ModalFooterProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "borderBottom",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "borderTop",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ModalFooterCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "value": "undefined | number | '24' | '36' | '18' | '12' | '6'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "margin",
     "value": "undefined | '24' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "value": "undefined | '24' | '18' | '12' | '6'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "value": "undefined | number | '24' | '36' | '18' | '12' | '6'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | null | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowSizeMod"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "spacing",
     "value": "undefined | '18' | '12' | '6'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "topShadow",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "vPadding",
     "value": "undefined | '24' | '36' | '48' | '18' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    }
   ]
  },
  "DefaultNotificationProps": {
   "kind": "InterfaceDeclaration",
   "name": "DefaultNotificationProps",
   "value": "DefaultNotificationProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "actions",
     "value": "undefined | NotificationAction[]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "clearTimer",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClose",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onSuccess",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "refreshTimer",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    }
   ]
  },
  "NotificationCardProps": {
   "kind": "InterfaceDeclaration",
   "name": "NotificationCardProps",
   "value": "NotificationCardProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "actions",
     "value": "undefined | NotificationAction[]",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "DefaultNotificationProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "clearTimer",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'info' | 'success' | 'warning' | 'error'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClose",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onSuccess",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "refreshTimer",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    }
   ]
  },
  "TooltipMods": {
   "kind": "InterfaceDeclaration",
   "name": "TooltipMods",
   "value": "TooltipMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Tooltip color"
     ],
     "value": "undefined | 'default' | 'contrast' | 'critical'",
     "optional": true
    }
   ]
  },
  "TooltipProps": {
   "kind": "TypeAliasDeclaration",
   "name": "TooltipProps",
   "value": "TooltipProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "boundaryElement",
     "value": "undefined | HTMLElement | HTMLElement[] | 'clippingParents'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "comment": [
      "React Node(s) to show tooltip for"
     ],
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeBodyOnTogglerHidden",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeDelay",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnMouseLeave",
     "value": "undefined | false | 'toggler' | 'boundary'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Tooltip color"
     ],
     "value": "undefined | 'default' | 'contrast' | 'critical'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TooltipMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "content",
     "comment": [
      "Content to show in the tooltip (ReactNode)"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxWidth",
     "comment": [
      "Max width of tooltip"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "modifiers",
     "value": "undefined | (Modifier<any, object>>)[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "offset",
     "comment": [
      "See <a href='https://popper.js.org/docs/v2/modifiers/offset/'>Popper docs</a>"
     ],
     "value": "undefined | OffsetsFunction | [number | null | undefined, number | null | undefined]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "openDelay",
     "comment": [
      "Should we close dropdown on click on the Toggler, if it's already open? Default is true."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "value": "undefined | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "portalTarget",
     "value": "undefined | HTMLElement",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderContent",
     "comment": [
      "Alternative to 'content' prop, you can pass a render function.",
      " The function will only be called when content is shown, this can save performance."
     ],
     "value": "undefined | () => any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "ConfirmationModalWindowProps": {
   "kind": "InterfaceDeclaration",
   "name": "ConfirmationModalWindowProps",
   "value": "ConfirmationModalWindowProps",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "abort",
     "value": "(result?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IModal"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "bodyContent",
     "value": "any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "value": "any",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "hideCancelButton",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IModal"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IModal"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "success",
     "value": "(result: TResult) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IModal"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "zIndex",
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IModal"
     },
     "optional": false
    }
   ]
  },
  "DataPickerBodyProps": {
   "kind": "InterfaceDeclaration",
   "name": "DataPickerBodyProps",
   "value": "DataPickerBodyProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "editMode",
     "value": "undefined | 'dropdown' | 'modal'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "exactRowsCount",
     "comment": [
      "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListCounts"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fixedBodyPosition",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "PickerBodyBaseProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReloading",
     "comment": [
      "Signals that data is reloading on search/sort/filter/reload."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "knownRowsCount",
     "comment": [
      "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
      " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
      " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListCounts"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxHeight",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "value": "undefined | (e: React.KeyboardEvent<HTMLElement>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "PickerBodyBaseProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderNotFound",
     "value": "undefined | () => React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "PickerBodyBaseProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rows",
     "value": "React.ReactNode[]",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "PickerBodyBaseProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowsCount",
     "comment": [
      "Count of rows, after applying filter, and folding on tree nodes.",
      " Obsolete! Please switch to exactRowsCount / knownRowsCount"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListCounts"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "scheduleUpdate",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "PickerBodyBaseProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "search",
     "value": "IEditable<string>",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "PickerBodyBaseProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "searchSize",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "value": "undefined | ICheckable",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectionMode",
     "value": "undefined | 'single' | 'multi'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "showSearch",
     "value": "undefined | false | true | 'auto'",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "PickerBodyBaseProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "totalCount",
     "comment": [
      "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListCounts"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "DataPickerRowProps": {
   "kind": "InterfaceDeclaration",
   "name": "DataPickerRowProps",
   "value": "DataPickerRowProps<TItem, TId>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignActions",
     "value": "undefined | 'top' | 'center'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "alignItems",
     "comment": [
      "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
     ],
     "value": "undefined | 'top' | 'bottom' | 'center' | 'stretch'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FlexRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "borderBottom",
     "value": "undefined | 'none' | 'gray20'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "checkbox",
     "comment": [
      "If row needs a checkbox, this field should be specified and it props can be configured here"
     ],
     "value": "undefined | { isVisible: boolean; } & ICanBeInvalid",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "comment": [
      "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "value": "undefined | number | '24' | '36' | '18' | '12' | '6'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FlexRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "depth",
     "comment": [
      "Depth of the row in tree, 0 for the top-level"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dnd",
     "comment": [
      "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
     ],
     "value": "undefined | IDndActor<any, any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "ID of the TItem rows displays"
     ],
     "value": "TId",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "indent",
     "comment": [
      "Indent of the item, to show hierarchy.",
      "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
      "  if all children of node has no children, all nodes would get the same indent as parent."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "index",
     "comment": [
      "Index of the row, from the top of the list. This doesn't account any hierarchy."
     ],
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isCheckable",
     "comment": [
      "True if row has checkbox and can be checkable"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isChecked",
     "comment": [
      "True if row is checked with checkbox"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenChecked",
     "comment": [
      "True if some of row's children are checked.",
      " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenSelected",
     "comment": [
      "True if any of row's children is selected."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFocused",
     "comment": [
      "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFoldable",
     "comment": [
      "True if row be folded or unfolded (usually because it contains children)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFolded",
     "comment": [
      "True if row is currently folded"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLastChild",
     "comment": [
      "True if row is the last child of his parent"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLoading",
     "comment": [
      "True if row is in loading state. 'value' is empty in this case"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isPinned",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isSelectable",
     "comment": [
      "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isSelected",
     "comment": [
      "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isUnknown",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "undefined | null | string | number",
     "inheritedFrom": {
      "name": "Attributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Can be specified to make row act as a link (plain or SPA)"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onCheck",
     "comment": [
      "Handles row checkbox change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onFocus",
     "comment": [
      "Handles row focusing."
     ],
     "value": "undefined | (focusedIndex: number) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onFold",
     "comment": [
      "Handles row folding change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onSelect",
     "comment": [
      "Handles row selection.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "value": "undefined | '24' | '12'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "parentId",
     "comment": [
      "ID of the parent TItem"
     ],
     "value": "undefined | TId",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "path",
     "comment": [
      "Hierarchical path from the root node to the item (excluding the item itself)"
     ],
     "value": "undefined | DataRowPathItem<TId, TItem>[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "pin",
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderItem",
     "value": "(item: TItem, rowProps: DataRowProps<TItem, TId>) => React.ReactNode",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "comment": [
      "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "value": "undefined | number | '24' | '36' | '18' | '12' | '6'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FlexRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowKey",
     "comment": [
      "Key to be used as component's key when rendering. Usually, it's stringified ID"
     ],
     "value": "string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48' | '60'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "PickerInputProps": {
   "kind": "TypeAliasDeclaration",
   "name": "PickerInputProps",
   "value": "PickerInputProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'form' | 'cell' | 'inline'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "IHasEditMode"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "SizeMod"
     },
     "optional": true
    }
   ]
  },
  "PickerItemProps": {
   "kind": "InterfaceDeclaration",
   "name": "PickerItemProps",
   "value": "PickerItemProps<TItem, TId>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignItems",
     "comment": [
      "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
     ],
     "value": "undefined | 'top' | 'bottom' | 'center' | 'stretch'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FlexRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "avatarUrl",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "checkbox",
     "comment": [
      "If row needs a checkbox, this field should be specified and it props can be configured here"
     ],
     "value": "undefined | { isVisible: boolean; } & ICanBeInvalid",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "comment": [
      "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "value": "undefined | number | '24' | '36' | '18' | '12' | '6'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FlexRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dataSourceState",
     "value": "undefined | DataSourceState<Record<string, any>, any>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "depth",
     "comment": [
      "Depth of the row in tree, 0 for the top-level"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dnd",
     "comment": [
      "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
     ],
     "value": "undefined | IDndActor<any, any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "highlightSearchMatches",
     "comment": [
      "Enables highlighting of the items' text with search-matching results. ",
      " @default true"
     ],
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "ID of the TItem rows displays"
     ],
     "value": "TId",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "indent",
     "comment": [
      "Indent of the item, to show hierarchy.",
      "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
      "  if all children of node has no children, all nodes would get the same indent as parent."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "index",
     "comment": [
      "Index of the row, from the top of the list. This doesn't account any hierarchy."
     ],
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isCheckable",
     "comment": [
      "True if row has checkbox and can be checkable"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isChecked",
     "comment": [
      "True if row is checked with checkbox"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenChecked",
     "comment": [
      "True if some of row's children are checked.",
      " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenSelected",
     "comment": [
      "True if any of row's children is selected."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFocused",
     "comment": [
      "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFoldable",
     "comment": [
      "True if row be folded or unfolded (usually because it contains children)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFolded",
     "comment": [
      "True if row is currently folded"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLastChild",
     "comment": [
      "True if row is the last child of his parent"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLoading",
     "comment": [
      "True if row is in loading state. 'value' is empty in this case"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isPinned",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isSelectable",
     "comment": [
      "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isSelected",
     "comment": [
      "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isUnknown",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "undefined | null | string | number",
     "inheritedFrom": {
      "name": "Attributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Can be specified to make row act as a link (plain or SPA)"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onCheck",
     "comment": [
      "Handles row checkbox change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onFocus",
     "comment": [
      "Handles row focusing."
     ],
     "value": "undefined | (focusedIndex: number) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onFold",
     "comment": [
      "Handles row folding change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onSelect",
     "comment": [
      "Handles row selection.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "parentId",
     "comment": [
      "ID of the parent TItem"
     ],
     "value": "undefined | TId",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "path",
     "comment": [
      "Hierarchical path from the root node to the item (excluding the item itself)"
     ],
     "value": "undefined | DataRowPathItem<TId, TItem>[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "pin",
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "comment": [
      "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "value": "undefined | number | '24' | '36' | '18' | '12' | '6'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FlexRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowKey",
     "comment": [
      "Key to be used as component's key when rendering. Usually, it's stringified ID"
     ],
     "value": "string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "SizeMod"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "subtitle",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "title",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "PickerListProps": {
   "kind": "TypeAliasDeclaration",
   "name": "PickerListProps",
   "value": "IHasEditMode | IHasEditMode | IHasEditMode | IHasEditMode"
  },
  "PickerListItemProps": {
   "kind": "InterfaceDeclaration",
   "name": "PickerListItemProps",
   "value": "PickerListItemProps<TItem, TId>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignItems",
     "comment": [
      "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
     ],
     "value": "undefined | 'top' | 'bottom' | 'center' | 'stretch'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FlexRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "checkbox",
     "comment": [
      "If row needs a checkbox, this field should be specified and it props can be configured here"
     ],
     "value": "undefined | { isVisible: boolean; } & ICanBeInvalid",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "comment": [
      "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "value": "undefined | number | '24' | '36' | '18' | '12' | '6'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FlexRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "depth",
     "comment": [
      "Depth of the row in tree, 0 for the top-level"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dnd",
     "comment": [
      "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
     ],
     "value": "undefined | IDndActor<any, any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getName",
     "value": "(item: TItem) => string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "ID of the TItem rows displays"
     ],
     "value": "TId",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "indent",
     "comment": [
      "Indent of the item, to show hierarchy.",
      "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
      "  if all children of node has no children, all nodes would get the same indent as parent."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "index",
     "comment": [
      "Index of the row, from the top of the list. This doesn't account any hierarchy."
     ],
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isCheckable",
     "comment": [
      "True if row has checkbox and can be checkable"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isChecked",
     "comment": [
      "True if row is checked with checkbox"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenChecked",
     "comment": [
      "True if some of row's children are checked.",
      " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isChildrenSelected",
     "comment": [
      "True if any of row's children is selected."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFocused",
     "comment": [
      "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFoldable",
     "comment": [
      "True if row be folded or unfolded (usually because it contains children)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isFolded",
     "comment": [
      "True if row is currently folded"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLastChild",
     "comment": [
      "True if row is the last child of his parent"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLoading",
     "comment": [
      "True if row is in loading state. 'value' is empty in this case"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isPinned",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isSelectable",
     "comment": [
      "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isSelected",
     "comment": [
      "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isUnknown",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "undefined | null | string | number",
     "inheritedFrom": {
      "name": "Attributes"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Can be specified to make row act as a link (plain or SPA)"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onCheck",
     "comment": [
      "Handles row checkbox change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onFocus",
     "comment": [
      "Handles row focusing."
     ],
     "value": "undefined | (focusedIndex: number) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onFold",
     "comment": [
      "Handles row folding change.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onSelect",
     "comment": [
      "Handles row selection.",
      " We demand to pass the row as well, to avoid creating closures for each row."
     ],
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "parentId",
     "comment": [
      "ID of the parent TItem"
     ],
     "value": "undefined | TId",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "path",
     "comment": [
      "Hierarchical path from the root node to the item (excluding the item itself)"
     ],
     "value": "undefined | DataRowPathItem<TId, TItem>[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "pin",
     "value": "undefined | (rowProps: DataRowProps<TItem, TId>) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "comment": [
      "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
     ],
     "value": "undefined | number | '24' | '36' | '18' | '12' | '6'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FlexRowProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowKey",
     "comment": [
      "Key to be used as component's key when rendering. Usually, it's stringified ID"
     ],
     "value": "string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataRowProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "PickerModalProps": {
   "kind": "TypeAliasDeclaration",
   "name": "PickerModalProps",
   "value": "PickerModalOptions<TItem, TId> | PickerModalOptions<TItem, TId> | PickerModalOptions<TItem, TId> | PickerModalOptions<TItem, TId>"
  },
  "PickerTogglerMods": {
   "kind": "InterfaceDeclaration",
   "name": "PickerTogglerMods",
   "value": "PickerTogglerMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'form' | 'cell' | 'inline'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "IHasEditMode"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '24' | '30' | '36' | '42' | '48'",
     "optional": true
    }
   ]
  },
  "HighlightRange": {
   "kind": "InterfaceDeclaration",
   "name": "HighlightRange",
   "value": "HighlightRange",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "from",
     "value": "number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isHighlighted",
     "value": "false | true",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "to",
     "value": "number",
     "optional": false
    }
   ]
  },
  "TextMods": {
   "kind": "InterfaceDeclaration",
   "name": "TextMods",
   "value": "TextMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'primary' | 'secondary' | 'info' | 'success' | 'warning' | 'error' | 'contrast' | 'brand' | 'disabled' | 'white'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "font",
     "value": "undefined | 'primary' | 'regular' | 'semibold' | 'italic' | 'promo'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fontSize",
     "value": "undefined | '24' | '18' | '12' | '10' | '14' | '16'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TextSettings"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "lineHeight",
     "value": "undefined | '24' | '30' | '18' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TextSettings"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48' | '18'",
     "optional": true
    }
   ]
  },
  "TextProps": {
   "kind": "TypeAliasDeclaration",
   "name": "TextProps",
   "value": "TextProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'primary' | 'secondary' | 'info' | 'success' | 'warning' | 'error' | 'contrast' | 'brand' | 'disabled' | 'white'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TextMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "font",
     "value": "undefined | 'primary' | 'regular' | 'semibold' | 'italic' | 'promo'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TextMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fontSize",
     "value": "undefined | '24' | '18' | '12' | '10' | '14' | '16'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TextSettings"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "lineHeight",
     "value": "undefined | '24' | '30' | '18' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TextSettings"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48' | '18'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TextMods"
     },
     "optional": true
    }
   ]
  },
  "ITextPlaceholderProps": {
   "kind": "InterfaceDeclaration",
   "name": "ITextPlaceholderProps",
   "value": "ITextPlaceholderProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isNotAnimated",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "wordsCount",
     "value": "undefined | number",
     "optional": true
    }
   ]
  },
  "TextPlaceholderProps": {
   "kind": "TypeAliasDeclaration",
   "name": "TextPlaceholderProps",
   "value": "TextPlaceholderProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "name": "PropsWithChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isNotAnimated",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "ITextPlaceholderProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "wordsCount",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "ITextPlaceholderProps"
     },
     "optional": true
    }
   ]
  },
  "RichTextViewMods": {
   "kind": "InterfaceDeclaration",
   "name": "RichTextViewMods",
   "value": "RichTextViewMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '12' | '14' | '16'",
     "optional": true
    }
   ]
  },
  "BadgeColor": {
   "kind": "TypeAliasDeclaration",
   "name": "BadgeColor",
   "value": "'info' | 'success' | 'warning' | 'error' | 'default'"
  },
  "BadgeFill": {
   "kind": "TypeAliasDeclaration",
   "name": "BadgeFill",
   "value": "'solid' | 'semitransparent' | 'transparent'"
  },
  "BadgeSize": {
   "kind": "TypeAliasDeclaration",
   "name": "BadgeSize",
   "value": "'24' | '30' | '36' | '42' | '48' | '18'"
  },
  "BadgeMods": {
   "kind": "InterfaceDeclaration",
   "name": "BadgeMods",
   "value": "BadgeMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'info' | 'success' | 'warning' | 'error' | 'default'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fill",
     "value": "undefined | 'solid' | 'semitransparent' | 'transparent'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '24' | '30' | '36' | '42' | '48' | '18'",
     "optional": true
    }
   ]
  },
  "BadgeProps": {
   "kind": "TypeAliasDeclaration",
   "name": "BadgeProps",
   "value": "BadgeProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'info' | 'success' | 'warning' | 'error' | 'default'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "BadgeMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "value": "undefined | null | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fill",
     "value": "undefined | 'solid' | 'semitransparent' | 'transparent'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "BadgeMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBasicPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '24' | '30' | '36' | '42' | '48' | '18'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "BadgeMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    }
   ]
  },
  "TagSize": {
   "kind": "TypeAliasDeclaration",
   "name": "TagSize",
   "value": "'24' | '30' | '36' | '42' | '48' | '18'"
  },
  "TagMods": {
   "kind": "InterfaceDeclaration",
   "name": "TagMods",
   "value": "TagMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '24' | '30' | '36' | '42' | '48' | '18'",
     "optional": true
    }
   ]
  },
  "TagProps": {
   "kind": "TypeAliasDeclaration",
   "name": "TagProps",
   "value": "TagProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "value": "undefined | null | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBasicPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '24' | '30' | '36' | '42' | '48' | '18'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TagMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    }
   ]
  },
  "SpinnerProps": {
   "kind": "TypeAliasDeclaration",
   "name": "SpinnerProps",
   "value": "SpinnerProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    }
   ]
  },
  "IndeterminateBarMods": {
   "kind": "InterfaceDeclaration",
   "name": "IndeterminateBarMods",
   "value": "IndeterminateBarMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '24' | '18' | '12'",
     "optional": true
    }
   ]
  },
  "ProgressBarMods": {
   "kind": "InterfaceDeclaration",
   "name": "ProgressBarMods",
   "value": "ProgressBarMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '24' | '18' | '12'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "striped",
     "value": "undefined | false | true",
     "optional": true
    }
   ]
  },
  "DataTableProps": {
   "kind": "InterfaceDeclaration",
   "name": "DataTableProps",
   "value": "DataTableProps<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "allowColumnsReordering",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableColumnsConfigOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "allowColumnsResizing",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataTableColumnsConfigOptions"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "columns",
     "value": "DataColumnProps<TItem, TId, any>[]",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "exactRowsCount",
     "comment": [
      "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListCounts"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "filters",
     "value": "undefined | TableFiltersConfig<any>[]",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "getRows",
     "value": "() => DataRowProps<TItem, TId>[]",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReloading",
     "comment": [
      "Signals that data is reloading on search/sort/filter/reload."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "knownRowsCount",
     "comment": [
      "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
      " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
      " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListCounts"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onCopy",
     "value": "undefined | (copyFrom: DataTableSelectedCellData<TItem, TId, TFilter>[]) => void",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onScroll",
     "value": "undefined | (value: PositionValues) => void",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderColumnsConfigurationModal",
     "value": "undefined | (props: ColumnsConfigurationModalProps<TItem, TId, TFilter>) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderNoResultsBlock",
     "value": "undefined | () => React.ReactNode",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderRow",
     "value": "undefined | (props: DataTableRowProps<TItem, TId>) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowsCount",
     "comment": [
      "Count of rows, after applying filter, and folding on tree nodes.",
      " Obsolete! Please switch to exactRowsCount / knownRowsCount"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListCounts"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "selectAll",
     "value": "undefined | ICheckable",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "showColumnsConfig",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "totalCount",
     "comment": [
      "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DataSourceListCounts"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "DataRowsContainerProps": {
   "kind": "InterfaceDeclaration",
   "name": "DataRowsContainerProps",
   "value": "DataRowsContainerProps<TItem, TId, List>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "estimatedHeight",
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "VirtualListRenderRowsParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "headerRef",
     "value": "undefined | React.MutableRefObject<HTMLDivElement>",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "listContainerRef",
     "value": "React.MutableRefObject<List>",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "VirtualListRenderRowsParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "offsetY",
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "VirtualListRenderRowsParams"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderRow",
     "value": "(row: DataRowProps<TItem, TId>) => React.ReactNode",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rows",
     "value": "DataRowProps<TItem, TId>[]",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "scrollShadows",
     "value": "{ verticalTop: boolean; verticalBottom: boolean; horizontalLeft: boolean; horizontalRight: boolean; }",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "VirtualListRenderRowsParams"
     },
     "optional": false
    }
   ]
  },
  "ColumnsConfigurationModalProps": {
   "kind": "InterfaceDeclaration",
   "name": "ColumnsConfigurationModalProps",
   "value": "ColumnsConfigurationModalProps<TItem, TId, TFilter>",
   "props": [
    {
     "kind": "MethodSignature",
     "name": "abort",
     "value": "(result?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IModal"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "columns",
     "value": "DataColumnProps<TItem, TId, TFilter>[]",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "columnsConfig",
     "value": "undefined | ColumnsConfig",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "defaultConfig",
     "value": "ColumnsConfig",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "getSearchFields",
     "value": "undefined | (column: DataColumnProps<TItem, TId, TFilter>) => string[]",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isActive",
     "value": "false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IModal"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IModal"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "renderItem",
     "value": "undefined | (column: DataColumnProps<TItem, TId, TFilter>) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "success",
     "value": "(result: TResult) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IModal"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "zIndex",
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IModal"
     },
     "optional": false
    }
   ]
  },
  "DataTableMods": {
   "kind": "InterfaceDeclaration",
   "name": "DataTableMods",
   "value": "DataTableMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "border",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "headerTextCase",
     "value": "undefined | 'upper' | 'normal'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "optional": true
    }
   ]
  },
  "DataTableRowMods": {
   "kind": "InterfaceDeclaration",
   "name": "DataTableRowMods",
   "value": "DataTableRowMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignActions",
     "value": "undefined | 'top' | 'center'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TableSizesAndPositionMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "borderBottom",
     "value": "any",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "value": "undefined | '24' | '12' | '0'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TableSizesAndPositionMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48' | '60'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TableSizesAndPositionMods"
     },
     "optional": true
    }
   ]
  },
  "DataTableCellMods": {
   "kind": "InterfaceDeclaration",
   "name": "DataTableCellMods",
   "value": "DataTableCellMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "alignActions",
     "value": "undefined | 'top' | 'center'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TableSizesAndPositionMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "border",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "value": "undefined | '24' | '12' | '0'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TableSizesAndPositionMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48' | '60'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TableSizesAndPositionMods"
     },
     "optional": true
    }
   ]
  },
  "DataTableHeaderCellMods": {
   "kind": "InterfaceDeclaration",
   "name": "DataTableHeaderCellMods",
   "value": "DataTableHeaderCellMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48' | '60'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "BaseRowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "textCase",
     "value": "undefined | 'upper' | 'normal'",
     "optional": true
    }
   ]
  },
  "DataTableHeaderRowMods": {
   "kind": "InterfaceDeclaration",
   "name": "DataTableHeaderRowMods",
   "value": "DataTableHeaderRowMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48' | '60'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "BaseRowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "textCase",
     "value": "undefined | 'upper' | 'normal'",
     "optional": true
    }
   ]
  },
  "ButtonMode": {
   "kind": "TypeAliasDeclaration",
   "name": "ButtonMode",
   "value": "'none' | 'solid' | 'outline' | 'ghost'"
  },
  "FillStyle": {
   "kind": "TypeAliasDeclaration",
   "name": "FillStyle",
   "value": "'none' | 'solid' | 'outline' | 'ghost'"
  },
  "ControlSize": {
   "kind": "TypeAliasDeclaration",
   "name": "ControlSize",
   "value": "'none' | '24' | '30' | '36' | '42' | '48'"
  },
  "RowSize": {
   "kind": "TypeAliasDeclaration",
   "name": "RowSize",
   "value": "null | '24' | '30' | '36' | '42' | '48'"
  },
  "SemanticColor": {
   "kind": "TypeAliasDeclaration",
   "name": "SemanticColor",
   "value": "'info' | 'success' | 'warning' | 'error'"
  },
  "ButtonSemanticColor": {
   "kind": "TypeAliasDeclaration",
   "name": "ButtonSemanticColor",
   "value": "'accent' | 'primary' | 'secondary' | 'negative'"
  },
  "EpamBadgeSemanticColor": {
   "kind": "TypeAliasDeclaration",
   "name": "EpamBadgeSemanticColor",
   "value": "'info' | 'success' | 'warning' | 'error' | 'default'"
  },
  "TextSize": {
   "kind": "TypeAliasDeclaration",
   "name": "TextSize",
   "value": "'none' | '24' | '30' | '36' | '48' | '18'"
  },
  "FontStyle": {
   "kind": "TypeAliasDeclaration",
   "name": "FontStyle",
   "value": "'primary' | 'regular' | 'semibold' | 'italic' | 'promo'"
  },
  "ColorMod": {
   "kind": "InterfaceDeclaration",
   "name": "ColorMod",
   "value": "ColorMod",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Component color"
     ],
     "value": "undefined | 'info' | 'success' | 'warning' | 'error'",
     "optional": true
    }
   ]
  },
  "RowSizeMod": {
   "kind": "InterfaceDeclaration",
   "name": "RowSizeMod",
   "value": "RowSizeMod",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | null | '24' | '30' | '36' | '42' | '48'",
     "optional": true
    }
   ]
  },
  "SizeMod": {
   "kind": "InterfaceDeclaration",
   "name": "SizeMod",
   "value": "SizeMod",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "optional": true
    }
   ]
  },
  "IHasEditMode": {
   "kind": "InterfaceDeclaration",
   "name": "IHasEditMode",
   "value": "IHasEditMode",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'form' | 'cell' | 'inline'",
     "optional": true
    }
   ]
  },
  "EditMode": {
   "kind": "EnumDeclaration",
   "name": "EditMode",
   "value": "EditMode.FORM | EditMode.CELL | EditMode.INLINE"
  },
  "FiltersPanelProps": {
   "kind": "InterfaceDeclaration",
   "name": "FiltersPanelProps",
   "value": "FiltersPanelProps<TFilter>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "filters",
     "value": "TableFiltersConfig<TFilter>[]",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "setTableState",
     "value": "(newState: DataTableState<any, any>) => void",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '24' | '30' | '36' | '42' | '48'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tableState",
     "value": "DataTableState<any, any>",
     "optional": false
    }
   ]
  },
  "PresetsPanelProps": {
   "kind": "InterfaceDeclaration",
   "name": "PresetsPanelProps",
   "value": "PresetsPanelProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "activePresetId",
     "comment": [
      "ID of selected preset"
     ],
     "value": "null | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPresetsApi"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "choosePreset",
     "comment": [
      "Function that selects given preset"
     ],
     "value": "(preset: ITablePreset<TFilter, TViewState>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPresetsApi"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "createNewPreset",
     "comment": [
      "Function that gives preset name and create new preset with this name and current table state"
     ],
     "value": "(name: string) => Promise<number>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPresetsApi"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "deletePreset",
     "comment": [
      "Function that deletes given preset"
     ],
     "value": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPresetsApi"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "duplicatePreset",
     "comment": [
      "Function that gives the preset and creat their duplicate"
     ],
     "value": "(preset: ITablePreset<TFilter, TViewState>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPresetsApi"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "getPresetLink",
     "comment": [
      "Function that gives preset and return URL link on given preset"
     ],
     "value": "(preset: ITablePreset<TFilter, TViewState>) => string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPresetsApi"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "hasPresetChanged",
     "comment": [
      "Function that gives preset and return if this preset changed or not"
     ],
     "value": "(preset: ITablePreset<TFilter, TViewState>) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPresetsApi"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "presets",
     "comment": [
      "Array of presets"
     ],
     "value": "ITablePreset<TFilter, TViewState>[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPresetsApi"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tableState",
     "value": "DataTableState<any, any>",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "updatePreset",
     "comment": [
      "Function that updates given preset"
     ],
     "value": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IPresetsApi"
     },
     "optional": false
    }
   ]
  },
  "MainMenuMods": {
   "kind": "InterfaceDeclaration",
   "name": "MainMenuMods",
   "value": "MainMenuMods"
  },
  "GlobalMenuProps": {
   "kind": "InterfaceDeclaration",
   "name": "GlobalMenuProps",
   "value": "GlobalMenuProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "collapseToMore",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "estimatedWidth",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "showInBurgerMenu",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    }
   ]
  },
  "BurgerMods": {
   "kind": "InterfaceDeclaration",
   "name": "BurgerMods",
   "value": "BurgerMods"
  },
  "BurgerButtonMods": {
   "kind": "InterfaceDeclaration",
   "name": "BurgerButtonMods",
   "value": "BurgerButtonMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "indentLevel",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disables component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "value": "undefined | 'primary' | 'secondary'",
     "optional": true
    }
   ]
  },
  "BurgerSearchProps": {
   "kind": "InterfaceDeclaration",
   "name": "BurgerSearchProps",
   "value": "BurgerSearchProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "acceptIcon",
     "comment": [
      "Overrides accept (check) icon"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoComplete",
     "comment": [
      "Standard <a href='https://www.w3schools.com/tags/att_input_autocomplete.asp'>autocomplete attribute</a>"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "comment": [
      "Put focus on the element, when component is mounted"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cancelIcon",
     "comment": [
      "Overrides cancel (cross) icon"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Overrides dropdown (chevron) icon"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML ID attribute for input"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class(es) to put to the HTML Input element"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputMode",
     "comment": [
      "Standard <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode'>inputMode attribute</a>"
     ],
     "value": "undefined | 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "comment": [
      "Maximum input length in characters"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "comment": [
      "Standard <a href='https://www.w3schools.com/tags/att_input_name.asp'>name attribute</a>"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onAccept",
     "comment": [
      "Enables accept (check) icon, and fires when the icon is clicked"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onCancel",
     "comment": [
      "Enables cancel (cross) icon, and fires when the icon is clicked"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "comment": [
      "keydown event handler to put on the HTML input element"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderInput",
     "comment": [
      "overrides rendering of HTML Input element"
     ],
     "value": "undefined | (props: IRenderInputProps) => JSX.Element",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "comment": [
      "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "BurgerGroupHeaderProps": {
   "kind": "InterfaceDeclaration",
   "name": "BurgerGroupHeaderProps",
   "value": "BurgerGroupHeaderProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "value": "string",
     "optional": false
    }
   ]
  },
  "MainMenuAvatarProps": {
   "kind": "InterfaceDeclaration",
   "name": "MainMenuAvatarProps",
   "value": "MainMenuAvatarProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "avatarUrl",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "collapseToMore",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "estimatedWidth",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "value": "undefined | Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disables component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "showInBurgerMenu",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    }
   ]
  },
  "MainMenuSearchProps": {
   "kind": "InterfaceDeclaration",
   "name": "MainMenuSearchProps",
   "value": "MainMenuSearchProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "acceptIcon",
     "comment": [
      "Overrides accept (check) icon"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoComplete",
     "comment": [
      "Standard <a href='https://www.w3schools.com/tags/att_input_autocomplete.asp'>autocomplete attribute</a>"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "comment": [
      "Put focus on the element, when component is mounted"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cancelIcon",
     "comment": [
      "Overrides cancel (cross) icon"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "collapseToMore",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Overrides dropdown (chevron) icon"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "estimatedWidth",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML ID attribute for input"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class(es) to put to the HTML Input element"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputMode",
     "comment": [
      "Standard <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode'>inputMode attribute</a>"
     ],
     "value": "undefined | 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "comment": [
      "Maximum input length in characters"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "comment": [
      "Standard <a href='https://www.w3schools.com/tags/att_input_name.asp'>name attribute</a>"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onAccept",
     "comment": [
      "Enables accept (check) icon, and fires when the icon is clicked"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onCancel",
     "comment": [
      "Enables cancel (cross) icon, and fires when the icon is clicked"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "comment": [
      "keydown event handler to put on the HTML input element"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderInput",
     "comment": [
      "overrides rendering of HTML Input element"
     ],
     "value": "undefined | (props: IRenderInputProps) => JSX.Element",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "showInBurgerMenu",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "comment": [
      "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "MainMenuIconProps": {
   "kind": "InterfaceDeclaration",
   "name": "MainMenuIconProps",
   "value": "MainMenuIconProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "collapsedContainer",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "collapseToMore",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "value": "undefined | null | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "estimatedWidth",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "value": "Icon",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBasicPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "showInBurgerMenu",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAdaptiveItem"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    }
   ]
  },
  "MainMenuButtonMods": {
   "kind": "InterfaceDeclaration",
   "name": "MainMenuButtonMods",
   "value": "MainMenuButtonMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "type",
     "value": "undefined | 'primary' | 'secondary'",
     "optional": true
    }
   ]
  },
  "DropSpotProps": {
   "kind": "InterfaceDeclaration",
   "name": "DropSpotProps",
   "value": "DropSpotProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "accept",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "infoText",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onUploadFiles",
     "value": "(files: File[]) => any",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "single",
     "value": "undefined | false | true",
     "optional": true
    }
   ]
  },
  "FileCardItem": {
   "kind": "InterfaceDeclaration",
   "name": "FileCardItem",
   "value": "FileCardItem",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "abortXHR",
     "value": "undefined | () => void",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "arrayBuffer",
     "value": "() => Promise<ArrayBuffer>",
     "inheritedFrom": {
      "name": "Blob"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "error",
     "value": "undefined | { isError: boolean; message?: string | undefined; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FileUploadResponse"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "extension",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FileUploadResponse"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FileUploadResponse"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "lastModified",
     "comment": [
      "[MDN Reference](https://developer.mozilla.org/docs/Web/API/File/lastModified)"
     ],
     "value": "number",
     "inheritedFrom": {
      "name": "File"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "comment": [
      "[MDN Reference](https://developer.mozilla.org/docs/Web/API/File/name)"
     ],
     "value": "string",
     "inheritedFrom": {
      "name": "File"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "path",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "FileUploadResponse"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "progress",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "number",
     "inheritedFrom": {
      "name": "Blob"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "slice",
     "value": "(start?: number | undefined, end?: number | undefined, contentType?: string | undefined) => Blob",
     "inheritedFrom": {
      "name": "Blob"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "stream",
     "value": "() => ReadableStream<Uint8Array>",
     "inheritedFrom": {
      "name": "Blob"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "text",
     "value": "() => Promise<string>",
     "inheritedFrom": {
      "name": "Blob"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "value": "string",
     "inheritedFrom": {
      "name": "Blob"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "webkitRelativePath",
     "comment": [
      "[MDN Reference](https://developer.mozilla.org/docs/Web/API/File/webkitRelativePath)"
     ],
     "value": "string",
     "inheritedFrom": {
      "name": "File"
     },
     "optional": false
    }
   ]
  },
  "FileCardProps": {
   "kind": "InterfaceDeclaration",
   "name": "FileCardProps",
   "value": "FileCardProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "file",
     "value": "FileCardItem",
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "value": "undefined | number",
     "optional": true
    }
   ]
  },
  "TextSettings": {
   "kind": "InterfaceDeclaration",
   "name": "TextSettings",
   "value": "TextSettings",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "fontSize",
     "value": "undefined | '24' | '18' | '12' | '10' | '14' | '16'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "lineHeight",
     "value": "undefined | '24' | '30' | '18' | '12'",
     "optional": true
    }
   ]
  }
 },
 "@epam/promo": {
  "BadgeMods": {
   "kind": "InterfaceDeclaration",
   "name": "BadgeMods",
   "value": "BadgeMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'cyan' | 'orange' | 'purple' | 'violet' | 'gray30'",
     "optional": true
    }
   ]
  },
  "BadgeProps": {
   "kind": "TypeAliasDeclaration",
   "name": "BadgeProps",
   "value": "BadgeProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'cyan' | 'orange' | 'purple' | 'violet' | 'gray30'",
     "inheritedFrom": {
      "module": "@epam/promo",
      "name": "BadgeMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "value": "undefined | null | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fill",
     "value": "undefined | 'solid' | 'semitransparent' | 'transparent'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "BadgeMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBasicPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '18' | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "BadgeMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    }
   ]
  },
  "ButtonColor": {
   "kind": "TypeAliasDeclaration",
   "name": "ButtonColor",
   "value": "'blue' | 'green' | 'red' | 'gray50' | 'gray'"
  },
  "ButtonMods": {
   "kind": "InterfaceDeclaration",
   "name": "ButtonMods",
   "value": "ButtonMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'blue' | 'green' | 'red' | 'gray50' | 'gray'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fill",
     "value": "undefined | 'solid' | 'white' | 'light' | 'none'",
     "optional": true
    }
   ]
  },
  "ButtonProps": {
   "kind": "TypeAliasDeclaration",
   "name": "ButtonProps",
   "value": "ButtonProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'blue' | 'green' | 'red' | 'gray50' | 'gray'",
     "inheritedFrom": {
      "module": "@epam/promo",
      "name": "ButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "value": "undefined | null | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fill",
     "value": "undefined | 'solid' | 'white' | 'light' | 'none'",
     "inheritedFrom": {
      "module": "@epam/promo",
      "name": "ButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'solid' | 'none' | 'outline' | 'ghost'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "ButtonMods"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBasicPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '18' | '24' | '30' | '36' | '42' | '48' | 'none'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "ButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    }
   ]
  },
  "IconColor": {
   "kind": "TypeAliasDeclaration",
   "name": "IconColor",
   "value": "'blue' | 'green' | 'amber' | 'red' | 'gray30' | 'gray50' | 'gray60'"
  },
  "IconButtonMods": {
   "kind": "InterfaceDeclaration",
   "name": "IconButtonMods",
   "value": "IconButtonMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'gray30' | 'gray50' | 'gray60'",
     "optional": true
    }
   ]
  },
  "IconButtonProps": {
   "kind": "TypeAliasDeclaration",
   "name": "IconButtonProps",
   "value": "IconButtonProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'gray30' | 'gray50' | 'gray60'",
     "inheritedFrom": {
      "module": "@epam/promo",
      "name": "IconButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    }
   ]
  },
  "LinkButtonMods": {
   "kind": "InterfaceDeclaration",
   "name": "LinkButtonMods",
   "value": "LinkButtonMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'gray60' | 'gray10'",
     "optional": true
    }
   ]
  },
  "LinkButtonProps": {
   "kind": "TypeAliasDeclaration",
   "name": "LinkButtonProps",
   "value": "LinkButtonProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'gray60' | 'gray10'",
     "inheritedFrom": {
      "module": "@epam/promo",
      "name": "LinkButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "value": "undefined | null | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBasicPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '24' | '30' | '36' | '42' | '48' | 'none'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "LinkButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    }
   ]
  },
  "AlertMods": {
   "kind": "InterfaceDeclaration",
   "name": "AlertMods",
   "value": "AlertMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'blue' | 'green' | 'amber' | 'red'",
     "optional": true
    }
   ]
  },
  "AlertProps": {
   "kind": "InterfaceDeclaration",
   "name": "AlertProps",
   "value": "AlertProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "actions",
     "comment": [
      "List of actions to display in the alert. Each action has name and 'action' callback"
     ],
     "value": "undefined | notificationAction[]",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "AlertProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'blue' | 'green' | 'amber' | 'red'",
     "inheritedFrom": {
      "module": "@epam/promo",
      "name": "AlertMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "An optional icon to show on the left of the alert"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "AlertProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClose",
     "comment": [
      "When specified, a close icon is rendered. onClose callback will be called on clicking the close icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "AlertProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "comment": [
      "Component size. If omitted, 48 size will be used."
     ],
     "value": "undefined | '36' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "AlertProps"
     },
     "optional": true
    }
   ]
  },
  "NotificationCardMods": {
   "kind": "InterfaceDeclaration",
   "name": "NotificationCardMods",
   "value": "NotificationCardMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'gray60'",
     "optional": true
    }
   ]
  },
  "NotificationCardProps": {
   "kind": "TypeAliasDeclaration",
   "name": "NotificationCardProps",
   "value": "NotificationCardProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "actions",
     "value": "undefined | NotificationAction[]",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "DefaultNotificationProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "clearTimer",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'gray60'",
     "inheritedFrom": {
      "module": "@epam/promo",
      "name": "NotificationCardMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "NotificationCardProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClose",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onSuccess",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "refreshTimer",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    }
   ]
  },
  "TooltipMods": {
   "kind": "InterfaceDeclaration",
   "name": "TooltipMods",
   "value": "TooltipMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Tooltip color.",
      "  'gray90' is deprecated and will be removed in future release, use 'gray' instead."
     ],
     "value": "undefined | 'red' | 'gray' | 'white' | 'gray90'",
     "optional": true
    }
   ]
  },
  "TooltipProps": {
   "kind": "TypeAliasDeclaration",
   "name": "TooltipProps",
   "value": "TooltipProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "boundaryElement",
     "value": "undefined | HTMLElement | HTMLElement[] | 'clippingParents'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "comment": [
      "React Node(s) to show tooltip for"
     ],
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeBodyOnTogglerHidden",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeDelay",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnMouseLeave",
     "value": "undefined | false | 'toggler' | 'boundary'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Tooltip color.",
      "  'gray90' is deprecated and will be removed in future release, use 'gray' instead."
     ],
     "value": "undefined | 'red' | 'gray' | 'white' | 'gray90'",
     "inheritedFrom": {
      "module": "@epam/promo",
      "name": "TooltipMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "content",
     "comment": [
      "Content to show in the tooltip (ReactNode)"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxWidth",
     "comment": [
      "Max width of tooltip"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "modifiers",
     "value": "undefined | (Modifier<any, object>>)[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "offset",
     "comment": [
      "See <a href='https://popper.js.org/docs/v2/modifiers/offset/'>Popper docs</a>"
     ],
     "value": "undefined | OffsetsFunction | [number | null | undefined, number | null | undefined]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "openDelay",
     "comment": [
      "Should we close dropdown on click on the Toggler, if it's already open? Default is true."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "value": "undefined | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "portalTarget",
     "value": "undefined | HTMLElement",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderContent",
     "comment": [
      "Alternative to 'content' prop, you can pass a render function.",
      " The function will only be called when content is shown, this can save performance."
     ],
     "value": "undefined | () => any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "DropdownContainerMods": {
   "kind": "InterfaceDeclaration",
   "name": "DropdownContainerMods",
   "value": "DropdownContainerMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'white' | 'gray70'",
     "optional": true
    }
   ]
  },
  "ModalWindowMods": {
   "kind": "InterfaceDeclaration",
   "name": "ModalWindowMods",
   "value": "ModalWindowMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "height",
     "value": "undefined | number | 'auto' | '300' | '700'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "value": "undefined | number | '300' | '420' | '600' | '900'",
     "optional": true
    }
   ]
  },
  "MultiSwitchColor": {
   "kind": "TypeAliasDeclaration",
   "name": "MultiSwitchColor",
   "value": "'blue' | 'gray50' | 'gray'"
  },
  "MultiSwitchMods": {
   "kind": "InterfaceDeclaration",
   "name": "MultiSwitchMods",
   "value": "MultiSwitchMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'blue' | 'gray50' | 'gray'",
     "optional": true
    }
   ]
  },
  "MultiSwitchProps": {
   "kind": "TypeAliasDeclaration",
   "name": "MultiSwitchProps",
   "value": "MultiSwitchProps<TValue>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'blue' | 'gray50' | 'gray'",
     "inheritedFrom": {
      "module": "@epam/promo",
      "name": "MultiSwitchMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "value": "MultiSwitchItem<TValue>[]",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "MultiSwitchProps"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '24' | '30' | '36' | '42' | '48' | 'none'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "SizeMod"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "RatingMods": {
   "kind": "InterfaceDeclaration",
   "name": "RatingMods",
   "value": "RatingMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 18 | 24 | 30",
     "optional": true
    }
   ]
  },
  "TextInputProps": {
   "kind": "InterfaceDeclaration",
   "name": "TextInputProps",
   "value": "TextInputProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "acceptIcon",
     "comment": [
      "Overrides accept (check) icon"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoComplete",
     "comment": [
      "Standard <a href='https://www.w3schools.com/tags/att_input_autocomplete.asp'>autocomplete attribute</a>"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "autoFocus",
     "comment": [
      "Put focus on the element, when component is mounted"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cancelIcon",
     "comment": [
      "Overrides cancel (cross) icon"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Overrides dropdown (chevron) icon"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "comment": [
      "HTML ID attribute for input"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputCx",
     "comment": [
      "CSS class(es) to put to the HTML Input element"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "inputMode",
     "comment": [
      "Standard <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode'>inputMode attribute</a>"
     ],
     "value": "undefined | 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxLength",
     "comment": [
      "Maximum input length in characters"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'form' | 'cell' | 'inline'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "IHasEditMode"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "comment": [
      "Standard <a href='https://www.w3schools.com/tags/att_input_name.asp'>name attribute</a>"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onAccept",
     "comment": [
      "Enables accept (check) icon, and fires when the icon is clicked"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onBlur",
     "comment": [
      "Called when component looses input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onCancel",
     "comment": [
      "Enables cancel (cross) icon, and fires when the icon is clicked"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onFocus",
     "comment": [
      "Called when component gets input focus"
     ],
     "value": "undefined | (e: React.FocusEvent<T, Element>) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanFocus"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onKeyDown",
     "comment": [
      "keydown event handler to put on the HTML input element"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderInput",
     "comment": [
      "overrides rendering of HTML Input element"
     ],
     "value": "undefined | (props: IRenderInputProps) => JSX.Element",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "TextInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '24' | '30' | '36' | '42' | '48' | 'none'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TextInputMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "comment": [
      "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TextInputCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "SliderMods": {
   "kind": "InterfaceDeclaration",
   "name": "SliderMods",
   "value": "SliderMods"
  },
  "RowMods": {
   "kind": "InterfaceDeclaration",
   "name": "RowMods",
   "value": "RowMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "background",
     "value": "undefined | 'white' | 'none' | 'gray5'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "borderBottom",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "value": "undefined | number | '18' | '24' | '36' | '6' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "margin",
     "value": "undefined | '24' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "value": "undefined | '18' | '24' | '6' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "value": "undefined | number | '18' | '24' | '36' | '6' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | null | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowSizeMod"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "spacing",
     "value": "undefined | '18' | '6' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "topShadow",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "vPadding",
     "value": "undefined | '18' | '24' | '36' | '48' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    }
   ]
  },
  "PanelMods": {
   "kind": "InterfaceDeclaration",
   "name": "PanelMods",
   "value": "PanelMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "background",
     "value": "undefined | 'white' | 'gray90'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "margin",
     "value": "undefined | '24'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "shadow",
     "value": "undefined | false | true",
     "optional": true
    }
   ]
  },
  "ScrollBarsMods": {
   "kind": "InterfaceDeclaration",
   "name": "ScrollBarsMods",
   "value": "ScrollBarsMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "theme",
     "value": "undefined | 'light' | 'dark'",
     "optional": true
    }
   ]
  },
  "VirtualListMods": {
   "kind": "InterfaceDeclaration",
   "name": "VirtualListMods",
   "value": "VirtualListMods"
  },
  "IconContainerColors": {
   "kind": "TypeAliasDeclaration",
   "name": "IconContainerColors",
   "value": "'blue' | 'green' | 'amber' | 'red' | 'cyan' | 'orange' | 'purple' | 'violet' | 'gray30' | 'gray50' | 'white' | 'gray60' | 'gray10' | 'gray90' | 'gray70' | 'gray5' | 'gray20' | 'gray40' | 'gray80'"
  },
  "IconContainerMods": {
   "kind": "InterfaceDeclaration",
   "name": "IconContainerMods",
   "value": "IconContainerMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "IconContainer color.",
      "  @deprecated Property color is deprecated and will be removed in future release. Please make icon color configuration by yourself, e.g. via cx or style prop."
     ],
     "value": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'cyan' | 'orange' | 'purple' | 'violet' | 'gray30' | 'gray50' | 'white' | 'gray60' | 'gray10' | 'gray90' | 'gray70' | 'gray5' | 'gray20' | 'gray40' | 'gray80'",
     "optional": true
    }
   ]
  },
  "ControlShape": {
   "kind": "TypeAliasDeclaration",
   "name": "ControlShape",
   "value": "'square' | 'round'"
  },
  "FillStyle": {
   "kind": "TypeAliasDeclaration",
   "name": "FillStyle",
   "value": "'solid' | 'white' | 'light' | 'none'"
  },
  "ControlSize": {
   "kind": "TypeAliasDeclaration",
   "name": "ControlSize",
   "value": "'24' | '30' | '36' | '42' | '48' | 'none'"
  },
  "TextSize": {
   "kind": "TypeAliasDeclaration",
   "name": "TextSize",
   "value": "'18' | '24' | '30' | '36' | '48' | 'none'"
  },
  "RowSize": {
   "kind": "TypeAliasDeclaration",
   "name": "RowSize",
   "value": "null | '24' | '30' | '36' | '42' | '48'"
  },
  "EpamPrimaryColor": {
   "kind": "TypeAliasDeclaration",
   "name": "EpamPrimaryColor",
   "value": "'blue' | 'green' | 'amber' | 'red'"
  },
  "EpamAdditionalColor": {
   "kind": "TypeAliasDeclaration",
   "name": "EpamAdditionalColor",
   "value": "'blue' | 'green' | 'amber' | 'red' | 'cyan' | 'orange' | 'purple' | 'violet'"
  },
  "EpamGrayscaleColor": {
   "kind": "TypeAliasDeclaration",
   "name": "EpamGrayscaleColor",
   "value": "'gray30' | 'gray50' | 'white' | 'gray60' | 'gray10' | 'gray90' | 'gray70' | 'gray5' | 'gray20' | 'gray40' | 'gray80'"
  },
  "EpamColor": {
   "kind": "TypeAliasDeclaration",
   "name": "EpamColor",
   "value": "'blue' | 'green' | 'amber' | 'red' | 'cyan' | 'orange' | 'purple' | 'violet' | 'gray30' | 'gray50' | 'white' | 'gray60' | 'gray10' | 'gray90' | 'gray70' | 'gray5' | 'gray20' | 'gray40' | 'gray80'"
  },
  "FontStyle": {
   "kind": "TypeAliasDeclaration",
   "name": "FontStyle",
   "value": "'sans' | 'sans-semibold' | 'sans-italic' | 'museo-sans' | 'museo-slab'"
  },
  "ColorMod": {
   "kind": "InterfaceDeclaration",
   "name": "ColorMod",
   "value": "ColorMod",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Component's base color"
     ],
     "value": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'cyan' | 'orange' | 'purple' | 'violet' | 'gray30' | 'gray50' | 'white' | 'gray60' | 'gray10' | 'gray90' | 'gray70' | 'gray5' | 'gray20' | 'gray40' | 'gray80'",
     "optional": true
    }
   ]
  },
  "SizeMod": {
   "kind": "InterfaceDeclaration",
   "name": "SizeMod",
   "value": "SizeMod",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "comment": [
      "Component's size in px. This is 'logical' size, defined in how many pixels components occupies vertically."
     ],
     "value": "undefined | '24' | '30' | '36' | '42' | '48' | 'none'",
     "optional": true
    }
   ]
  },
  "FontMod": {
   "kind": "InterfaceDeclaration",
   "name": "FontMod",
   "value": "FontMod",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "font",
     "comment": [
      "Font to use for text"
     ],
     "value": "undefined | 'sans' | 'sans-semibold' | 'sans-italic' | 'museo-sans' | 'museo-slab'",
     "optional": true
    }
   ]
  },
  "RowSizeMod": {
   "kind": "InterfaceDeclaration",
   "name": "RowSizeMod",
   "value": "RowSizeMod",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | null | '24' | '30' | '36' | '42' | '48'",
     "optional": true
    }
   ]
  },
  "IHasEditMode": {
   "kind": "InterfaceDeclaration",
   "name": "IHasEditMode",
   "value": "IHasEditMode",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "comment": [
      "Defines input mode: 'form' is default and usual look, 'cell' is for using components as table cells"
     ],
     "value": "undefined | 'form' | 'cell'",
     "optional": true
    }
   ]
  },
  "EditMode": {
   "kind": "EnumDeclaration",
   "name": "EditMode",
   "value": "EditMode.FORM | EditMode.CELL"
  },
  "RichTextViewMods": {
   "kind": "InterfaceDeclaration",
   "name": "RichTextViewMods",
   "value": "RichTextViewMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '12' | '14' | '16'",
     "optional": true
    }
   ]
  },
  "TextMods": {
   "kind": "InterfaceDeclaration",
   "name": "TextMods",
   "value": "TextMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'gray50' | 'white' | 'gray60' | 'gray90' | 'gray5' | 'gray80'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "font",
     "value": "undefined | 'sans' | 'sans-semibold' | 'sans-italic' | 'museo-sans' | 'museo-slab'",
     "optional": true
    }
   ]
  },
  "TextProps": {
   "kind": "TypeAliasDeclaration",
   "name": "TextProps",
   "value": "TextProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'blue' | 'green' | 'amber' | 'red' | 'gray50' | 'white' | 'gray60' | 'gray90' | 'gray5' | 'gray80'",
     "inheritedFrom": {
      "module": "@epam/promo",
      "name": "TextMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "font",
     "value": "undefined | 'sans' | 'sans-semibold' | 'sans-italic' | 'museo-sans' | 'museo-slab'",
     "inheritedFrom": {
      "module": "@epam/promo",
      "name": "TextMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fontSize",
     "value": "undefined | '18' | '24' | '12' | '14' | '16' | '10'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TextSettings"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "lineHeight",
     "value": "undefined | '18' | '24' | '30' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TextSettings"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '18' | '24' | '30' | '36' | '42' | '48' | 'none'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TextMods"
     },
     "optional": true
    }
   ]
  },
  "ErrorHandlerProps": {
   "kind": "InterfaceDeclaration",
   "name": "ErrorHandlerProps",
   "value": "ErrorHandlerProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getErrorInfo",
     "value": "undefined | (uuiError: UuiErrorInfo",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onNotificationError",
     "value": "undefined | (errors: ApiCallInfo) => void",
     "optional": true
    }
   ]
  }
 },
 "@epam/loveship": {
  "ButtonColorType": {
   "kind": "TypeAliasDeclaration",
   "name": "ButtonColorType",
   "value": "'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night500' | 'night600' | 'gray'"
  },
  "ButtonMods": {
   "kind": "InterfaceDeclaration",
   "name": "ButtonMods",
   "value": "ButtonMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night500' | 'night600' | 'gray'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fill",
     "value": "undefined | 'white' | 'none' | 'solid' | 'light'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "shape",
     "value": "undefined | 'square' | 'round'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48' | '18'",
     "optional": true
    }
   ]
  },
  "ButtonProps": {
   "kind": "TypeAliasDeclaration",
   "name": "ButtonProps",
   "value": "ButtonProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night500' | 'night600' | 'gray'",
     "inheritedFrom": {
      "module": "@epam/loveship",
      "name": "ButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "value": "undefined | null | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fill",
     "value": "undefined | 'white' | 'none' | 'solid' | 'light'",
     "inheritedFrom": {
      "module": "@epam/loveship",
      "name": "ButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'none' | 'solid' | 'outline' | 'ghost'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "ButtonMods"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBasicPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "shape",
     "value": "undefined | 'square' | 'round'",
     "inheritedFrom": {
      "module": "@epam/loveship",
      "name": "ButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48' | '18'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "ButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    }
   ]
  },
  "IconButtonMods": {
   "kind": "InterfaceDeclaration",
   "name": "IconButtonMods",
   "value": "IconButtonMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night500' | 'night600' | 'cobalt' | 'lavanda' | 'fuchsia' | 'night200' | 'night300' | 'night400'",
     "optional": true
    }
   ]
  },
  "IconButtonProps": {
   "kind": "TypeAliasDeclaration",
   "name": "IconButtonProps",
   "value": "IconButtonProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night500' | 'night600' | 'cobalt' | 'lavanda' | 'fuchsia' | 'night200' | 'night300' | 'night400'",
     "inheritedFrom": {
      "module": "@epam/loveship",
      "name": "IconButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    }
   ]
  },
  "LinkButtonMods": {
   "kind": "InterfaceDeclaration",
   "name": "LinkButtonMods",
   "value": "LinkButtonMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night500' | 'night600' | 'cobalt' | 'lavanda' | 'fuchsia' | 'night200' | 'night300' | 'night400' | 'night50' | 'night100' | 'night700' | 'night800' | 'night900'",
     "optional": true
    }
   ]
  },
  "LinkButtonProps": {
   "kind": "TypeAliasDeclaration",
   "name": "LinkButtonProps",
   "value": "LinkButtonProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night500' | 'night600' | 'cobalt' | 'lavanda' | 'fuchsia' | 'night200' | 'night300' | 'night400' | 'night50' | 'night100' | 'night700' | 'night800' | 'night900'",
     "inheritedFrom": {
      "module": "@epam/loveship",
      "name": "LinkButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "value": "undefined | null | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBasicPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "LinkButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    }
   ]
  },
  "TabButtonMods": {
   "kind": "InterfaceDeclaration",
   "name": "TabButtonMods",
   "value": "TabButtonMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "value": "undefined | null | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBasicPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '36' | '48' | '60'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TabButtonMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "theme",
     "value": "undefined | 'light' | 'dark'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "withNotify",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TabButtonMods"
     },
     "optional": true
    }
   ]
  },
  "RowMods": {
   "kind": "InterfaceDeclaration",
   "name": "RowMods",
   "value": "RowMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "background",
     "value": "undefined | 'white' | 'none' | 'night50' | 'night100'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "borderBottom",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "columnGap",
     "value": "undefined | number | '24' | '36' | '18' | '6' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "margin",
     "value": "undefined | '24' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "padding",
     "value": "undefined | '24' | '18' | '6' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rowGap",
     "value": "undefined | number | '24' | '36' | '18' | '6' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | null | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowSizeMod"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "spacing",
     "value": "undefined | null | '18' | '6' | '12'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "topShadow",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "value": "undefined | 'form' | 'panel'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "vPadding",
     "value": "undefined | '24' | '36' | '48' | '18' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RowMods"
     },
     "optional": true
    }
   ]
  },
  "PanelMods": {
   "kind": "InterfaceDeclaration",
   "name": "PanelMods",
   "value": "PanelMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "background",
     "value": "undefined | 'white' | 'night50'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "margin",
     "value": "undefined | '24'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "shadow",
     "value": "undefined | false | true",
     "optional": true
    }
   ]
  },
  "ScrollBarsMods": {
   "kind": "InterfaceDeclaration",
   "name": "ScrollBarsMods",
   "value": "ScrollBarsMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "theme",
     "value": "undefined | 'light' | 'dark'",
     "optional": true
    }
   ]
  },
  "VirtualListMods": {
   "kind": "InterfaceDeclaration",
   "name": "VirtualListMods",
   "value": "VirtualListMods"
  },
  "IconContainerMods": {
   "kind": "InterfaceDeclaration",
   "name": "IconContainerMods",
   "value": "IconContainerMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "IconContainer color.",
      "  @deprecated Property color is deprecated and will be removed in future release. Please make icon color configuration by yourself, e.g. via cx or style prop."
     ],
     "value": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night500' | 'night600' | 'cobalt' | 'lavanda' | 'fuchsia' | 'night200' | 'night300' | 'night400' | 'night50' | 'night100' | 'night700' | 'night800' | 'night900' | 'carbon'",
     "optional": true
    }
   ]
  },
  "RichTextViewMods": {
   "kind": "InterfaceDeclaration",
   "name": "RichTextViewMods",
   "value": "RichTextViewMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '12' | '14' | '16'",
     "optional": true
    }
   ]
  },
  "TextMods": {
   "kind": "InterfaceDeclaration",
   "name": "TextMods",
   "value": "TextMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night500' | 'night600' | 'night300' | 'night400' | 'night50' | 'night700' | 'night800' | 'night900'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "font",
     "value": "undefined | 'sans' | 'sans-semibold' | 'sans-light'",
     "optional": true
    }
   ]
  },
  "TextProps": {
   "kind": "TypeAliasDeclaration",
   "name": "TextProps",
   "value": "TextProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night500' | 'night600' | 'night300' | 'night400' | 'night50' | 'night700' | 'night800' | 'night900'",
     "inheritedFrom": {
      "module": "@epam/loveship",
      "name": "TextMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "font",
     "value": "undefined | 'sans' | 'sans-semibold' | 'sans-light'",
     "inheritedFrom": {
      "module": "@epam/loveship",
      "name": "TextMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fontSize",
     "value": "undefined | '24' | '18' | '12' | '14' | '16' | '10'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TextSettings"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "lineHeight",
     "value": "undefined | '24' | '30' | '18' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TextSettings"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48' | '18'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TextMods"
     },
     "optional": true
    }
   ]
  },
  "ControlShape": {
   "kind": "TypeAliasDeclaration",
   "name": "ControlShape",
   "value": "'square' | 'round'"
  },
  "FillStyle": {
   "kind": "TypeAliasDeclaration",
   "name": "FillStyle",
   "value": "'white' | 'none' | 'solid' | 'light'"
  },
  "ControlSize": {
   "kind": "TypeAliasDeclaration",
   "name": "ControlSize",
   "value": "'none' | '24' | '30' | '36' | '42' | '48'"
  },
  "TextSize": {
   "kind": "TypeAliasDeclaration",
   "name": "TextSize",
   "value": "'none' | '24' | '30' | '36' | '42' | '48' | '18'"
  },
  "RowSize": {
   "kind": "TypeAliasDeclaration",
   "name": "RowSize",
   "value": "'24' | '30' | '36' | '42' | '48'"
  },
  "EpamPrimaryColor": {
   "kind": "TypeAliasDeclaration",
   "name": "EpamPrimaryColor",
   "value": "'sky' | 'grass' | 'sun' | 'fire'"
  },
  "EpamAdditionalColor": {
   "kind": "TypeAliasDeclaration",
   "name": "EpamAdditionalColor",
   "value": "'cobalt' | 'lavanda' | 'fuchsia'"
  },
  "EpamGrayscaleColor": {
   "kind": "TypeAliasDeclaration",
   "name": "EpamGrayscaleColor",
   "value": "'white' | 'night500' | 'night600' | 'night200' | 'night300' | 'night400' | 'night50' | 'night100' | 'night700' | 'night800' | 'night900'"
  },
  "EpamColor": {
   "kind": "TypeAliasDeclaration",
   "name": "EpamColor",
   "value": "'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night500' | 'night600' | 'cobalt' | 'lavanda' | 'fuchsia' | 'night200' | 'night300' | 'night400' | 'night50' | 'night100' | 'night700' | 'night800' | 'night900'"
  },
  "FontStyle": {
   "kind": "TypeAliasDeclaration",
   "name": "FontStyle",
   "value": "'sans' | 'sans-semibold' | 'sans-light'"
  },
  "ColorMod": {
   "kind": "InterfaceDeclaration",
   "name": "ColorMod",
   "value": "ColorMod",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Component color"
     ],
     "value": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night500' | 'night600' | 'cobalt' | 'lavanda' | 'fuchsia' | 'night200' | 'night300' | 'night400' | 'night50' | 'night100' | 'night700' | 'night800' | 'night900'",
     "optional": true
    }
   ]
  },
  "SizeMod": {
   "kind": "InterfaceDeclaration",
   "name": "SizeMod",
   "value": "SizeMod",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "optional": true
    }
   ]
  },
  "FontMod": {
   "kind": "InterfaceDeclaration",
   "name": "FontMod",
   "value": "FontMod",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "font",
     "value": "undefined | 'sans' | 'sans-semibold' | 'sans-light'",
     "optional": true
    }
   ]
  },
  "RowSizeMod": {
   "kind": "InterfaceDeclaration",
   "name": "RowSizeMod",
   "value": "RowSizeMod",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '24' | '30' | '36' | '42' | '48'",
     "optional": true
    }
   ]
  },
  "EditMode": {
   "kind": "InterfaceDeclaration",
   "name": "EditMode",
   "value": "EditMode",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'form' | 'cell'",
     "optional": true
    }
   ]
  },
  "TooltipMods": {
   "kind": "InterfaceDeclaration",
   "name": "TooltipMods",
   "value": "TooltipMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Tooltip color.",
      "  'night900' is deprecated and will be removed in future release, use 'gray' instead."
     ],
     "value": "undefined | 'fire' | 'white' | 'gray' | 'night900'",
     "optional": true
    }
   ]
  },
  "TooltipProps": {
   "kind": "TypeAliasDeclaration",
   "name": "TooltipProps",
   "value": "TooltipProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "boundaryElement",
     "value": "undefined | HTMLElement | HTMLElement[] | 'clippingParents'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "comment": [
      "React Node(s) to show tooltip for"
     ],
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeBodyOnTogglerHidden",
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeDelay",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "closeOnMouseLeave",
     "value": "undefined | false | 'toggler' | 'boundary'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Tooltip color.",
      "  'night900' is deprecated and will be removed in future release, use 'gray' instead."
     ],
     "value": "undefined | 'fire' | 'white' | 'gray' | 'night900'",
     "inheritedFrom": {
      "module": "@epam/loveship",
      "name": "TooltipMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "content",
     "comment": [
      "Content to show in the tooltip (ReactNode)"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxWidth",
     "comment": [
      "Max width of tooltip"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "modifiers",
     "value": "undefined | (Modifier<any, object>>)[]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "offset",
     "comment": [
      "See <a href='https://popper.js.org/docs/v2/modifiers/offset/'>Popper docs</a>"
     ],
     "value": "undefined | OffsetsFunction | [number | null | undefined, number | null | undefined]",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onClose",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "openDelay",
     "comment": [
      "Should we close dropdown on click on the Toggler, if it's already open? Default is true."
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placement",
     "value": "undefined | 'left' | 'right' | 'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "portalTarget",
     "value": "undefined | HTMLElement",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "DropdownProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderContent",
     "comment": [
      "Alternative to 'content' prop, you can pass a render function.",
      " The function will only be called when content is shown, this can save performance."
     ],
     "value": "undefined | () => any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "TooltipCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "DropdownContainerMods": {
   "kind": "InterfaceDeclaration",
   "name": "DropdownContainerMods",
   "value": "DropdownContainerMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'white' | 'night700'",
     "optional": true
    }
   ]
  },
  "SnackbarCardProps": {
   "kind": "InterfaceDeclaration",
   "name": "SnackbarCardProps",
   "value": "SnackbarCardProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "clearTimer",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClose",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onSuccess",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "refreshTimer",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "snackType",
     "value": "'success' | 'warning' | 'info' | 'danger'",
     "optional": false
    }
   ]
  },
  "NotificationCardMods": {
   "kind": "InterfaceDeclaration",
   "name": "NotificationCardMods",
   "value": "NotificationCardMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "'sky' | 'grass' | 'sun' | 'fire' | 'night600'",
     "optional": false
    }
   ]
  },
  "NotificationCardProps": {
   "kind": "TypeAliasDeclaration",
   "name": "NotificationCardProps",
   "value": "NotificationCardProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "actions",
     "value": "undefined | NotificationAction[]",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "DefaultNotificationProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "clearTimer",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "'sky' | 'grass' | 'sun' | 'fire' | 'night600'",
     "inheritedFrom": {
      "module": "@epam/loveship",
      "name": "NotificationCardMods"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "NotificationCardProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "key",
     "value": "string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onClose",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onSuccess",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "refreshTimer",
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "INotification"
     },
     "optional": true
    }
   ]
  },
  "AlertMods": {
   "kind": "InterfaceDeclaration",
   "name": "AlertMods",
   "value": "AlertMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'sky' | 'grass' | 'sun' | 'fire'",
     "optional": true
    }
   ]
  },
  "AlertProps": {
   "kind": "InterfaceDeclaration",
   "name": "AlertProps",
   "value": "AlertProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "actions",
     "comment": [
      "List of actions to display in the alert. Each action has name and 'action' callback"
     ],
     "value": "undefined | notificationAction[]",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "AlertProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'sky' | 'grass' | 'sun' | 'fire'",
     "inheritedFrom": {
      "module": "@epam/loveship",
      "name": "AlertMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "An optional icon to show on the left of the alert"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "AlertProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClose",
     "comment": [
      "When specified, a close icon is rendered. onClose callback will be called on clicking the close icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "AlertProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "comment": [
      "Component size. If omitted, 48 size will be used."
     ],
     "value": "undefined | '36' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "AlertProps"
     },
     "optional": true
    }
   ]
  },
  "ModalWindowMods": {
   "kind": "InterfaceDeclaration",
   "name": "ModalWindowMods",
   "value": "ModalWindowMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "height",
     "value": "undefined | number | 'auto' | '300' | '700'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "value": "undefined | number | '300' | '420' | '480' | '600' | '900'",
     "optional": true
    }
   ]
  },
  "TextInputMods": {
   "kind": "InterfaceDeclaration",
   "name": "TextInputMods",
   "value": "TextInputMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'form' | 'cell' | 'inline'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "IHasEditMode"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48' | '60'",
     "optional": true
    }
   ]
  },
  "RangeSliderMods": {
   "kind": "InterfaceDeclaration",
   "name": "RangeSliderMods",
   "value": "RangeSliderMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "comment": [
      "Component color"
     ],
     "value": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night500' | 'night600' | 'cobalt' | 'lavanda' | 'fuchsia' | 'night200' | 'night300' | 'night400' | 'night50' | 'night100' | 'night700' | 'night800' | 'night900'",
     "inheritedFrom": {
      "module": "@epam/loveship",
      "name": "ColorMod"
     },
     "optional": true
    }
   ]
  },
  "RatingMods": {
   "kind": "InterfaceDeclaration",
   "name": "RatingMods",
   "value": "RatingMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 18 | 24 | 30",
     "optional": true
    }
   ]
  },
  "CheckboxMods": {
   "kind": "InterfaceDeclaration",
   "name": "CheckboxMods",
   "value": "CheckboxMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "mode",
     "value": "undefined | 'form' | 'cell'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "CheckboxMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '18' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "CheckboxMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "theme",
     "value": "undefined | 'light' | 'dark'",
     "optional": true
    }
   ]
  },
  "RadioInputMods": {
   "kind": "InterfaceDeclaration",
   "name": "RadioInputMods",
   "value": "RadioInputMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '18' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RadioInputMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "theme",
     "value": "undefined | 'light' | 'dark'",
     "optional": true
    }
   ]
  },
  "RadioInputProps": {
   "kind": "InterfaceDeclaration",
   "name": "RadioInputProps",
   "value": "RadioInputProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getValueChangeAnalyticsEvent",
     "comment": [
      "Given a value, returns an analytics event to send when component is edited.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | (newValue: T | null, oldValue: T | null) => AnalyticsEvent",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableOnChange"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "RadioInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "id",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "RadioInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "label",
     "comment": [
      "Label. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasLabel"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderLabel",
     "value": "undefined | () => React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "RadioInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '18' | '12'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "RadioInputMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "RadioInputProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "theme",
     "value": "undefined | 'light' | 'dark'",
     "inheritedFrom": {
      "module": "@epam/loveship",
      "name": "RadioInputMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "MultiSwitchColor": {
   "kind": "TypeAliasDeclaration",
   "name": "MultiSwitchColor",
   "value": "'sky' | 'night600' | 'gray'"
  },
  "MultiSwitchMods": {
   "kind": "InterfaceDeclaration",
   "name": "MultiSwitchMods",
   "value": "MultiSwitchMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'sky' | 'night600' | 'gray'",
     "optional": true
    }
   ]
  },
  "MultiSwitchProps": {
   "kind": "TypeAliasDeclaration",
   "name": "MultiSwitchProps",
   "value": "MultiSwitchProps<TValue>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'sky' | 'night600' | 'gray'",
     "inheritedFrom": {
      "module": "@epam/loveship",
      "name": "MultiSwitchMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "items",
     "value": "MultiSwitchItem<TValue>[]",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "MultiSwitchProps"
     },
     "optional": false
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | 'none' | '24' | '30' | '36' | '42' | '48'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "SizeMod"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    }
   ]
  },
  "SliderRatingProps": {
   "kind": "InterfaceDeclaration",
   "name": "SliderRatingProps",
   "value": "SliderRatingProps<TValue>",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "from",
     "value": "undefined | 2 | 1",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getHandlerIcon",
     "value": "undefined | (value: number) => Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "getScaleIcon",
     "value": "undefined | (value: number) => Icon",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInvalid",
     "comment": [
      "True if component contains invalid input"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isReadonly",
     "comment": [
      "Disable editing. Unlike isDisabled, keep component's value readable."
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeReadonly"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isRequired",
     "comment": [
      "Marks that component's value is required"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeRequired"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onValueChange",
     "comment": [
      "Called when value needs to be changed (usually due to user interaction)"
     ],
     "value": "(newValue: T) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "renderTooltip",
     "value": "undefined | (value: TValue) => React.ReactNode",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '24' | '18'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tooltipColor",
     "value": "undefined | 'fire' | 'white' | 'gray'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationMessage",
     "comment": [
      "Message describing why the value is invalid"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "validationProps",
     "comment": [
      "If T is a complex value (object or array), this property contains validation states of inner items"
     ],
     "value": "undefined | { [key: string]: ICanBeInvalid; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanBeInvalid"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "value",
     "comment": [
      "The current value of component"
     ],
     "value": "T",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IEditable"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "withoutNa",
     "value": "undefined | false | true",
     "optional": true
    }
   ]
  },
  "BadgeMods": {
   "kind": "InterfaceDeclaration",
   "name": "BadgeMods",
   "value": "BadgeMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night500' | 'night600' | 'cobalt' | 'lavanda' | 'fuchsia' | 'night200' | 'night300' | 'night400'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fill",
     "value": "undefined | 'white' | 'none' | 'solid' | 'light' | 'semitransparent' | 'transparent'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "shape",
     "value": "undefined | 'square' | 'round'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '24' | '30' | '36' | '42' | '48' | '18' | '12'",
     "optional": true
    }
   ]
  },
  "BadgeProps": {
   "kind": "TypeAliasDeclaration",
   "name": "BadgeProps",
   "value": "BadgeProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "caption",
     "comment": [
      "Caption. Can be a string, or React.Elements. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCaption"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "captionCX",
     "comment": [
      "CSS classes to put on the caption"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clearIcon",
     "comment": [
      "Icon for clear value button (usually cross)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-components",
      "name": "ButtonProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "clickAnalyticsEvent",
     "comment": [
      "An analytics event to send (via AnalyticsContext) when component is clicked.",
      " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
     ],
     "value": "undefined | null | { [key: string]: any; name: string; }",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IAnalyticableClick"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "undefined | 'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'night500' | 'night600' | 'cobalt' | 'lavanda' | 'fuchsia' | 'night200' | 'night300' | 'night400'",
     "inheritedFrom": {
      "module": "@epam/loveship",
      "name": "BadgeMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "count",
     "value": "undefined | null | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "countPosition",
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIcon",
     "comment": [
      "Icon for drop-down toggler"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "dropdownIconPosition",
     "comment": [
      "Position of the dropdown icon ('left' of 'right')"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ButtonCoreProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "fill",
     "value": "undefined | 'white' | 'none' | 'solid' | 'light' | 'semitransparent' | 'transparent'",
     "inheritedFrom": {
      "module": "@epam/loveship",
      "name": "BadgeMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "forwardedRef",
     "comment": [
      "this ref is passed to the underlying component"
     ],
     "value": "undefined | null | (instance: T | null) => void | React.MutableRefObject<T | null>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasForwardedRef"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "comment": [
      "Href (URL) to redirect to, for non-SPA redirects"
     ],
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "icon",
     "comment": [
      "Icon can be an React element (usually an SVG element)"
     ],
     "value": "undefined | Icon",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "iconPosition",
     "comment": [
      "Position of the icon (left of right)"
     ],
     "value": "undefined | 'left' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDisabled",
     "comment": [
      "Disable editing, and visually de-emphasize value of the component"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDisableable"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDropdown",
     "comment": [
      "Enabled dropdown mode - component can toggle dropdown"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isInteractedOutside",
     "comment": [
      "Called when component is interacted outside, to close the dropdown"
     ],
     "value": "undefined | (event: Event) => boolean",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isLinkActive",
     "comment": [
      "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isOpen",
     "comment": [
      "When component acts as dropdown, indicate that dropdown is open"
     ],
     "value": "undefined | false | true",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "link",
     "comment": [
      "Link object to redirect to for SPA-redirects"
     ],
     "value": "undefined | Link",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClear",
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IBasicPickerToggler"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onClick",
     "comment": [
      "Called when component is clicked"
     ],
     "value": "undefined | (e?: any) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IClickable"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "onIconClick",
     "comment": [
      "Click handler for the icon"
     ],
     "value": "undefined | () => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasIcon"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "placeholder",
     "comment": [
      "Placeholder to display when empty"
     ],
     "value": "any",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasPlaceholder"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "rawProps",
     "comment": [
      "Any HTML attributes (native or 'data-') to put on the underlying component"
     ],
     "value": "undefined | T & Record<`data-${string}`, string>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasRawProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "ref",
     "comment": [
      "Component's ref"
     ],
     "value": "undefined | null | (instance: any) => void | React.RefObject<any>",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "shape",
     "value": "undefined | 'square' | 'round'",
     "inheritedFrom": {
      "module": "@epam/loveship",
      "name": "BadgeMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '24' | '30' | '36' | '42' | '48' | '18' | '12'",
     "inheritedFrom": {
      "module": "@epam/loveship",
      "name": "BadgeMods"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "tabIndex",
     "comment": [
      "Controls the order of keyboard navigation between components"
     ],
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasTabIndex"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "target",
     "comment": [
      "Controls where the link should be opened"
     ],
     "value": "undefined | '_blank'",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "ICanRedirect"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "toggleDropdownOpening",
     "comment": [
      "Called when associated dropdown should open or close"
     ],
     "value": "undefined | (value: boolean) => void",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IDropdownToggler"
     },
     "optional": true
    }
   ]
  },
  "TagMods": {
   "kind": "InterfaceDeclaration",
   "name": "TagMods",
   "value": "TagMods",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "fill",
     "value": "undefined | 'white' | 'none' | 'solid' | 'light'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "size",
     "value": "undefined | '24' | '30' | '36' | '42' | '48' | '18'",
     "inheritedFrom": {
      "module": "@epam/uui",
      "name": "TagMods"
     },
     "optional": true
    }
   ]
  },
  "ErrorConfig": {
   "kind": "InterfaceDeclaration",
   "name": "ErrorConfig",
   "value": "ErrorConfig",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "getInfo",
     "value": "undefined | (error: any, defaultErrorInfo: UuiErrorInfo",
     "optional": true
    }
   ]
  },
  "ErrorPageProps": {
   "kind": "InterfaceDeclaration",
   "name": "ErrorPageProps",
   "value": "ErrorPageProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "React.ReactNode",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasChildren"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "cx",
     "comment": [
      "CSS class(es) to put on component's root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details"
     ],
     "value": "undefined | null | string | number | false | true | ClassDictionary | ClassArray",
     "inheritedFrom": {
      "module": "@epam/uui-core",
      "name": "IHasCX"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "errorPageConfig",
     "value": "undefined | ErrorConfig",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "onNotificationError",
     "value": "undefined | (errors: ApiCallInfo) => void",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "theme",
     "value": "undefined | 'light' | 'dark'",
     "optional": true
    }
   ]
  },
  "MakeMeUser": {
   "kind": "InterfaceDeclaration",
   "name": "MakeMeUser",
   "value": "MakeMeUser",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "avatarUrl",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "email",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "externalId",
     "value": "string | number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "jobTitle",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "value": "string",
     "optional": false
    }
   ]
  },
  "MakeMeItemProps": {
   "kind": "InterfaceDeclaration",
   "name": "MakeMeItemProps",
   "value": "MakeMeItemProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "api",
     "value": "MakeMeUser, string | number, any>",
     "optional": false
    }
   ]
  }
 },
 "@epam/uui-editor": {
  "LinkElement": {
   "kind": "InterfaceDeclaration",
   "name": "LinkElement",
   "value": "LinkElement",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "TDescendant[]",
     "inheritedFrom": {
      "name": "TElement"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "href",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "value": "string",
     "optional": false
    }
   ]
  },
  "PlaceholderPluginParams": {
   "kind": "InterfaceDeclaration",
   "name": "PlaceholderPluginParams",
   "value": "PlaceholderPluginParams",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "items",
     "value": "{ [key: string]: any; name: string; }[]",
     "optional": false
    }
   ]
  },
  "EditorValue": {
   "kind": "TypeAliasDeclaration",
   "name": "EditorValue",
   "value": "null | Value"
  },
  "PlateImgAlign": {
   "kind": "TypeAliasDeclaration",
   "name": "PlateImgAlign",
   "value": "'left' | 'center' | 'right'"
  },
  "SlateImgAlign": {
   "kind": "TypeAliasDeclaration",
   "name": "SlateImgAlign",
   "value": "'align-left' | 'align-right' | 'align-center'"
  },
  "SlateImageSize": {
   "kind": "TypeAliasDeclaration",
   "name": "SlateImageSize",
   "value": "SlateImageSize",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "height",
     "value": "string | number",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "value": "number",
     "optional": false
    }
   ]
  },
  "SlateProps": {
   "kind": "InterfaceDeclaration",
   "name": "SlateProps",
   "value": "SlateProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "data",
     "value": "{ imageSize: SlateImgAlign; } & Partial<File> | { imageSize: FileUploadResponse>",
     "optional": false
    }
   ]
  },
  "PlateProps": {
   "kind": "InterfaceDeclaration",
   "name": "PlateProps",
   "value": "PlateProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "align",
     "value": "undefined | 'left' | 'center' | 'right'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "url",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "value": "undefined | number",
     "optional": true
    }
   ]
  },
  "IImageElement": {
   "kind": "InterfaceDeclaration",
   "name": "IImageElement",
   "value": "IImageElement",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "align",
     "value": "undefined | 'left' | 'center' | 'right'",
     "inheritedFrom": {
      "module": "@epam/uui-editor",
      "name": "PlateProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "children",
     "value": "TDescendant[]",
     "inheritedFrom": {
      "name": "TElement"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "data",
     "value": "{ imageSize: SlateImgAlign; } & Partial<File> | { imageSize: FileUploadResponse>",
     "inheritedFrom": {
      "module": "@epam/uui-editor",
      "name": "SlateProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "type",
     "value": "string",
     "inheritedFrom": {
      "name": "TElement"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "url",
     "value": "string",
     "inheritedFrom": {
      "module": "@epam/uui-editor",
      "name": "PlateProps"
     },
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "width",
     "value": "undefined | number",
     "inheritedFrom": {
      "module": "@epam/uui-editor",
      "name": "PlateProps"
     },
     "optional": true
    }
   ]
  }
 },
 "@epam/uui-timeline": {
  "BaseTimelineCanvasComponentProps": {
   "kind": "InterfaceDeclaration",
   "name": "BaseTimelineCanvasComponentProps",
   "value": "BaseTimelineCanvasComponentProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "className",
     "value": "undefined | string",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderOnTop",
     "value": "undefined | (ctx: CanvasRenderingContext2D, t: TimelineTransform) => void",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "timelineController",
     "value": "TimelineController",
     "optional": false
    }
   ]
  },
  "TimelineControllerOptions": {
   "kind": "InterfaceDeclaration",
   "name": "TimelineControllerOptions",
   "value": "TimelineControllerOptions",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "isHoliday",
     "value": "undefined | (date: Date) => boolean",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxScale",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "minScale",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "minVisibleDate",
     "value": "undefined | Date",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "minWidth",
     "value": "undefined | number",
     "optional": true
    }
   ]
  },
  "TimelineGridProps": {
   "kind": "InterfaceDeclaration",
   "name": "TimelineGridProps",
   "value": "TimelineGridProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "className",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-timeline",
      "name": "BaseTimelineCanvasComponentProps"
     },
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderOnTop",
     "value": "undefined | (ctx: CanvasRenderingContext2D, t: TimelineTransform) => void",
     "inheritedFrom": {
      "module": "@epam/uui-timeline",
      "name": "BaseTimelineCanvasComponentProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "timelineController",
     "value": "TimelineController",
     "inheritedFrom": {
      "module": "@epam/uui-timeline",
      "name": "BaseTimelineCanvasComponentProps"
     },
     "optional": false
    }
   ]
  },
  "TimelineNavProps": {
   "kind": "InterfaceDeclaration",
   "name": "TimelineNavProps",
   "value": "TimelineNavProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "timelineController",
     "value": "TimelineController",
     "optional": false
    }
   ]
  },
  "TimelineScaleProps": {
   "kind": "InterfaceDeclaration",
   "name": "TimelineScaleProps",
   "value": "TimelineScaleProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "className",
     "value": "undefined | string",
     "inheritedFrom": {
      "module": "@epam/uui-timeline",
      "name": "BaseTimelineCanvasComponentProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isDraggable",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "isScaleChangeOnWheel",
     "value": "undefined | false | true",
     "optional": true
    },
    {
     "kind": "MethodSignature",
     "name": "renderOnTop",
     "value": "undefined | (ctx: CanvasRenderingContext2D, t: TimelineTransform) => void",
     "inheritedFrom": {
      "module": "@epam/uui-timeline",
      "name": "BaseTimelineCanvasComponentProps"
     },
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "shiftPercent",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "timelineController",
     "value": "TimelineController",
     "inheritedFrom": {
      "module": "@epam/uui-timeline",
      "name": "BaseTimelineCanvasComponentProps"
     },
     "optional": false
    }
   ]
  },
  "Stage": {
   "kind": "InterfaceDeclaration",
   "name": "Stage",
   "value": "Stage",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "endDate",
     "value": "Date",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "eventName",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "name",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "startDate",
     "value": "Date",
     "optional": false
    }
   ]
  },
  "TimelineEventsBarProps": {
   "kind": "InterfaceDeclaration",
   "name": "TimelineEventsBarProps",
   "value": "TimelineEventsBarProps",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "stages",
     "value": "Stage[]",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "timelineController",
     "value": "TimelineController",
     "optional": false
    }
   ]
  },
  "Scales": {
   "kind": "EnumDeclaration",
   "name": "Scales",
   "value": "Scales.Year | Scales.Month | Scales.Week | Scales.Day | Scales.Hour | Scales.Minute"
  },
  "Item": {
   "kind": "InterfaceDeclaration",
   "name": "Item",
   "value": "Item",
   "props": [
    {
     "kind": "PropertySignature",
     "name": "color",
     "value": "string",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "fillType",
     "value": "undefined | 'shaded' | 'solid'",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "from",
     "value": "Date",
     "optional": false
    },
    {
     "kind": "PropertySignature",
     "name": "height",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "maxPxPerDay",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "minPixPerDay",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "opacity",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "priority",
     "value": "undefined | number",
     "optional": true
    },
    {
     "kind": "PropertySignature",
     "name": "to",
     "value": "Date",
     "optional": false
    }
   ]
  }
 }
}