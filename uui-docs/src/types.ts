import * as React from 'react';
import { IDemoApi } from './demoApi';
import { Icon } from '@epam/uui-core';

export interface DemoComponentProps<TProps = any> {
    DemoComponent: React.ComponentType<TProps> | React.NamedExoticComponent<TProps>;
    props: TProps;
}

export interface IComponentDocs<TProps> {
    name: string;
    component?: React.ComponentType<TProps> | React.NamedExoticComponent<TProps>;
    props?: PropDoc<TProps, keyof TProps>[];
    contexts?: DemoContext[];
}

export interface DemoContext {
    context: React.ComponentType<DemoComponentProps>;
    name: string;
}

export interface IPropSamplesCreationContext<TProps = {}> {
    getCallback(name: string): () => void;
    getChangeHandler(name: string): (newValue: any) => void;
    getSelectedProps(): TProps;
    demoApi: IDemoApi;
    forceUpdate: () => void;

    /**
     * Currently, the "uui-docs" module is built using Rollup
     * and therefore can't use webpack-specific API (require.context)
     * to collect all icons from the epam-assets module. So it's a workaround.     *
     */
    getIconList?: () => IconList<Icon>[];
}

export type PropExampleObject<TProp> = {
    id?: string;
    name?: string;
    value: TProp;
    isDefault?: boolean;
};

export type PropExample<TProp> = PropExampleObject<TProp> | TProp;

export interface IPropDocEditor<TProp = any> {
    name: string;
    value: TProp;
    exampleId: string;
    examples: PropExampleObject<TProp>[];
    onValueChange(newValue: TProp): void;
    onExampleIdChange(newExampleId: string): void;
}
export type TSharedPropEditorType =
    'CssClassEditor' |
    'JsonEditor' |
    'JsonView' |
    'LinkEditor' |
    'NumEditor' |
    'StringEditor' |
    'StringWithExamplesEditor' |
    'MultiUnknownEditor' |
    'SingleUnknownEditor' |
    'IconEditor' |
    'CantResolve'
    ;

export type TPropDocEditorType = React.FC<IPropDocEditor> | TSharedPropEditorType;

export interface PropDoc<TProps, TProp extends keyof TProps> {
    name: Extract<keyof TProps, string>;
    description?: string;
    isRequired: boolean;
    defaultValue?: TProps[TProp];
    examples?: PropExample<TProps[TProp]>[] | ((ctx: IPropSamplesCreationContext<TProps>) => PropExample<TProps[TProp]>[]);
    editorType?: TPropDocEditorType;
    remountOnChange?: boolean;
}

export enum TSkin {
    UUI = 'uui',
    Electric = 'electric',
    Loveship = 'loveship',
    Promo = 'promo'
}

export enum TDocContext {
    Default = 'Default',
    FlexRow = 'FlexRow',
    Form = 'Form',
    PagePanel = 'PagePanel',
    RelativePanel = 'RelativePanel',
    Resizable = 'Resizable',
    TabButton = 'TabButton',
    Table = 'Table',
    VerticalTabButton = 'VerticalTabButton'
}

export type TDocsGenExportedType = Autogenerated_TDocsGenExportedTypeRef;

type IconBase<TIcon> = {
    id: string;
    icon: TIcon;
    name: string;
    groupName: string;
    size: number;
};
export type IconGroup<TIcon> = { [key: string]: IconBase<TIcon>[] };
export type IconList<TIcon> = IconBase<TIcon> & {
    parentId?: string;
};
